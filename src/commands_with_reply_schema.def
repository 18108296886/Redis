/* Automatically generated by generate-command-code.py, do not edit. */


/* We have fabulous commands from
 * the fantastic
 * Redis Command Table! */

/* Must match redisCommandGroup */
const char *COMMAND_GROUP_STR[] = {
    "generic",
    "string",
    "list",
    "set",
    "sorted-set",
    "hash",
    "pubsub",
    "transactions",
    "connection",
    "server",
    "scripting",
    "hyperloglog",
    "cluster",
    "sentinel",
    "geo",
    "stream",
    "bitmap",
    "module"
};

const char *commandGroupStr(int index) {
    return COMMAND_GROUP_STR[index];
}
/********** BITCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITCOUNT history */
commandHistory BITCOUNT_History[] = {
{"7.0.0","Added the `BYTE|BIT` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITCOUNT tips */
#define BITCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITCOUNT key specs */
keySpec BITCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITCOUNT range unit argument table */
struct COMMAND_ARG BITCOUNT_range_unit_Subargs[] = {
{MAKE_ARG("byte",ARG_TYPE_PURE_TOKEN,-1,"BYTE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_PURE_TOKEN,-1,"BIT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITCOUNT range argument table */
struct COMMAND_ARG BITCOUNT_range_Subargs[] = {
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=BITCOUNT_range_unit_Subargs},
};

/* BITCOUNT argument table */
struct COMMAND_ARG BITCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=BITCOUNT_range_Subargs},
};

/* BITCOUNT_ReplySchema reply schema */
struct jsonObjectElement BITCOUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of bits set to 1."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject BITCOUNT_ReplySchema = {BITCOUNT_ReplySchema_elements,.length=3};

/********** BITFIELD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITFIELD history */
#define BITFIELD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITFIELD tips */
#define BITFIELD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITFIELD key specs */
keySpec BITFIELD_Keyspecs[1] = {
{"This command allows both access and modification of the key",CMD_KEY_RW|CMD_KEY_UPDATE|CMD_KEY_ACCESS|CMD_KEY_VARIABLE_FLAGS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITFIELD operation get_block argument table */
struct COMMAND_ARG BITFIELD_operation_get_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write overflow_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_overflow_block_Subargs[] = {
{MAKE_ARG("wrap",ARG_TYPE_PURE_TOKEN,-1,"WRAP",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sat",ARG_TYPE_PURE_TOKEN,-1,"SAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fail",ARG_TYPE_PURE_TOKEN,-1,"FAIL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation set_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_set_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation incrby_block argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_incrby_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD operation write write_operation argument table */
struct COMMAND_ARG BITFIELD_operation_write_write_operation_Subargs[] = {
{MAKE_ARG("set-block",ARG_TYPE_BLOCK,-1,"SET",NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=BITFIELD_operation_write_write_operation_set_block_Subargs},
{MAKE_ARG("incrby-block",ARG_TYPE_BLOCK,-1,"INCRBY",NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=BITFIELD_operation_write_write_operation_incrby_block_Subargs},
};

/* BITFIELD operation write argument table */
struct COMMAND_ARG BITFIELD_operation_write_Subargs[] = {
{MAKE_ARG("overflow-block",ARG_TYPE_ONEOF,-1,"OVERFLOW",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=BITFIELD_operation_write_overflow_block_Subargs},
{MAKE_ARG("write-operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_write_write_operation_Subargs},
};

/* BITFIELD operation argument table */
struct COMMAND_ARG BITFIELD_operation_Subargs[] = {
{MAKE_ARG("get-block",ARG_TYPE_BLOCK,-1,"GET",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_get_block_Subargs},
{MAKE_ARG("write",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BITFIELD_operation_write_Subargs},
};

/* BITFIELD argument table */
struct COMMAND_ARG BITFIELD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,2,NULL),.subargs=BITFIELD_operation_Subargs},
};

/* BITFIELD_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement BITFIELD_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The result of the subcommand at the same position"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject BITFIELD_ReplySchema_items_oneOf_0 = {BITFIELD_ReplySchema_items_oneOf_0_elements,.length=2};

/* BITFIELD_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement BITFIELD_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case OVERFLOW FAIL was given and overflows or underflows detected"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BITFIELD_ReplySchema_items_oneOf_1 = {BITFIELD_ReplySchema_items_oneOf_1_elements,.length=2};

/* BITFIELD_ReplySchema_items_oneOf array reply schema */
struct jsonObject *BITFIELD_ReplySchema_items_oneOf[] = {
&BITFIELD_ReplySchema_items_oneOf_0,
&BITFIELD_ReplySchema_items_oneOf_1,
};

/* BITFIELD_ReplySchema_items reply schema */
struct jsonObjectElement BITFIELD_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BITFIELD_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject BITFIELD_ReplySchema_items = {BITFIELD_ReplySchema_items_elements,.length=1};

/* BITFIELD_ReplySchema reply schema */
struct jsonObjectElement BITFIELD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&BITFIELD_ReplySchema_items},
};

struct jsonObject BITFIELD_ReplySchema = {BITFIELD_ReplySchema_elements,.length=2};

/********** BITFIELD_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITFIELD_RO history */
#define BITFIELD_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITFIELD_RO tips */
#define BITFIELD_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITFIELD_RO key specs */
keySpec BITFIELD_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITFIELD_RO get_block argument table */
struct COMMAND_ARG BITFIELD_RO_get_block_Subargs[] = {
{MAKE_ARG("encoding",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITFIELD_RO argument table */
struct COMMAND_ARG BITFIELD_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("get-block",ARG_TYPE_BLOCK,-1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,2,NULL),.subargs=BITFIELD_RO_get_block_Subargs},
};

/* BITFIELD_RO_ReplySchema_items reply schema */
struct jsonObjectElement BITFIELD_RO_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The result of the subcommand at the same position"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject BITFIELD_RO_ReplySchema_items = {BITFIELD_RO_ReplySchema_items_elements,.length=2};

/* BITFIELD_RO_ReplySchema reply schema */
struct jsonObjectElement BITFIELD_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&BITFIELD_RO_ReplySchema_items},
};

struct jsonObject BITFIELD_RO_ReplySchema = {BITFIELD_RO_ReplySchema_elements,.length=2};

/********** BITOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITOP history */
#define BITOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITOP tips */
#define BITOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITOP key specs */
keySpec BITOP_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={3},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* BITOP operation argument table */
struct COMMAND_ARG BITOP_operation_Subargs[] = {
{MAKE_ARG("and",ARG_TYPE_PURE_TOKEN,-1,"AND",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("or",ARG_TYPE_PURE_TOKEN,-1,"OR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xor",ARG_TYPE_PURE_TOKEN,-1,"XOR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("not",ARG_TYPE_PURE_TOKEN,-1,"NOT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITOP argument table */
struct COMMAND_ARG BITOP_Args[] = {
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=BITOP_operation_Subargs},
{MAKE_ARG("destkey",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* BITOP_ReplySchema reply schema */
struct jsonObjectElement BITOP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the size of the string stored in the destination key, that is equal to the size of the longest input string"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject BITOP_ReplySchema = {BITOP_ReplySchema_elements,.length=3};

/********** BITPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BITPOS history */
commandHistory BITPOS_History[] = {
{"7.0.0","Added the `BYTE|BIT` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BITPOS tips */
#define BITPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BITPOS key specs */
keySpec BITPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BITPOS range end_unit_block unit argument table */
struct COMMAND_ARG BITPOS_range_end_unit_block_unit_Subargs[] = {
{MAKE_ARG("byte",ARG_TYPE_PURE_TOKEN,-1,"BYTE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_PURE_TOKEN,-1,"BIT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BITPOS range end_unit_block argument table */
struct COMMAND_ARG BITPOS_range_end_unit_block_Subargs[] = {
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_end_unit_block_unit_Subargs},
};

/* BITPOS range argument table */
struct COMMAND_ARG BITPOS_range_Subargs[] = {
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-unit-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_end_unit_block_Subargs},
};

/* BITPOS argument table */
struct COMMAND_ARG BITPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bit",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=BITPOS_range_Subargs},
};

/* BITPOS_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BITPOS_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the position of the first bit set to 1 or 0 according to the request"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject BITPOS_ReplySchema_oneOf_0 = {BITPOS_ReplySchema_oneOf_0_elements,.length=3};

/* BITPOS_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BITPOS_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case the `bit` argument is 1 and the string is empty or composed of just zero bytes"},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject BITPOS_ReplySchema_oneOf_1 = {BITPOS_ReplySchema_oneOf_1_elements,.length=2};

/* BITPOS_ReplySchema_oneOf array reply schema */
struct jsonObject *BITPOS_ReplySchema_oneOf[] = {
&BITPOS_ReplySchema_oneOf_0,
&BITPOS_ReplySchema_oneOf_1,
};

/* BITPOS_ReplySchema reply schema */
struct jsonObjectElement BITPOS_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BITPOS_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BITPOS_ReplySchema = {BITPOS_ReplySchema_elements,.length=1};

/********** GETBIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETBIT history */
#define GETBIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETBIT tips */
#define GETBIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETBIT key specs */
keySpec GETBIT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETBIT argument table */
struct COMMAND_ARG GETBIT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GETBIT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GETBIT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject GETBIT_ReplySchema_oneOf_0 = {GETBIT_ReplySchema_oneOf_0_elements,.length=1};

/* GETBIT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GETBIT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject GETBIT_ReplySchema_oneOf_1 = {GETBIT_ReplySchema_oneOf_1_elements,.length=1};

/* GETBIT_ReplySchema_oneOf array reply schema */
struct jsonObject *GETBIT_ReplySchema_oneOf[] = {
&GETBIT_ReplySchema_oneOf_0,
&GETBIT_ReplySchema_oneOf_1,
};

/* GETBIT_ReplySchema reply schema */
struct jsonObjectElement GETBIT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The bit value stored at offset."},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GETBIT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GETBIT_ReplySchema = {GETBIT_ReplySchema_elements,.length=2};

/********** SETBIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SETBIT history */
#define SETBIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SETBIT tips */
#define SETBIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SETBIT key specs */
keySpec SETBIT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SETBIT argument table */
struct COMMAND_ARG SETBIT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SETBIT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SETBIT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject SETBIT_ReplySchema_oneOf_0 = {SETBIT_ReplySchema_oneOf_0_elements,.length=1};

/* SETBIT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SETBIT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject SETBIT_ReplySchema_oneOf_1 = {SETBIT_ReplySchema_oneOf_1_elements,.length=1};

/* SETBIT_ReplySchema_oneOf array reply schema */
struct jsonObject *SETBIT_ReplySchema_oneOf[] = {
&SETBIT_ReplySchema_oneOf_0,
&SETBIT_ReplySchema_oneOf_1,
};

/* SETBIT_ReplySchema reply schema */
struct jsonObjectElement SETBIT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The original bit value stored at offset."},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SETBIT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SETBIT_ReplySchema = {SETBIT_ReplySchema_elements,.length=2};

/********** ASKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ASKING history */
#define ASKING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ASKING tips */
#define ASKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ASKING key specs */
#define ASKING_Keyspecs NULL
#endif

/* ASKING_ReplySchema reply schema */
struct jsonObjectElement ASKING_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject ASKING_ReplySchema = {ASKING_ReplySchema_elements,.length=1};

/********** CLUSTER ADDSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER ADDSLOTS history */
#define CLUSTER_ADDSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER ADDSLOTS tips */
#define CLUSTER_ADDSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER ADDSLOTS key specs */
#define CLUSTER_ADDSLOTS_Keyspecs NULL
#endif

/* CLUSTER ADDSLOTS argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTS_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* CLUSTER_ADDSLOTS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_ADDSLOTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_ADDSLOTS_ReplySchema = {CLUSTER_ADDSLOTS_ReplySchema_elements,.length=1};

/********** CLUSTER ADDSLOTSRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER ADDSLOTSRANGE history */
#define CLUSTER_ADDSLOTSRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER ADDSLOTSRANGE tips */
#define CLUSTER_ADDSLOTSRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER ADDSLOTSRANGE key specs */
#define CLUSTER_ADDSLOTSRANGE_Keyspecs NULL
#endif

/* CLUSTER ADDSLOTSRANGE range argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTSRANGE_range_Subargs[] = {
{MAKE_ARG("start-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER ADDSLOTSRANGE argument table */
struct COMMAND_ARG CLUSTER_ADDSLOTSRANGE_Args[] = {
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CLUSTER_ADDSLOTSRANGE_range_Subargs},
};

/* CLUSTER_ADDSLOTSRANGE_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_ADDSLOTSRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_ADDSLOTSRANGE_ReplySchema = {CLUSTER_ADDSLOTSRANGE_ReplySchema_elements,.length=1};

/********** CLUSTER BUMPEPOCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER BUMPEPOCH history */
#define CLUSTER_BUMPEPOCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER BUMPEPOCH tips */
const char *CLUSTER_BUMPEPOCH_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER BUMPEPOCH key specs */
#define CLUSTER_BUMPEPOCH_Keyspecs NULL
#endif

/* CLUSTER_BUMPEPOCH_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_BUMPEPOCH_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="if the epoch was incremented"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="^BUMPED [0-9]*$"},
};

struct jsonObject CLUSTER_BUMPEPOCH_ReplySchema_oneOf_0 = {CLUSTER_BUMPEPOCH_ReplySchema_oneOf_0_elements,.length=3};

/* CLUSTER_BUMPEPOCH_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_BUMPEPOCH_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="if the node already has the greatest config epoch in the cluster"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="^STILL [0-9]*$"},
};

struct jsonObject CLUSTER_BUMPEPOCH_ReplySchema_oneOf_1 = {CLUSTER_BUMPEPOCH_ReplySchema_oneOf_1_elements,.length=3};

/* CLUSTER_BUMPEPOCH_ReplySchema_oneOf array reply schema */
struct jsonObject *CLUSTER_BUMPEPOCH_ReplySchema_oneOf[] = {
&CLUSTER_BUMPEPOCH_ReplySchema_oneOf_0,
&CLUSTER_BUMPEPOCH_ReplySchema_oneOf_1,
};

/* CLUSTER_BUMPEPOCH_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_BUMPEPOCH_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_BUMPEPOCH_ReplySchema_oneOf,.length=2}},
};

struct jsonObject CLUSTER_BUMPEPOCH_ReplySchema = {CLUSTER_BUMPEPOCH_ReplySchema_elements,.length=1};

/********** CLUSTER COUNT_FAILURE_REPORTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS history */
#define CLUSTER_COUNT_FAILURE_REPORTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS tips */
const char *CLUSTER_COUNT_FAILURE_REPORTS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER COUNT_FAILURE_REPORTS key specs */
#define CLUSTER_COUNT_FAILURE_REPORTS_Keyspecs NULL
#endif

/* CLUSTER COUNT_FAILURE_REPORTS argument table */
struct COMMAND_ARG CLUSTER_COUNT_FAILURE_REPORTS_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_COUNT_FAILURE_REPORTS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_COUNT_FAILURE_REPORTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of active failure reports for the node"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject CLUSTER_COUNT_FAILURE_REPORTS_ReplySchema = {CLUSTER_COUNT_FAILURE_REPORTS_ReplySchema_elements,.length=3};

/********** CLUSTER COUNTKEYSINSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER COUNTKEYSINSLOT history */
#define CLUSTER_COUNTKEYSINSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER COUNTKEYSINSLOT tips */
#define CLUSTER_COUNTKEYSINSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER COUNTKEYSINSLOT key specs */
#define CLUSTER_COUNTKEYSINSLOT_Keyspecs NULL
#endif

/* CLUSTER COUNTKEYSINSLOT argument table */
struct COMMAND_ARG CLUSTER_COUNTKEYSINSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_COUNTKEYSINSLOT_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_COUNTKEYSINSLOT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of keys in the specified hash slot"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject CLUSTER_COUNTKEYSINSLOT_ReplySchema = {CLUSTER_COUNTKEYSINSLOT_ReplySchema_elements,.length=3};

/********** CLUSTER DELSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER DELSLOTS history */
#define CLUSTER_DELSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER DELSLOTS tips */
#define CLUSTER_DELSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER DELSLOTS key specs */
#define CLUSTER_DELSLOTS_Keyspecs NULL
#endif

/* CLUSTER DELSLOTS argument table */
struct COMMAND_ARG CLUSTER_DELSLOTS_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* CLUSTER_DELSLOTS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_DELSLOTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_DELSLOTS_ReplySchema = {CLUSTER_DELSLOTS_ReplySchema_elements,.length=1};

/********** CLUSTER DELSLOTSRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER DELSLOTSRANGE history */
#define CLUSTER_DELSLOTSRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER DELSLOTSRANGE tips */
#define CLUSTER_DELSLOTSRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER DELSLOTSRANGE key specs */
#define CLUSTER_DELSLOTSRANGE_Keyspecs NULL
#endif

/* CLUSTER DELSLOTSRANGE range argument table */
struct COMMAND_ARG CLUSTER_DELSLOTSRANGE_range_Subargs[] = {
{MAKE_ARG("start-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end-slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER DELSLOTSRANGE argument table */
struct COMMAND_ARG CLUSTER_DELSLOTSRANGE_Args[] = {
{MAKE_ARG("range",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CLUSTER_DELSLOTSRANGE_range_Subargs},
};

/* CLUSTER_DELSLOTSRANGE_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_DELSLOTSRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_DELSLOTSRANGE_ReplySchema = {CLUSTER_DELSLOTSRANGE_ReplySchema_elements,.length=1};

/********** CLUSTER FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FAILOVER history */
#define CLUSTER_FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FAILOVER tips */
#define CLUSTER_FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FAILOVER key specs */
#define CLUSTER_FAILOVER_Keyspecs NULL
#endif

/* CLUSTER FAILOVER options argument table */
struct COMMAND_ARG CLUSTER_FAILOVER_options_Subargs[] = {
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("takeover",ARG_TYPE_PURE_TOKEN,-1,"TAKEOVER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER FAILOVER argument table */
struct COMMAND_ARG CLUSTER_FAILOVER_Args[] = {
{MAKE_ARG("options",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLUSTER_FAILOVER_options_Subargs},
};

/* CLUSTER_FAILOVER_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_FAILOVER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_FAILOVER_ReplySchema = {CLUSTER_FAILOVER_ReplySchema_elements,.length=1};

/********** CLUSTER FLUSHSLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FLUSHSLOTS history */
#define CLUSTER_FLUSHSLOTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FLUSHSLOTS tips */
#define CLUSTER_FLUSHSLOTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FLUSHSLOTS key specs */
#define CLUSTER_FLUSHSLOTS_Keyspecs NULL
#endif

/* CLUSTER_FLUSHSLOTS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_FLUSHSLOTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_FLUSHSLOTS_ReplySchema = {CLUSTER_FLUSHSLOTS_ReplySchema_elements,.length=1};

/********** CLUSTER FORGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER FORGET history */
#define CLUSTER_FORGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER FORGET tips */
#define CLUSTER_FORGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER FORGET key specs */
#define CLUSTER_FORGET_Keyspecs NULL
#endif

/* CLUSTER FORGET argument table */
struct COMMAND_ARG CLUSTER_FORGET_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_FORGET_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_FORGET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_FORGET_ReplySchema = {CLUSTER_FORGET_ReplySchema_elements,.length=1};

/********** CLUSTER GETKEYSINSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER GETKEYSINSLOT history */
#define CLUSTER_GETKEYSINSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER GETKEYSINSLOT tips */
const char *CLUSTER_GETKEYSINSLOT_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER GETKEYSINSLOT key specs */
#define CLUSTER_GETKEYSINSLOT_Keyspecs NULL
#endif

/* CLUSTER GETKEYSINSLOT argument table */
struct COMMAND_ARG CLUSTER_GETKEYSINSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_GETKEYSINSLOT_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_GETKEYSINSLOT_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="key name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_GETKEYSINSLOT_ReplySchema_items = {CLUSTER_GETKEYSINSLOT_ReplySchema_items_elements,.length=2};

/* CLUSTER_GETKEYSINSLOT_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_GETKEYSINSLOT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array with up to count elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_GETKEYSINSLOT_ReplySchema_items},
};

struct jsonObject CLUSTER_GETKEYSINSLOT_ReplySchema = {CLUSTER_GETKEYSINSLOT_ReplySchema_elements,.length=3};

/********** CLUSTER HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER HELP history */
#define CLUSTER_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER HELP tips */
#define CLUSTER_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER HELP key specs */
#define CLUSTER_HELP_Keyspecs NULL
#endif

/* CLUSTER_HELP_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_HELP_ReplySchema_items = {CLUSTER_HELP_ReplySchema_items_elements,.length=1};

/* CLUSTER_HELP_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_HELP_ReplySchema_items},
};

struct jsonObject CLUSTER_HELP_ReplySchema = {CLUSTER_HELP_ReplySchema_elements,.length=3};

/********** CLUSTER INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER INFO history */
#define CLUSTER_INFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER INFO tips */
const char *CLUSTER_INFO_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER INFO key specs */
#define CLUSTER_INFO_Keyspecs NULL
#endif

/* CLUSTER_INFO_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_INFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map between named fields and values in the form of <field>:<value> lines separated by newlines composed by the two bytes CRLF"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_INFO_ReplySchema = {CLUSTER_INFO_ReplySchema_elements,.length=2};

/********** CLUSTER KEYSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER KEYSLOT history */
#define CLUSTER_KEYSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER KEYSLOT tips */
#define CLUSTER_KEYSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER KEYSLOT key specs */
#define CLUSTER_KEYSLOT_Keyspecs NULL
#endif

/* CLUSTER KEYSLOT argument table */
struct COMMAND_ARG CLUSTER_KEYSLOT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_KEYSLOT_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_KEYSLOT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The hash slot number for the specified key"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject CLUSTER_KEYSLOT_ReplySchema = {CLUSTER_KEYSLOT_ReplySchema_elements,.length=3};

/********** CLUSTER LINKS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER LINKS history */
#define CLUSTER_LINKS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER LINKS tips */
const char *CLUSTER_LINKS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER LINKS key specs */
#define CLUSTER_LINKS_Keyspecs NULL
#endif

/* CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="connection initiated from peer"},
{JSON_TYPE_STRING,"const",.value.string="from"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_0 = {CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_0_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="connection initiated to peer"},
{JSON_TYPE_STRING,"const",.value.string="to"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_1 = {CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_1_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf array reply schema */
struct jsonObject *CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf[] = {
&CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_0,
&CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf_1,
};

/* CLUSTER_LINKS_ReplySchema_items_properties_direction reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_direction_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="This link is established by the local node _to_ the peer, or accepted by the local node _from_ the peer."},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_LINKS_ReplySchema_items_properties_direction_oneOf,.length=2}},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_direction = {CLUSTER_LINKS_ReplySchema_items_properties_direction_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_node reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_node_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the node id of the peer"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_node = {CLUSTER_LINKS_ReplySchema_items_properties_node_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_create_time reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_create_time_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="unix time creation time of the link. (In the case of a _to_ link, this is the time when the TCP link is created by the local node, not the time when it is actually established.)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_create_time = {CLUSTER_LINKS_ReplySchema_items_properties_create_time_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_events reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_events_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="events currently registered for the link. r means readable event, w means writable event"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_events = {CLUSTER_LINKS_ReplySchema_items_properties_events_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_allocated reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_allocated_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="allocated size of the link's send buffer, which is used to buffer outgoing messages toward the peer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_allocated = {CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_allocated_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_used reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_used_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="size of the portion of the link's send buffer that is currently holding data(messages)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_used = {CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_used_elements,.length=2};

/* CLUSTER_LINKS_ReplySchema_items_properties reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"direction",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_direction},
{JSON_TYPE_OBJECT,"node",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_node},
{JSON_TYPE_OBJECT,"create-time",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_create_time},
{JSON_TYPE_OBJECT,"events",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_events},
{JSON_TYPE_OBJECT,"send-buffer-allocated",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_allocated},
{JSON_TYPE_OBJECT,"send-buffer-used",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties_send_buffer_used},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items_properties = {CLUSTER_LINKS_ReplySchema_items_properties_elements,.length=6};

/* CLUSTER_LINKS_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLUSTER_LINKS_ReplySchema_items_properties},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
};

struct jsonObject CLUSTER_LINKS_ReplySchema_items = {CLUSTER_LINKS_ReplySchema_items_elements,.length=3};

/* CLUSTER_LINKS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_LINKS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array of cluster links and their attributes"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_LINKS_ReplySchema_items},
};

struct jsonObject CLUSTER_LINKS_ReplySchema = {CLUSTER_LINKS_ReplySchema_elements,.length=3};

/********** CLUSTER MEET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MEET history */
commandHistory CLUSTER_MEET_History[] = {
{"4.0.0","Added the optional `cluster_bus_port` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MEET tips */
#define CLUSTER_MEET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MEET key specs */
#define CLUSTER_MEET_Keyspecs NULL
#endif

/* CLUSTER MEET argument table */
struct COMMAND_ARG CLUSTER_MEET_Args[] = {
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cluster-bus-port",ARG_TYPE_INTEGER,-1,NULL,NULL,"4.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* CLUSTER_MEET_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_MEET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_MEET_ReplySchema = {CLUSTER_MEET_ReplySchema_elements,.length=1};

/********** CLUSTER MYID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MYID history */
#define CLUSTER_MYID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MYID tips */
#define CLUSTER_MYID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MYID key specs */
#define CLUSTER_MYID_Keyspecs NULL
#endif

/* CLUSTER_MYID_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_MYID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the node id"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_MYID_ReplySchema = {CLUSTER_MYID_ReplySchema_elements,.length=2};

/********** CLUSTER MYSHARDID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER MYSHARDID history */
#define CLUSTER_MYSHARDID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER MYSHARDID tips */
const char *CLUSTER_MYSHARDID_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER MYSHARDID key specs */
#define CLUSTER_MYSHARDID_Keyspecs NULL
#endif

/* CLUSTER_MYSHARDID_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_MYSHARDID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the node's shard id"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_MYSHARDID_ReplySchema = {CLUSTER_MYSHARDID_ReplySchema_elements,.length=2};

/********** CLUSTER NODES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER NODES history */
#define CLUSTER_NODES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER NODES tips */
const char *CLUSTER_NODES_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER NODES key specs */
#define CLUSTER_NODES_Keyspecs NULL
#endif

/* CLUSTER_NODES_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_NODES_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the serialized cluster configuration"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_NODES_ReplySchema = {CLUSTER_NODES_ReplySchema_elements,.length=2};

/********** CLUSTER REPLICAS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER REPLICAS history */
#define CLUSTER_REPLICAS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER REPLICAS tips */
const char *CLUSTER_REPLICAS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER REPLICAS key specs */
#define CLUSTER_REPLICAS_Keyspecs NULL
#endif

/* CLUSTER REPLICAS argument table */
struct COMMAND_ARG CLUSTER_REPLICAS_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_REPLICAS_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_REPLICAS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="the serialized cluster configuration"},
};

struct jsonObject CLUSTER_REPLICAS_ReplySchema_items = {CLUSTER_REPLICAS_ReplySchema_items_elements,.length=2};

/* CLUSTER_REPLICAS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_REPLICAS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a list of replica nodes replicating from the specified master node provided in the same format used by CLUSTER NODES"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_REPLICAS_ReplySchema_items},
};

struct jsonObject CLUSTER_REPLICAS_ReplySchema = {CLUSTER_REPLICAS_ReplySchema_elements,.length=3};

/********** CLUSTER REPLICATE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER REPLICATE history */
#define CLUSTER_REPLICATE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER REPLICATE tips */
#define CLUSTER_REPLICATE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER REPLICATE key specs */
#define CLUSTER_REPLICATE_Keyspecs NULL
#endif

/* CLUSTER REPLICATE argument table */
struct COMMAND_ARG CLUSTER_REPLICATE_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_REPLICATE_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_REPLICATE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_REPLICATE_ReplySchema = {CLUSTER_REPLICATE_ReplySchema_elements,.length=1};

/********** CLUSTER RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER RESET history */
#define CLUSTER_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER RESET tips */
#define CLUSTER_RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER RESET key specs */
#define CLUSTER_RESET_Keyspecs NULL
#endif

/* CLUSTER RESET reset_type argument table */
struct COMMAND_ARG CLUSTER_RESET_reset_type_Subargs[] = {
{MAKE_ARG("hard",ARG_TYPE_PURE_TOKEN,-1,"HARD",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("soft",ARG_TYPE_PURE_TOKEN,-1,"SOFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER RESET argument table */
struct COMMAND_ARG CLUSTER_RESET_Args[] = {
{MAKE_ARG("reset-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLUSTER_RESET_reset_type_Subargs},
};

/* CLUSTER_RESET_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_RESET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_RESET_ReplySchema = {CLUSTER_RESET_ReplySchema_elements,.length=1};

/********** CLUSTER SAVECONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SAVECONFIG history */
#define CLUSTER_SAVECONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SAVECONFIG tips */
#define CLUSTER_SAVECONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SAVECONFIG key specs */
#define CLUSTER_SAVECONFIG_Keyspecs NULL
#endif

/* CLUSTER_SAVECONFIG_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SAVECONFIG_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_SAVECONFIG_ReplySchema = {CLUSTER_SAVECONFIG_ReplySchema_elements,.length=1};

/********** CLUSTER SET_CONFIG_EPOCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SET_CONFIG_EPOCH history */
#define CLUSTER_SET_CONFIG_EPOCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SET_CONFIG_EPOCH tips */
#define CLUSTER_SET_CONFIG_EPOCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SET_CONFIG_EPOCH key specs */
#define CLUSTER_SET_CONFIG_EPOCH_Keyspecs NULL
#endif

/* CLUSTER SET_CONFIG_EPOCH argument table */
struct COMMAND_ARG CLUSTER_SET_CONFIG_EPOCH_Args[] = {
{MAKE_ARG("config-epoch",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_SET_CONFIG_EPOCH_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SET_CONFIG_EPOCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_SET_CONFIG_EPOCH_ReplySchema = {CLUSTER_SET_CONFIG_EPOCH_ReplySchema_elements,.length=1};

/********** CLUSTER SETSLOT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SETSLOT history */
#define CLUSTER_SETSLOT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SETSLOT tips */
#define CLUSTER_SETSLOT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SETSLOT key specs */
#define CLUSTER_SETSLOT_Keyspecs NULL
#endif

/* CLUSTER SETSLOT subcommand argument table */
struct COMMAND_ARG CLUSTER_SETSLOT_subcommand_Subargs[] = {
{MAKE_ARG("importing",ARG_TYPE_STRING,-1,"IMPORTING",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("migrating",ARG_TYPE_STRING,-1,"MIGRATING",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("node",ARG_TYPE_STRING,-1,"NODE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="node-id"},
{MAKE_ARG("stable",ARG_TYPE_PURE_TOKEN,-1,"STABLE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER SETSLOT argument table */
struct COMMAND_ARG CLUSTER_SETSLOT_Args[] = {
{MAKE_ARG("slot",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("subcommand",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=CLUSTER_SETSLOT_subcommand_Subargs},
};

/* CLUSTER_SETSLOT_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SETSLOT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLUSTER_SETSLOT_ReplySchema = {CLUSTER_SETSLOT_ReplySchema_elements,.length=1};

/********** CLUSTER SHARDS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SHARDS history */
#define CLUSTER_SHARDS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SHARDS tips */
const char *CLUSTER_SHARDS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SHARDS key specs */
#define CLUSTER_SHARDS_Keyspecs NULL
#endif

/* CLUSTER_SHARDS_ReplySchema_items_properties_slots_items reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_slots_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_slots_items = {CLUSTER_SHARDS_ReplySchema_items_properties_slots_items_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_slots reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_slots_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an even number element array specifying the start and end slot numbers for slot ranges owned by this shard"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_slots_items},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_slots = {CLUSTER_SHARDS_ReplySchema_items_properties_slots_elements,.length=3};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_id reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_id_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_id = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_id_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_port reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_port_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_port = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_port_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_tls_port reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_tls_port_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_tls_port = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_tls_port_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_ip reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_ip_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_ip = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_ip_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_endpoint reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_endpoint_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_endpoint = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_endpoint_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_hostname reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_hostname_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_hostname = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_hostname_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="master"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_0 = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_0_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="replica"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_1 = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_1_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf array reply schema */
struct jsonObject *CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf[] = {
&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_0,
&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf_1,
};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_oneOf,.length=2}},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_replication_offset reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_replication_offset_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_replication_offset = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_replication_offset_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="fail"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_0 = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_0_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="loading"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_1 = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_1_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_2 reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="online"},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_2 = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_2_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf array reply schema */
struct jsonObject *CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf[] = {
&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_0,
&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_1,
&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf_2,
};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_oneOf,.length=3}},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health_elements,.length=1};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"id",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_id},
{JSON_TYPE_OBJECT,"port",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_port},
{JSON_TYPE_OBJECT,"tls-port",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_tls_port},
{JSON_TYPE_OBJECT,"ip",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_ip},
{JSON_TYPE_OBJECT,"endpoint",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_endpoint},
{JSON_TYPE_OBJECT,"hostname",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_hostname},
{JSON_TYPE_OBJECT,"role",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_role},
{JSON_TYPE_OBJECT,"replication-offset",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_replication_offset},
{JSON_TYPE_OBJECT,"health",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_health},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties_elements,.length=9};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_properties},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items_elements,.length=3};

/* CLUSTER_SHARDS_ReplySchema_items_properties_nodes reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_nodes_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="nodes that handle these slot ranges"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes_items},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties_nodes = {CLUSTER_SHARDS_ReplySchema_items_properties_nodes_elements,.length=3};

/* CLUSTER_SHARDS_ReplySchema_items_properties reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"slots",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_slots},
{JSON_TYPE_OBJECT,"nodes",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties_nodes},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items_properties = {CLUSTER_SHARDS_ReplySchema_items_properties_elements,.length=2};

/* CLUSTER_SHARDS_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLUSTER_SHARDS_ReplySchema_items_properties},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema_items = {CLUSTER_SHARDS_ReplySchema_items_elements,.length=3};

/* CLUSTER_SHARDS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SHARDS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a nested list of a map of hash ranges and shard nodes describing individual shards"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_SHARDS_ReplySchema_items},
};

struct jsonObject CLUSTER_SHARDS_ReplySchema = {CLUSTER_SHARDS_ReplySchema_elements,.length=3};

/********** CLUSTER SLAVES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SLAVES history */
#define CLUSTER_SLAVES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SLAVES tips */
const char *CLUSTER_SLAVES_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SLAVES key specs */
#define CLUSTER_SLAVES_Keyspecs NULL
#endif

/* CLUSTER SLAVES argument table */
struct COMMAND_ARG CLUSTER_SLAVES_Args[] = {
{MAKE_ARG("node-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLUSTER_SLAVES_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_SLAVES_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="the serialized cluster configuration"},
};

struct jsonObject CLUSTER_SLAVES_ReplySchema_items = {CLUSTER_SLAVES_ReplySchema_items_elements,.length=2};

/* CLUSTER_SLAVES_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SLAVES_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a list of replica nodes replicating from the specified master node provided in the same format used by CLUSTER NODES"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_SLAVES_ReplySchema_items},
};

struct jsonObject CLUSTER_SLAVES_ReplySchema = {CLUSTER_SLAVES_ReplySchema_elements,.length=3};

/********** CLUSTER SLOTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER SLOTS history */
commandHistory CLUSTER_SLOTS_History[] = {
{"4.0.0","Added node IDs."},
{"7.0.0","Added additional networking metadata field."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER SLOTS tips */
const char *CLUSTER_SLOTS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER SLOTS key specs */
#define CLUSTER_SLOTS_Keyspecs NULL
#endif

/* CLUSTER_SLOTS_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="start slot number"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_0 = {CLUSTER_SLOTS_ReplySchema_items_items_0_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="end slot number"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_1 = {CLUSTER_SLOTS_ReplySchema_items_items_1_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="hostname or ip"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_0 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_0_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="unknown type"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_1 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_1_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf array reply schema */
struct jsonObject *CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf[] = {
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_0,
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf_1,
};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_0 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="endpoint description"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_oneOf,.length=2}},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_0 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_0_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_1 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="port"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_1 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_1_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_2 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="node name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_2 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_2_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_hostname reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_hostname_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_hostname = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_hostname_elements,.length=1};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_ip reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_ip_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_ip = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_ip_elements,.length=1};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_elements[] = {
{JSON_TYPE_OBJECT,"hostname",.value.object=&CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_hostname},
{JSON_TYPE_OBJECT,"ip",.value.object=&CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_ip},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items_3 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="array of node descriptions"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_properties},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2_items_3 = {CLUSTER_SLOTS_ReplySchema_items_items_2_items_3_elements,.length=4};

/* CLUSTER_SLOTS_ReplySchema_items_items_2_items array reply schema */
struct jsonObject *CLUSTER_SLOTS_ReplySchema_items_items_2_items[] = {
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_0,
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_1,
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_2,
&CLUSTER_SLOTS_ReplySchema_items_items_2_items_3,
};

/* CLUSTER_SLOTS_ReplySchema_items_items_2 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_items_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Master node for the slot range"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=CLUSTER_SLOTS_ReplySchema_items_items_2_items,.length=4}},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_items_2 = {CLUSTER_SLOTS_ReplySchema_items_items_2_elements,.length=5};

/* CLUSTER_SLOTS_ReplySchema_items_items array reply schema */
struct jsonObject *CLUSTER_SLOTS_ReplySchema_items_items[] = {
&CLUSTER_SLOTS_ReplySchema_items_items_0,
&CLUSTER_SLOTS_ReplySchema_items_items_1,
&CLUSTER_SLOTS_ReplySchema_items_items_2,
};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_0 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="hostname or ip"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_0 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_0_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_1 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="unknown type"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_1 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_1_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf array reply schema */
struct jsonObject *CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf[] = {
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_0,
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf_1,
};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="endpoint description"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_oneOf,.length=2}},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_1 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="port"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_1 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_1_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_2 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="node name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_2 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_2_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_hostname reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_hostname_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_hostname = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_hostname_elements,.length=1};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_ip reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_ip_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_ip = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_ip_elements,.length=1};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_elements[] = {
{JSON_TYPE_OBJECT,"hostname",.value.object=&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_hostname},
{JSON_TYPE_OBJECT,"ip",.value.object=&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_ip},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties_elements,.length=2};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3 reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="array of node descriptions"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_properties},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3 = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3_elements,.length=4};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems_items array reply schema */
struct jsonObject *CLUSTER_SLOTS_ReplySchema_items_additionalItems_items[] = {
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_0,
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_1,
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_2,
&CLUSTER_SLOTS_ReplySchema_items_additionalItems_items_3,
};

/* CLUSTER_SLOTS_ReplySchema_items_additionalItems reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_additionalItems_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Replica node for the slot range"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=CLUSTER_SLOTS_ReplySchema_items_additionalItems_items,.length=4}},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items_additionalItems = {CLUSTER_SLOTS_ReplySchema_items_additionalItems_elements,.length=5};

/* CLUSTER_SLOTS_ReplySchema_items reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=CLUSTER_SLOTS_ReplySchema_items_items,.length=3}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&CLUSTER_SLOTS_ReplySchema_items_additionalItems},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema_items = {CLUSTER_SLOTS_ReplySchema_items_elements,.length=5};

/* CLUSTER_SLOTS_ReplySchema reply schema */
struct jsonObjectElement CLUSTER_SLOTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="nested list of slot ranges with networking information"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLUSTER_SLOTS_ReplySchema_items},
};

struct jsonObject CLUSTER_SLOTS_ReplySchema = {CLUSTER_SLOTS_ReplySchema_elements,.length=3};

/* CLUSTER command table */
struct COMMAND_STRUCT CLUSTER_Subcommands[] = {
{MAKE_CMD("addslots","Assigns new hash slots to a node.","O(N) where N is the total number of hash slot arguments","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_ADDSLOTS_History,0,CLUSTER_ADDSLOTS_Tips,0,clusterCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_ADDSLOTS_Keyspecs,0,NULL,1),.args=CLUSTER_ADDSLOTS_Args,.reply_schema=&CLUSTER_ADDSLOTS_ReplySchema},
{MAKE_CMD("addslotsrange","Assigns new hash slot ranges to a node.","O(N) where N is the total number of the slots between the start slot and end slot arguments.","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_ADDSLOTSRANGE_History,0,CLUSTER_ADDSLOTSRANGE_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_ADDSLOTSRANGE_Keyspecs,0,NULL,1),.args=CLUSTER_ADDSLOTSRANGE_Args,.reply_schema=&CLUSTER_ADDSLOTSRANGE_ReplySchema},
{MAKE_CMD("bumpepoch","Advances the cluster config epoch.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_BUMPEPOCH_History,0,CLUSTER_BUMPEPOCH_Tips,1,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_BUMPEPOCH_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_BUMPEPOCH_ReplySchema},
{MAKE_CMD("count-failure-reports","Returns the number of active failure reports active for a node.","O(N) where N is the number of failure reports","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_COUNT_FAILURE_REPORTS_History,0,CLUSTER_COUNT_FAILURE_REPORTS_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_COUNT_FAILURE_REPORTS_Keyspecs,0,NULL,1),.args=CLUSTER_COUNT_FAILURE_REPORTS_Args,.reply_schema=&CLUSTER_COUNT_FAILURE_REPORTS_ReplySchema},
{MAKE_CMD("countkeysinslot","Returns the number of keys in a hash slot.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_COUNTKEYSINSLOT_History,0,CLUSTER_COUNTKEYSINSLOT_Tips,0,clusterCommand,3,CMD_STALE,0,CLUSTER_COUNTKEYSINSLOT_Keyspecs,0,NULL,1),.args=CLUSTER_COUNTKEYSINSLOT_Args,.reply_schema=&CLUSTER_COUNTKEYSINSLOT_ReplySchema},
{MAKE_CMD("delslots","Sets hash slots as unbound for a node.","O(N) where N is the total number of hash slot arguments","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_DELSLOTS_History,0,CLUSTER_DELSLOTS_Tips,0,clusterCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_DELSLOTS_Keyspecs,0,NULL,1),.args=CLUSTER_DELSLOTS_Args,.reply_schema=&CLUSTER_DELSLOTS_ReplySchema},
{MAKE_CMD("delslotsrange","Sets hash slot ranges as unbound for a node.","O(N) where N is the total number of the slots between the start slot and end slot arguments.","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_DELSLOTSRANGE_History,0,CLUSTER_DELSLOTSRANGE_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_DELSLOTSRANGE_Keyspecs,0,NULL,1),.args=CLUSTER_DELSLOTSRANGE_Args,.reply_schema=&CLUSTER_DELSLOTSRANGE_ReplySchema},
{MAKE_CMD("failover","Forces a replica to perform a manual failover of its master.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FAILOVER_History,0,CLUSTER_FAILOVER_Tips,0,clusterCommand,-2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FAILOVER_Keyspecs,0,NULL,1),.args=CLUSTER_FAILOVER_Args,.reply_schema=&CLUSTER_FAILOVER_ReplySchema},
{MAKE_CMD("flushslots","Deletes all slots information from a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FLUSHSLOTS_History,0,CLUSTER_FLUSHSLOTS_Tips,0,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FLUSHSLOTS_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_FLUSHSLOTS_ReplySchema},
{MAKE_CMD("forget","Removes a node from the nodes table.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_FORGET_History,0,CLUSTER_FORGET_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_FORGET_Keyspecs,0,NULL,1),.args=CLUSTER_FORGET_Args,.reply_schema=&CLUSTER_FORGET_ReplySchema},
{MAKE_CMD("getkeysinslot","Returns the key names in a hash slot.","O(N) where N is the number of requested keys","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_GETKEYSINSLOT_History,0,CLUSTER_GETKEYSINSLOT_Tips,1,clusterCommand,4,CMD_STALE,0,CLUSTER_GETKEYSINSLOT_Keyspecs,0,NULL,2),.args=CLUSTER_GETKEYSINSLOT_Args,.reply_schema=&CLUSTER_GETKEYSINSLOT_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_HELP_History,0,CLUSTER_HELP_Tips,0,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_HELP_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_HELP_ReplySchema},
{MAKE_CMD("info","Returns information about the state of a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_INFO_History,0,CLUSTER_INFO_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_INFO_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_INFO_ReplySchema},
{MAKE_CMD("keyslot","Returns the hash slot for a key.","O(N) where N is the number of bytes in the key","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_KEYSLOT_History,0,CLUSTER_KEYSLOT_Tips,0,clusterCommand,3,CMD_STALE,0,CLUSTER_KEYSLOT_Keyspecs,0,NULL,1),.args=CLUSTER_KEYSLOT_Args,.reply_schema=&CLUSTER_KEYSLOT_ReplySchema},
{MAKE_CMD("links","Returns a list of all TCP links to and from peer nodes.","O(N) where N is the total number of Cluster nodes","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_LINKS_History,0,CLUSTER_LINKS_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_LINKS_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_LINKS_ReplySchema},
{MAKE_CMD("meet","Forces a node to handshake with another node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MEET_History,1,CLUSTER_MEET_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_MEET_Keyspecs,0,NULL,3),.args=CLUSTER_MEET_Args,.reply_schema=&CLUSTER_MEET_ReplySchema},
{MAKE_CMD("myid","Returns the ID of a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MYID_History,0,CLUSTER_MYID_Tips,0,clusterCommand,2,CMD_STALE,0,CLUSTER_MYID_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_MYID_ReplySchema},
{MAKE_CMD("myshardid","Returns the shard ID of a node.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_MYSHARDID_History,0,CLUSTER_MYSHARDID_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_MYSHARDID_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_MYSHARDID_ReplySchema},
{MAKE_CMD("nodes","Returns the cluster configuration for a node.","O(N) where N is the total number of Cluster nodes","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_NODES_History,0,CLUSTER_NODES_Tips,1,clusterCommand,2,CMD_STALE,0,CLUSTER_NODES_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_NODES_ReplySchema},
{MAKE_CMD("replicas","Lists the replica nodes of a master node.","O(N) where N is the number of replicas.","5.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_REPLICAS_History,0,CLUSTER_REPLICAS_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_REPLICAS_Keyspecs,0,NULL,1),.args=CLUSTER_REPLICAS_Args,.reply_schema=&CLUSTER_REPLICAS_ReplySchema},
{MAKE_CMD("replicate","Configure a node as replica of a master node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_REPLICATE_History,0,CLUSTER_REPLICATE_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_REPLICATE_Keyspecs,0,NULL,1),.args=CLUSTER_REPLICATE_Args,.reply_schema=&CLUSTER_REPLICATE_ReplySchema},
{MAKE_CMD("reset","Resets a node.","O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_RESET_History,0,CLUSTER_RESET_Tips,0,clusterCommand,-2,CMD_ADMIN|CMD_STALE|CMD_NOSCRIPT,0,CLUSTER_RESET_Keyspecs,0,NULL,1),.args=CLUSTER_RESET_Args,.reply_schema=&CLUSTER_RESET_ReplySchema},
{MAKE_CMD("saveconfig","Forces a node to save the cluster configuration to disk.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SAVECONFIG_History,0,CLUSTER_SAVECONFIG_Tips,0,clusterCommand,2,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SAVECONFIG_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_SAVECONFIG_ReplySchema},
{MAKE_CMD("set-config-epoch","Sets the configuration epoch for a new node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SET_CONFIG_EPOCH_History,0,CLUSTER_SET_CONFIG_EPOCH_Tips,0,clusterCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SET_CONFIG_EPOCH_Keyspecs,0,NULL,1),.args=CLUSTER_SET_CONFIG_EPOCH_Args,.reply_schema=&CLUSTER_SET_CONFIG_EPOCH_ReplySchema},
{MAKE_CMD("setslot","Binds a hash slot to a node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SETSLOT_History,0,CLUSTER_SETSLOT_Tips,0,clusterCommand,-4,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_STALE,0,CLUSTER_SETSLOT_Keyspecs,0,NULL,2),.args=CLUSTER_SETSLOT_Args,.reply_schema=&CLUSTER_SETSLOT_ReplySchema},
{MAKE_CMD("shards","Returns the mapping of cluster slots to shards.","O(N) where N is the total number of cluster nodes","7.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SHARDS_History,0,CLUSTER_SHARDS_Tips,1,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_SHARDS_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_SHARDS_ReplySchema},
{MAKE_CMD("slaves","Lists the replica nodes of a master node.","O(N) where N is the number of replicas.","3.0.0",CMD_DOC_DEPRECATED,"`CLUSTER REPLICAS`","5.0.0","cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SLAVES_History,0,CLUSTER_SLAVES_Tips,1,clusterCommand,3,CMD_ADMIN|CMD_STALE,0,CLUSTER_SLAVES_Keyspecs,0,NULL,1),.args=CLUSTER_SLAVES_Args,.reply_schema=&CLUSTER_SLAVES_ReplySchema},
{MAKE_CMD("slots","Returns the mapping of cluster slots to nodes.","O(N) where N is the total number of Cluster nodes","3.0.0",CMD_DOC_DEPRECATED,"`CLUSTER SHARDS`","7.0.0","cluster",COMMAND_GROUP_CLUSTER,CLUSTER_SLOTS_History,2,CLUSTER_SLOTS_Tips,1,clusterCommand,2,CMD_LOADING|CMD_STALE,0,CLUSTER_SLOTS_Keyspecs,0,NULL,0),.reply_schema=&CLUSTER_SLOTS_ReplySchema},
{0}
};

/********** CLUSTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLUSTER history */
#define CLUSTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLUSTER tips */
#define CLUSTER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLUSTER key specs */
#define CLUSTER_Keyspecs NULL
#endif

/********** READONLY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* READONLY history */
#define READONLY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* READONLY tips */
#define READONLY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* READONLY key specs */
#define READONLY_Keyspecs NULL
#endif

/* READONLY_ReplySchema reply schema */
struct jsonObjectElement READONLY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject READONLY_ReplySchema = {READONLY_ReplySchema_elements,.length=1};

/********** READWRITE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* READWRITE history */
#define READWRITE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* READWRITE tips */
#define READWRITE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* READWRITE key specs */
#define READWRITE_Keyspecs NULL
#endif

/* READWRITE_ReplySchema reply schema */
struct jsonObjectElement READWRITE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject READWRITE_ReplySchema = {READWRITE_ReplySchema_elements,.length=1};

/********** AUTH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* AUTH history */
commandHistory AUTH_History[] = {
{"6.0.0","Added ACL style (username and password)."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* AUTH tips */
#define AUTH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* AUTH key specs */
#define AUTH_Keyspecs NULL
#endif

/* AUTH argument table */
struct COMMAND_ARG AUTH_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,"6.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* AUTH_ReplySchema reply schema */
struct jsonObjectElement AUTH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject AUTH_ReplySchema = {AUTH_ReplySchema_elements,.length=1};

/********** CLIENT CACHING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT CACHING history */
#define CLIENT_CACHING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT CACHING tips */
#define CLIENT_CACHING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT CACHING key specs */
#define CLIENT_CACHING_Keyspecs NULL
#endif

/* CLIENT CACHING mode argument table */
struct COMMAND_ARG CLIENT_CACHING_mode_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT CACHING argument table */
struct COMMAND_ARG CLIENT_CACHING_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_CACHING_mode_Subargs},
};

/* CLIENT_CACHING_ReplySchema reply schema */
struct jsonObjectElement CLIENT_CACHING_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_CACHING_ReplySchema = {CLIENT_CACHING_ReplySchema_elements,.length=1};

/********** CLIENT GETNAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT GETNAME history */
#define CLIENT_GETNAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT GETNAME tips */
#define CLIENT_GETNAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT GETNAME key specs */
#define CLIENT_GETNAME_Keyspecs NULL
#endif

/* CLIENT_GETNAME_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement CLIENT_GETNAME_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The connection name of the current connection"},
};

struct jsonObject CLIENT_GETNAME_ReplySchema_oneOf_0 = {CLIENT_GETNAME_ReplySchema_oneOf_0_elements,.length=2};

/* CLIENT_GETNAME_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement CLIENT_GETNAME_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Connection name was not set"},
};

struct jsonObject CLIENT_GETNAME_ReplySchema_oneOf_1 = {CLIENT_GETNAME_ReplySchema_oneOf_1_elements,.length=2};

/* CLIENT_GETNAME_ReplySchema_oneOf array reply schema */
struct jsonObject *CLIENT_GETNAME_ReplySchema_oneOf[] = {
&CLIENT_GETNAME_ReplySchema_oneOf_0,
&CLIENT_GETNAME_ReplySchema_oneOf_1,
};

/* CLIENT_GETNAME_ReplySchema reply schema */
struct jsonObjectElement CLIENT_GETNAME_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLIENT_GETNAME_ReplySchema_oneOf,.length=2}},
};

struct jsonObject CLIENT_GETNAME_ReplySchema = {CLIENT_GETNAME_ReplySchema_elements,.length=1};

/********** CLIENT GETREDIR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT GETREDIR history */
#define CLIENT_GETREDIR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT GETREDIR tips */
#define CLIENT_GETREDIR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT GETREDIR key specs */
#define CLIENT_GETREDIR_Keyspecs NULL
#endif

/* CLIENT_GETREDIR_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement CLIENT_GETREDIR_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="Not redirecting notifications to any client."},
};

struct jsonObject CLIENT_GETREDIR_ReplySchema_oneOf_0 = {CLIENT_GETREDIR_ReplySchema_oneOf_0_elements,.length=2};

/* CLIENT_GETREDIR_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement CLIENT_GETREDIR_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
{JSON_TYPE_STRING,"description",.value.string="Client tracking is not enabled."},
};

struct jsonObject CLIENT_GETREDIR_ReplySchema_oneOf_1 = {CLIENT_GETREDIR_ReplySchema_oneOf_1_elements,.length=2};

/* CLIENT_GETREDIR_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement CLIENT_GETREDIR_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="ID of the client we are redirecting the notifications to."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject CLIENT_GETREDIR_ReplySchema_oneOf_2 = {CLIENT_GETREDIR_ReplySchema_oneOf_2_elements,.length=3};

/* CLIENT_GETREDIR_ReplySchema_oneOf array reply schema */
struct jsonObject *CLIENT_GETREDIR_ReplySchema_oneOf[] = {
&CLIENT_GETREDIR_ReplySchema_oneOf_0,
&CLIENT_GETREDIR_ReplySchema_oneOf_1,
&CLIENT_GETREDIR_ReplySchema_oneOf_2,
};

/* CLIENT_GETREDIR_ReplySchema reply schema */
struct jsonObjectElement CLIENT_GETREDIR_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLIENT_GETREDIR_ReplySchema_oneOf,.length=3}},
};

struct jsonObject CLIENT_GETREDIR_ReplySchema = {CLIENT_GETREDIR_ReplySchema_elements,.length=1};

/********** CLIENT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT HELP history */
#define CLIENT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT HELP tips */
#define CLIENT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT HELP key specs */
#define CLIENT_HELP_Keyspecs NULL
#endif

/* CLIENT_HELP_ReplySchema_items reply schema */
struct jsonObjectElement CLIENT_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLIENT_HELP_ReplySchema_items = {CLIENT_HELP_ReplySchema_items_elements,.length=1};

/* CLIENT_HELP_ReplySchema reply schema */
struct jsonObjectElement CLIENT_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&CLIENT_HELP_ReplySchema_items},
};

struct jsonObject CLIENT_HELP_ReplySchema = {CLIENT_HELP_ReplySchema_elements,.length=3};

/********** CLIENT ID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT ID history */
#define CLIENT_ID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT ID tips */
#define CLIENT_ID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT ID key specs */
#define CLIENT_ID_Keyspecs NULL
#endif

/* CLIENT_ID_ReplySchema reply schema */
struct jsonObjectElement CLIENT_ID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The id of the client"},
};

struct jsonObject CLIENT_ID_ReplySchema = {CLIENT_ID_ReplySchema_elements,.length=2};

/********** CLIENT INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT INFO history */
#define CLIENT_INFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT INFO tips */
const char *CLIENT_INFO_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT INFO key specs */
#define CLIENT_INFO_Keyspecs NULL
#endif

/* CLIENT_INFO_ReplySchema reply schema */
struct jsonObjectElement CLIENT_INFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a unique string, as described at the CLIENT LIST page, for the current client"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLIENT_INFO_ReplySchema = {CLIENT_INFO_ReplySchema_elements,.length=2};

/********** CLIENT KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT KILL history */
commandHistory CLIENT_KILL_History[] = {
{"2.8.12","Added new filter format."},
{"2.8.12","`ID` option."},
{"3.2.0","Added `master` type in for `TYPE` option."},
{"5.0.0","Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility."},
{"6.2.0","`LADDR` option."},
{"8.0.0","`MAXAGE` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT KILL tips */
#define CLIENT_KILL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT KILL key specs */
#define CLIENT_KILL_Keyspecs NULL
#endif

/* CLIENT KILL filter new_format client_type argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_client_type_Subargs[] = {
{MAKE_ARG("normal",ARG_TYPE_PURE_TOKEN,-1,"NORMAL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("master",ARG_TYPE_PURE_TOKEN,-1,"MASTER",NULL,"3.2.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("slave",ARG_TYPE_PURE_TOKEN,-1,"SLAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replica",ARG_TYPE_PURE_TOKEN,-1,"REPLICA",NULL,"5.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pubsub",ARG_TYPE_PURE_TOKEN,-1,"PUBSUB",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT KILL filter new_format skipme argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_skipme_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT KILL filter new_format argument table */
struct COMMAND_ARG CLIENT_KILL_filter_new_format_Subargs[] = {
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"ID",NULL,"2.8.12",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("client-type",ARG_TYPE_ONEOF,-1,"TYPE",NULL,"2.8.12",CMD_ARG_OPTIONAL,5,NULL),.subargs=CLIENT_KILL_filter_new_format_client_type_Subargs},
{MAKE_ARG("username",ARG_TYPE_STRING,-1,"USER",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("addr",ARG_TYPE_STRING,-1,"ADDR",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="ip:port"},
{MAKE_ARG("laddr",ARG_TYPE_STRING,-1,"LADDR",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL),.display_text="ip:port"},
{MAKE_ARG("skipme",ARG_TYPE_ONEOF,-1,"SKIPME",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_KILL_filter_new_format_skipme_Subargs},
{MAKE_ARG("maxage",ARG_TYPE_INTEGER,-1,"MAXAGE",NULL,"8.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* CLIENT KILL filter argument table */
struct COMMAND_ARG CLIENT_KILL_filter_Subargs[] = {
{MAKE_ARG("old-format",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,"2.8.12"),.display_text="ip:port"},
{MAKE_ARG("new-format",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,7,NULL),.subargs=CLIENT_KILL_filter_new_format_Subargs},
};

/* CLIENT KILL argument table */
struct COMMAND_ARG CLIENT_KILL_Args[] = {
{MAKE_ARG("filter",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_KILL_filter_Subargs},
};

/* CLIENT_KILL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement CLIENT_KILL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when called in 3 argument format"},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_KILL_ReplySchema_oneOf_0 = {CLIENT_KILL_ReplySchema_oneOf_0_elements,.length=2};

/* CLIENT_KILL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement CLIENT_KILL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when called in filter/value format, the number of clients killed"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject CLIENT_KILL_ReplySchema_oneOf_1 = {CLIENT_KILL_ReplySchema_oneOf_1_elements,.length=3};

/* CLIENT_KILL_ReplySchema_oneOf array reply schema */
struct jsonObject *CLIENT_KILL_ReplySchema_oneOf[] = {
&CLIENT_KILL_ReplySchema_oneOf_0,
&CLIENT_KILL_ReplySchema_oneOf_1,
};

/* CLIENT_KILL_ReplySchema reply schema */
struct jsonObjectElement CLIENT_KILL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLIENT_KILL_ReplySchema_oneOf,.length=2}},
};

struct jsonObject CLIENT_KILL_ReplySchema = {CLIENT_KILL_ReplySchema_elements,.length=1};

/********** CLIENT LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT LIST history */
commandHistory CLIENT_LIST_History[] = {
{"2.8.12","Added unique client `id` field."},
{"5.0.0","Added optional `TYPE` filter."},
{"6.0.0","Added `user` field."},
{"6.2.0","Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter."},
{"7.0.0","Added `resp`, `multi-mem`, `rbs` and `rbp` fields."},
{"7.0.3","Added `ssub` field."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT LIST tips */
const char *CLIENT_LIST_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT LIST key specs */
#define CLIENT_LIST_Keyspecs NULL
#endif

/* CLIENT LIST client_type argument table */
struct COMMAND_ARG CLIENT_LIST_client_type_Subargs[] = {
{MAKE_ARG("normal",ARG_TYPE_PURE_TOKEN,-1,"NORMAL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("master",ARG_TYPE_PURE_TOKEN,-1,"MASTER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replica",ARG_TYPE_PURE_TOKEN,-1,"REPLICA",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pubsub",ARG_TYPE_PURE_TOKEN,-1,"PUBSUB",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT LIST argument table */
struct COMMAND_ARG CLIENT_LIST_Args[] = {
{MAKE_ARG("client-type",ARG_TYPE_ONEOF,-1,"TYPE",NULL,"5.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=CLIENT_LIST_client_type_Subargs},
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"ID",NULL,"6.2.0",CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* CLIENT_LIST_ReplySchema reply schema */
struct jsonObjectElement CLIENT_LIST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Information and statistics about client connections"},
};

struct jsonObject CLIENT_LIST_ReplySchema = {CLIENT_LIST_ReplySchema_elements,.length=2};

/********** CLIENT NO_EVICT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT NO_EVICT history */
#define CLIENT_NO_EVICT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT NO_EVICT tips */
#define CLIENT_NO_EVICT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT NO_EVICT key specs */
#define CLIENT_NO_EVICT_Keyspecs NULL
#endif

/* CLIENT NO_EVICT enabled argument table */
struct COMMAND_ARG CLIENT_NO_EVICT_enabled_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT NO_EVICT argument table */
struct COMMAND_ARG CLIENT_NO_EVICT_Args[] = {
{MAKE_ARG("enabled",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_NO_EVICT_enabled_Subargs},
};

/* CLIENT_NO_EVICT_ReplySchema reply schema */
struct jsonObjectElement CLIENT_NO_EVICT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_NO_EVICT_ReplySchema = {CLIENT_NO_EVICT_ReplySchema_elements,.length=1};

/********** CLIENT NO_TOUCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT NO_TOUCH history */
#define CLIENT_NO_TOUCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT NO_TOUCH tips */
#define CLIENT_NO_TOUCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT NO_TOUCH key specs */
#define CLIENT_NO_TOUCH_Keyspecs NULL
#endif

/* CLIENT NO_TOUCH enabled argument table */
struct COMMAND_ARG CLIENT_NO_TOUCH_enabled_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT NO_TOUCH argument table */
struct COMMAND_ARG CLIENT_NO_TOUCH_Args[] = {
{MAKE_ARG("enabled",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_NO_TOUCH_enabled_Subargs},
};

/* CLIENT_NO_TOUCH_ReplySchema reply schema */
struct jsonObjectElement CLIENT_NO_TOUCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_NO_TOUCH_ReplySchema = {CLIENT_NO_TOUCH_ReplySchema_elements,.length=1};

/********** CLIENT PAUSE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT PAUSE history */
commandHistory CLIENT_PAUSE_History[] = {
{"6.2.0","`CLIENT PAUSE WRITE` mode added along with the `mode` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT PAUSE tips */
#define CLIENT_PAUSE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT PAUSE key specs */
#define CLIENT_PAUSE_Keyspecs NULL
#endif

/* CLIENT PAUSE mode argument table */
struct COMMAND_ARG CLIENT_PAUSE_mode_Subargs[] = {
{MAKE_ARG("write",ARG_TYPE_PURE_TOKEN,-1,"WRITE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("all",ARG_TYPE_PURE_TOKEN,-1,"ALL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT PAUSE argument table */
struct COMMAND_ARG CLIENT_PAUSE_Args[] = {
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_PAUSE_mode_Subargs},
};

/* CLIENT_PAUSE_ReplySchema reply schema */
struct jsonObjectElement CLIENT_PAUSE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_PAUSE_ReplySchema = {CLIENT_PAUSE_ReplySchema_elements,.length=1};

/********** CLIENT REPLY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT REPLY history */
#define CLIENT_REPLY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT REPLY tips */
#define CLIENT_REPLY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT REPLY key specs */
#define CLIENT_REPLY_Keyspecs NULL
#endif

/* CLIENT REPLY action argument table */
struct COMMAND_ARG CLIENT_REPLY_action_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("skip",ARG_TYPE_PURE_TOKEN,-1,"SKIP",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT REPLY argument table */
struct COMMAND_ARG CLIENT_REPLY_Args[] = {
{MAKE_ARG("action",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=CLIENT_REPLY_action_Subargs},
};

/* CLIENT_REPLY_ReplySchema reply schema */
struct jsonObjectElement CLIENT_REPLY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="When called with either OFF or SKIP subcommands, no reply is made. When called with ON, reply is OK."},
};

struct jsonObject CLIENT_REPLY_ReplySchema = {CLIENT_REPLY_ReplySchema_elements,.length=2};

/********** CLIENT SETINFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT SETINFO history */
#define CLIENT_SETINFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT SETINFO tips */
const char *CLIENT_SETINFO_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT SETINFO key specs */
#define CLIENT_SETINFO_Keyspecs NULL
#endif

/* CLIENT SETINFO attr argument table */
struct COMMAND_ARG CLIENT_SETINFO_attr_Subargs[] = {
{MAKE_ARG("libname",ARG_TYPE_STRING,-1,"LIB-NAME",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("libver",ARG_TYPE_STRING,-1,"LIB-VER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT SETINFO argument table */
struct COMMAND_ARG CLIENT_SETINFO_Args[] = {
{MAKE_ARG("attr",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_SETINFO_attr_Subargs},
};

/* CLIENT_SETINFO_ReplySchema reply schema */
struct jsonObjectElement CLIENT_SETINFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_SETINFO_ReplySchema = {CLIENT_SETINFO_ReplySchema_elements,.length=1};

/********** CLIENT SETNAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT SETNAME history */
#define CLIENT_SETNAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT SETNAME tips */
const char *CLIENT_SETNAME_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT SETNAME key specs */
#define CLIENT_SETNAME_Keyspecs NULL
#endif

/* CLIENT SETNAME argument table */
struct COMMAND_ARG CLIENT_SETNAME_Args[] = {
{MAKE_ARG("connection-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT_SETNAME_ReplySchema reply schema */
struct jsonObjectElement CLIENT_SETNAME_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_SETNAME_ReplySchema = {CLIENT_SETNAME_ReplySchema_elements,.length=1};

/********** CLIENT TRACKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT TRACKING history */
#define CLIENT_TRACKING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT TRACKING tips */
#define CLIENT_TRACKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT TRACKING key specs */
#define CLIENT_TRACKING_Keyspecs NULL
#endif

/* CLIENT TRACKING status argument table */
struct COMMAND_ARG CLIENT_TRACKING_status_Subargs[] = {
{MAKE_ARG("on",ARG_TYPE_PURE_TOKEN,-1,"ON",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("off",ARG_TYPE_PURE_TOKEN,-1,"OFF",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT TRACKING argument table */
struct COMMAND_ARG CLIENT_TRACKING_Args[] = {
{MAKE_ARG("status",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=CLIENT_TRACKING_status_Subargs},
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,"REDIRECT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("prefix",ARG_TYPE_STRING,-1,"PREFIX",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL)},
{MAKE_ARG("bcast",ARG_TYPE_PURE_TOKEN,-1,"BCAST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("optin",ARG_TYPE_PURE_TOKEN,-1,"OPTIN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("optout",ARG_TYPE_PURE_TOKEN,-1,"OPTOUT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("noloop",ARG_TYPE_PURE_TOKEN,-1,"NOLOOP",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* CLIENT_TRACKING_ReplySchema reply schema */
struct jsonObjectElement CLIENT_TRACKING_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="if the client was successfully put into or taken out of tracking mode"},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_TRACKING_ReplySchema = {CLIENT_TRACKING_ReplySchema_elements,.length=2};

/********** CLIENT TRACKINGINFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT TRACKINGINFO history */
#define CLIENT_TRACKINGINFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT TRACKINGINFO tips */
#define CLIENT_TRACKINGINFO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT TRACKINGINFO key specs */
#define CLIENT_TRACKINGINFO_Keyspecs NULL
#endif

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_0 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="off"},
{JSON_TYPE_STRING,"description",.value.string="The connection isn't using server assisted client side caching."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_0 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_0_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_1 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="on"},
{JSON_TYPE_STRING,"description",.value.string="Server assisted client side caching is enabled for the connection."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_1 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_1_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_2 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="bcast"},
{JSON_TYPE_STRING,"description",.value.string="The client uses broadcasting mode."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_2 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_2_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_3 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="optin"},
{JSON_TYPE_STRING,"description",.value.string="The client does not cache keys by default."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_3 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_3_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_4 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_4_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="optout"},
{JSON_TYPE_STRING,"description",.value.string="The client caches keys by default."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_4 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_4_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_5 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_5_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="caching-yes"},
{JSON_TYPE_STRING,"description",.value.string="The next command will cache keys (exists only together with optin)."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_5 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_5_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_6 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_6_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="caching-no"},
{JSON_TYPE_STRING,"description",.value.string="The next command won't cache keys (exists only together with optout)."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_6 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_6_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_7 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_7_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="noloop"},
{JSON_TYPE_STRING,"description",.value.string="The client isn't notified about keys modified by itself."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_7 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_7_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_8 reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_8_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="broken_redirect"},
{JSON_TYPE_STRING,"description",.value.string="The client ID used for redirection isn't valid anymore."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_8 = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_8_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf array reply schema */
struct jsonObject *CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf[] = {
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_0,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_1,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_2,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_3,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_4,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_5,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_6,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_7,
&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf_8,
};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_oneOf,.length=9}},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items_elements,.length=1};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_flags reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_flags_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties_flags_items},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_flags = {CLIENT_TRACKINGINFO_ReplySchema_properties_flags_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_redirect reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_redirect_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The client ID used for notifications redirection, or -1 when none."},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_redirect = {CLIENT_TRACKINGINFO_ReplySchema_properties_redirect_elements,.length=2};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_items reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_items = {CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_items_elements,.length=1};

/* CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of key prefixes for which notifications are sent to the client."},
{JSON_TYPE_OBJECT,"items",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_items},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes = {CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes_elements,.length=3};

/* CLIENT_TRACKINGINFO_ReplySchema_properties reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_properties_elements[] = {
{JSON_TYPE_OBJECT,"flags",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties_flags},
{JSON_TYPE_OBJECT,"redirect",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties_redirect},
{JSON_TYPE_OBJECT,"prefixes",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties_prefixes},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema_properties = {CLIENT_TRACKINGINFO_ReplySchema_properties_elements,.length=3};

/* CLIENT_TRACKINGINFO_ReplySchema reply schema */
struct jsonObjectElement CLIENT_TRACKINGINFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&CLIENT_TRACKINGINFO_ReplySchema_properties},
};

struct jsonObject CLIENT_TRACKINGINFO_ReplySchema = {CLIENT_TRACKINGINFO_ReplySchema_elements,.length=3};

/********** CLIENT UNBLOCK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT UNBLOCK history */
#define CLIENT_UNBLOCK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT UNBLOCK tips */
#define CLIENT_UNBLOCK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT UNBLOCK key specs */
#define CLIENT_UNBLOCK_Keyspecs NULL
#endif

/* CLIENT UNBLOCK unblock_type argument table */
struct COMMAND_ARG CLIENT_UNBLOCK_unblock_type_Subargs[] = {
{MAKE_ARG("timeout",ARG_TYPE_PURE_TOKEN,-1,"TIMEOUT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("error",ARG_TYPE_PURE_TOKEN,-1,"ERROR",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CLIENT UNBLOCK argument table */
struct COMMAND_ARG CLIENT_UNBLOCK_Args[] = {
{MAKE_ARG("client-id",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unblock-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=CLIENT_UNBLOCK_unblock_type_Subargs},
};

/* CLIENT_UNBLOCK_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement CLIENT_UNBLOCK_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="if the client was unblocked successfully"},
};

struct jsonObject CLIENT_UNBLOCK_ReplySchema_oneOf_0 = {CLIENT_UNBLOCK_ReplySchema_oneOf_0_elements,.length=2};

/* CLIENT_UNBLOCK_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement CLIENT_UNBLOCK_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="if the client wasn't unblocked"},
};

struct jsonObject CLIENT_UNBLOCK_ReplySchema_oneOf_1 = {CLIENT_UNBLOCK_ReplySchema_oneOf_1_elements,.length=2};

/* CLIENT_UNBLOCK_ReplySchema_oneOf array reply schema */
struct jsonObject *CLIENT_UNBLOCK_ReplySchema_oneOf[] = {
&CLIENT_UNBLOCK_ReplySchema_oneOf_0,
&CLIENT_UNBLOCK_ReplySchema_oneOf_1,
};

/* CLIENT_UNBLOCK_ReplySchema reply schema */
struct jsonObjectElement CLIENT_UNBLOCK_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=CLIENT_UNBLOCK_ReplySchema_oneOf,.length=2}},
};

struct jsonObject CLIENT_UNBLOCK_ReplySchema = {CLIENT_UNBLOCK_ReplySchema_elements,.length=1};

/********** CLIENT UNPAUSE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT UNPAUSE history */
#define CLIENT_UNPAUSE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT UNPAUSE tips */
#define CLIENT_UNPAUSE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT UNPAUSE key specs */
#define CLIENT_UNPAUSE_Keyspecs NULL
#endif

/* CLIENT_UNPAUSE_ReplySchema reply schema */
struct jsonObjectElement CLIENT_UNPAUSE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CLIENT_UNPAUSE_ReplySchema = {CLIENT_UNPAUSE_ReplySchema_elements,.length=1};

/* CLIENT command table */
struct COMMAND_STRUCT CLIENT_Subcommands[] = {
{MAKE_CMD("caching","Instructs the server whether to track the keys in the next request.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_CACHING_History,0,CLIENT_CACHING_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_CACHING_Keyspecs,0,NULL,1),.args=CLIENT_CACHING_Args,.reply_schema=&CLIENT_CACHING_ReplySchema},
{MAKE_CMD("getname","Returns the name of the connection.","O(1)","2.6.9",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_GETNAME_History,0,CLIENT_GETNAME_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_GETNAME_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_GETNAME_ReplySchema},
{MAKE_CMD("getredir","Returns the client ID to which the connection's tracking notifications are redirected.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_GETREDIR_History,0,CLIENT_GETREDIR_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_GETREDIR_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_GETREDIR_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_HELP_History,0,CLIENT_HELP_Tips,0,clientCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_HELP_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_HELP_ReplySchema},
{MAKE_CMD("id","Returns the unique client ID of the connection.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_ID_History,0,CLIENT_ID_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_ID_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_ID_ReplySchema},
{MAKE_CMD("info","Returns information about the connection.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_INFO_History,0,CLIENT_INFO_Tips,1,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_INFO_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_INFO_ReplySchema},
{MAKE_CMD("kill","Terminates open connections.","O(N) where N is the number of client connections","2.4.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_KILL_History,6,CLIENT_KILL_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_KILL_Keyspecs,0,NULL,1),.args=CLIENT_KILL_Args,.reply_schema=&CLIENT_KILL_ReplySchema},
{MAKE_CMD("list","Lists open connections.","O(N) where N is the number of client connections","2.4.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_LIST_History,6,CLIENT_LIST_Tips,1,clientCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_LIST_Keyspecs,0,NULL,2),.args=CLIENT_LIST_Args,.reply_schema=&CLIENT_LIST_ReplySchema},
{MAKE_CMD("no-evict","Sets the client eviction mode of the connection.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_NO_EVICT_History,0,CLIENT_NO_EVICT_Tips,0,clientCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_NO_EVICT_Keyspecs,0,NULL,1),.args=CLIENT_NO_EVICT_Args,.reply_schema=&CLIENT_NO_EVICT_ReplySchema},
{MAKE_CMD("no-touch","Controls whether commands sent by the client affect the LRU/LFU of accessed keys.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_NO_TOUCH_History,0,CLIENT_NO_TOUCH_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,ACL_CATEGORY_CONNECTION,CLIENT_NO_TOUCH_Keyspecs,0,NULL,1),.args=CLIENT_NO_TOUCH_Args,.reply_schema=&CLIENT_NO_TOUCH_ReplySchema},
{MAKE_CMD("pause","Suspends commands processing.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_PAUSE_History,1,CLIENT_PAUSE_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_PAUSE_Keyspecs,0,NULL,2),.args=CLIENT_PAUSE_Args,.reply_schema=&CLIENT_PAUSE_ReplySchema},
{MAKE_CMD("reply","Instructs the server whether to reply to commands.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_REPLY_History,0,CLIENT_REPLY_Tips,0,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_REPLY_Keyspecs,0,NULL,1),.args=CLIENT_REPLY_Args,.reply_schema=&CLIENT_REPLY_ReplySchema},
{MAKE_CMD("setinfo","Sets information specific to the client or connection.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_SETINFO_History,0,CLIENT_SETINFO_Tips,2,clientSetinfoCommand,4,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_SETINFO_Keyspecs,0,NULL,1),.args=CLIENT_SETINFO_Args,.reply_schema=&CLIENT_SETINFO_ReplySchema},
{MAKE_CMD("setname","Sets the connection name.","O(1)","2.6.9",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_SETNAME_History,0,CLIENT_SETNAME_Tips,2,clientCommand,3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_SETNAME_Keyspecs,0,NULL,1),.args=CLIENT_SETNAME_Args,.reply_schema=&CLIENT_SETNAME_ReplySchema},
{MAKE_CMD("tracking","Controls server-assisted client-side caching for the connection.","O(1). Some options may introduce additional complexity.","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_TRACKING_History,0,CLIENT_TRACKING_Tips,0,clientCommand,-3,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_TRACKING_Keyspecs,0,NULL,7),.args=CLIENT_TRACKING_Args,.reply_schema=&CLIENT_TRACKING_ReplySchema},
{MAKE_CMD("trackinginfo","Returns information about server-assisted client-side caching for the connection.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_TRACKINGINFO_History,0,CLIENT_TRACKINGINFO_Tips,0,clientCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_TRACKINGINFO_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_TRACKINGINFO_ReplySchema},
{MAKE_CMD("unblock","Unblocks a client blocked by a blocking command from a different connection.","O(log N) where N is the number of client connections","5.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_UNBLOCK_History,0,CLIENT_UNBLOCK_Tips,0,clientCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_UNBLOCK_Keyspecs,0,NULL,2),.args=CLIENT_UNBLOCK_Args,.reply_schema=&CLIENT_UNBLOCK_ReplySchema},
{MAKE_CMD("unpause","Resumes processing commands from paused clients.","O(N) Where N is the number of paused clients","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_UNPAUSE_History,0,CLIENT_UNPAUSE_Tips,0,clientCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,CLIENT_UNPAUSE_Keyspecs,0,NULL,0),.reply_schema=&CLIENT_UNPAUSE_ReplySchema},
{0}
};

/********** CLIENT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CLIENT history */
#define CLIENT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CLIENT tips */
#define CLIENT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CLIENT key specs */
#define CLIENT_Keyspecs NULL
#endif

/********** ECHO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ECHO history */
#define ECHO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ECHO tips */
#define ECHO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ECHO key specs */
#define ECHO_Keyspecs NULL
#endif

/* ECHO argument table */
struct COMMAND_ARG ECHO_Args[] = {
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ECHO_ReplySchema reply schema */
struct jsonObjectElement ECHO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The given string"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ECHO_ReplySchema = {ECHO_ReplySchema_elements,.length=2};

/********** HELLO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HELLO history */
commandHistory HELLO_History[] = {
{"6.2.0","`protover` made optional; when called without arguments the command reports the current connection's context."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HELLO tips */
#define HELLO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HELLO key specs */
#define HELLO_Keyspecs NULL
#endif

/* HELLO arguments auth argument table */
struct COMMAND_ARG HELLO_arguments_auth_Subargs[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HELLO arguments argument table */
struct COMMAND_ARG HELLO_arguments_Subargs[] = {
{MAKE_ARG("protover",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("auth",ARG_TYPE_BLOCK,-1,"AUTH",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=HELLO_arguments_auth_Subargs},
{MAKE_ARG("clientname",ARG_TYPE_STRING,-1,"SETNAME",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* HELLO argument table */
struct COMMAND_ARG HELLO_Args[] = {
{MAKE_ARG("arguments",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=HELLO_arguments_Subargs},
};

/* HELLO_ReplySchema_properties_server reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_server_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_server = {HELLO_ReplySchema_properties_server_elements,.length=1};

/* HELLO_ReplySchema_properties_version reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_version_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_version = {HELLO_ReplySchema_properties_version_elements,.length=1};

/* HELLO_ReplySchema_properties_proto reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_proto_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=3},
};

struct jsonObject HELLO_ReplySchema_properties_proto = {HELLO_ReplySchema_properties_proto_elements,.length=1};

/* HELLO_ReplySchema_properties_id reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_id_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject HELLO_ReplySchema_properties_id = {HELLO_ReplySchema_properties_id_elements,.length=1};

/* HELLO_ReplySchema_properties_mode reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_mode_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_mode = {HELLO_ReplySchema_properties_mode_elements,.length=1};

/* HELLO_ReplySchema_properties_role reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_role_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_role = {HELLO_ReplySchema_properties_role_elements,.length=1};

/* HELLO_ReplySchema_properties_modules_items_properties_name reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties_name = {HELLO_ReplySchema_properties_modules_items_properties_name_elements,.length=1};

/* HELLO_ReplySchema_properties_modules_items_properties_ver reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_ver_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties_ver = {HELLO_ReplySchema_properties_modules_items_properties_ver_elements,.length=1};

/* HELLO_ReplySchema_properties_modules_items_properties_path reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_path_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties_path = {HELLO_ReplySchema_properties_modules_items_properties_path_elements,.length=1};

/* HELLO_ReplySchema_properties_modules_items_properties_args_items reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_args_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties_args_items = {HELLO_ReplySchema_properties_modules_items_properties_args_items_elements,.length=1};

/* HELLO_ReplySchema_properties_modules_items_properties_args reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_args_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&HELLO_ReplySchema_properties_modules_items_properties_args_items},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties_args = {HELLO_ReplySchema_properties_modules_items_properties_args_elements,.length=2};

/* HELLO_ReplySchema_properties_modules_items_properties reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&HELLO_ReplySchema_properties_modules_items_properties_name},
{JSON_TYPE_OBJECT,"ver",.value.object=&HELLO_ReplySchema_properties_modules_items_properties_ver},
{JSON_TYPE_OBJECT,"path",.value.object=&HELLO_ReplySchema_properties_modules_items_properties_path},
{JSON_TYPE_OBJECT,"args",.value.object=&HELLO_ReplySchema_properties_modules_items_properties_args},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items_properties = {HELLO_ReplySchema_properties_modules_items_properties_elements,.length=4};

/* HELLO_ReplySchema_properties_modules_items reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&HELLO_ReplySchema_properties_modules_items_properties},
};

struct jsonObject HELLO_ReplySchema_properties_modules_items = {HELLO_ReplySchema_properties_modules_items_elements,.length=3};

/* HELLO_ReplySchema_properties_modules reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_modules_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&HELLO_ReplySchema_properties_modules_items},
};

struct jsonObject HELLO_ReplySchema_properties_modules = {HELLO_ReplySchema_properties_modules_elements,.length=2};

/* HELLO_ReplySchema_properties reply schema */
struct jsonObjectElement HELLO_ReplySchema_properties_elements[] = {
{JSON_TYPE_OBJECT,"server",.value.object=&HELLO_ReplySchema_properties_server},
{JSON_TYPE_OBJECT,"version",.value.object=&HELLO_ReplySchema_properties_version},
{JSON_TYPE_OBJECT,"proto",.value.object=&HELLO_ReplySchema_properties_proto},
{JSON_TYPE_OBJECT,"id",.value.object=&HELLO_ReplySchema_properties_id},
{JSON_TYPE_OBJECT,"mode",.value.object=&HELLO_ReplySchema_properties_mode},
{JSON_TYPE_OBJECT,"role",.value.object=&HELLO_ReplySchema_properties_role},
{JSON_TYPE_OBJECT,"modules",.value.object=&HELLO_ReplySchema_properties_modules},
};

struct jsonObject HELLO_ReplySchema_properties = {HELLO_ReplySchema_properties_elements,.length=7};

/* HELLO_ReplySchema reply schema */
struct jsonObjectElement HELLO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&HELLO_ReplySchema_properties},
};

struct jsonObject HELLO_ReplySchema = {HELLO_ReplySchema_elements,.length=3};

/********** PING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PING history */
#define PING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PING tips */
const char *PING_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PING key specs */
#define PING_Keyspecs NULL
#endif

/* PING argument table */
struct COMMAND_ARG PING_Args[] = {
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* PING_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement PING_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="PONG"},
{JSON_TYPE_STRING,"description",.value.string="Default reply."},
};

struct jsonObject PING_ReplySchema_anyOf_0 = {PING_ReplySchema_anyOf_0_elements,.length=2};

/* PING_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement PING_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Relay of given `message`."},
};

struct jsonObject PING_ReplySchema_anyOf_1 = {PING_ReplySchema_anyOf_1_elements,.length=2};

/* PING_ReplySchema_anyOf array reply schema */
struct jsonObject *PING_ReplySchema_anyOf[] = {
&PING_ReplySchema_anyOf_0,
&PING_ReplySchema_anyOf_1,
};

/* PING_ReplySchema reply schema */
struct jsonObjectElement PING_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=PING_ReplySchema_anyOf,.length=2}},
};

struct jsonObject PING_ReplySchema = {PING_ReplySchema_elements,.length=1};

/********** QUIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* QUIT history */
#define QUIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* QUIT tips */
#define QUIT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* QUIT key specs */
#define QUIT_Keyspecs NULL
#endif

/* QUIT_ReplySchema reply schema */
struct jsonObjectElement QUIT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject QUIT_ReplySchema = {QUIT_ReplySchema_elements,.length=1};

/********** RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESET history */
#define RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESET tips */
#define RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESET key specs */
#define RESET_Keyspecs NULL
#endif

/* RESET_ReplySchema reply schema */
struct jsonObjectElement RESET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="RESET"},
};

struct jsonObject RESET_ReplySchema = {RESET_ReplySchema_elements,.length=1};

/********** SELECT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SELECT history */
#define SELECT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SELECT tips */
#define SELECT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SELECT key specs */
#define SELECT_Keyspecs NULL
#endif

/* SELECT argument table */
struct COMMAND_ARG SELECT_Args[] = {
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SELECT_ReplySchema reply schema */
struct jsonObjectElement SELECT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SELECT_ReplySchema = {SELECT_ReplySchema_elements,.length=1};

/********** COPY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COPY history */
#define COPY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COPY tips */
#define COPY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COPY key specs */
keySpec COPY_Keyspecs[2] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* COPY argument table */
struct COMMAND_ARG COPY_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination-db",ARG_TYPE_INTEGER,-1,"DB",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* COPY_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement COPY_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="source was copied"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject COPY_ReplySchema_oneOf_0 = {COPY_ReplySchema_oneOf_0_elements,.length=2};

/* COPY_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement COPY_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="source was not copied"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject COPY_ReplySchema_oneOf_1 = {COPY_ReplySchema_oneOf_1_elements,.length=2};

/* COPY_ReplySchema_oneOf array reply schema */
struct jsonObject *COPY_ReplySchema_oneOf[] = {
&COPY_ReplySchema_oneOf_0,
&COPY_ReplySchema_oneOf_1,
};

/* COPY_ReplySchema reply schema */
struct jsonObjectElement COPY_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=COPY_ReplySchema_oneOf,.length=2}},
};

struct jsonObject COPY_ReplySchema = {COPY_ReplySchema_elements,.length=1};

/********** DEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DEL history */
#define DEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DEL tips */
const char *DEL_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DEL key specs */
keySpec DEL_Keyspecs[1] = {
{NULL,CMD_KEY_RM|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* DEL argument table */
struct COMMAND_ARG DEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* DEL_ReplySchema reply schema */
struct jsonObjectElement DEL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of keys that were removed"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject DEL_ReplySchema = {DEL_ReplySchema_elements,.length=3};

/********** DUMP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DUMP history */
#define DUMP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DUMP tips */
const char *DUMP_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DUMP key specs */
keySpec DUMP_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* DUMP argument table */
struct COMMAND_ARG DUMP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* DUMP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement DUMP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The serialized value."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject DUMP_ReplySchema_oneOf_0 = {DUMP_ReplySchema_oneOf_0_elements,.length=2};

/* DUMP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement DUMP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject DUMP_ReplySchema_oneOf_1 = {DUMP_ReplySchema_oneOf_1_elements,.length=2};

/* DUMP_ReplySchema_oneOf array reply schema */
struct jsonObject *DUMP_ReplySchema_oneOf[] = {
&DUMP_ReplySchema_oneOf_0,
&DUMP_ReplySchema_oneOf_1,
};

/* DUMP_ReplySchema reply schema */
struct jsonObjectElement DUMP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=DUMP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject DUMP_ReplySchema = {DUMP_ReplySchema_elements,.length=1};

/********** EXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXISTS history */
commandHistory EXISTS_History[] = {
{"3.0.3","Accepts multiple `key` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXISTS tips */
const char *EXISTS_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXISTS key specs */
keySpec EXISTS_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* EXISTS argument table */
struct COMMAND_ARG EXISTS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* EXISTS_ReplySchema reply schema */
struct jsonObjectElement EXISTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of keys that exist from those specified as arguments."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject EXISTS_ReplySchema = {EXISTS_ReplySchema_elements,.length=2};

/********** EXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIRE history */
commandHistory EXPIRE_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIRE tips */
#define EXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIRE key specs */
keySpec EXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIRE condition argument table */
struct COMMAND_ARG EXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* EXPIRE argument table */
struct COMMAND_ARG EXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=EXPIRE_condition_Subargs},
};

/* EXPIRE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement EXPIRE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject EXPIRE_ReplySchema_oneOf_0 = {EXPIRE_ReplySchema_oneOf_0_elements,.length=2};

/* EXPIRE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement EXPIRE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The timeout was set."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject EXPIRE_ReplySchema_oneOf_1 = {EXPIRE_ReplySchema_oneOf_1_elements,.length=2};

/* EXPIRE_ReplySchema_oneOf array reply schema */
struct jsonObject *EXPIRE_ReplySchema_oneOf[] = {
&EXPIRE_ReplySchema_oneOf_0,
&EXPIRE_ReplySchema_oneOf_1,
};

/* EXPIRE_ReplySchema reply schema */
struct jsonObjectElement EXPIRE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=EXPIRE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject EXPIRE_ReplySchema = {EXPIRE_ReplySchema_elements,.length=1};

/********** EXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIREAT history */
commandHistory EXPIREAT_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIREAT tips */
#define EXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIREAT key specs */
keySpec EXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIREAT condition argument table */
struct COMMAND_ARG EXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* EXPIREAT argument table */
struct COMMAND_ARG EXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-seconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=EXPIREAT_condition_Subargs},
};

/* EXPIREAT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement EXPIREAT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="The timeout was set."},
};

struct jsonObject EXPIREAT_ReplySchema_oneOf_0 = {EXPIREAT_ReplySchema_oneOf_0_elements,.length=2};

/* EXPIREAT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement EXPIREAT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."},
};

struct jsonObject EXPIREAT_ReplySchema_oneOf_1 = {EXPIREAT_ReplySchema_oneOf_1_elements,.length=2};

/* EXPIREAT_ReplySchema_oneOf array reply schema */
struct jsonObject *EXPIREAT_ReplySchema_oneOf[] = {
&EXPIREAT_ReplySchema_oneOf_0,
&EXPIREAT_ReplySchema_oneOf_1,
};

/* EXPIREAT_ReplySchema reply schema */
struct jsonObjectElement EXPIREAT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=EXPIREAT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject EXPIREAT_ReplySchema = {EXPIREAT_ReplySchema_elements,.length=1};

/********** EXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXPIRETIME history */
#define EXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXPIRETIME tips */
#define EXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXPIRETIME key specs */
keySpec EXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* EXPIRETIME argument table */
struct COMMAND_ARG EXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* EXPIRETIME_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement EXPIRETIME_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Expiration Unix timestamp in seconds."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject EXPIRETIME_ReplySchema_oneOf_0 = {EXPIRETIME_ReplySchema_oneOf_0_elements,.length=3};

/* EXPIRETIME_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement EXPIRETIME_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
{JSON_TYPE_STRING,"description",.value.string="The key exists but has no associated expiration time."},
};

struct jsonObject EXPIRETIME_ReplySchema_oneOf_1 = {EXPIRETIME_ReplySchema_oneOf_1_elements,.length=2};

/* EXPIRETIME_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement EXPIRETIME_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
};

struct jsonObject EXPIRETIME_ReplySchema_oneOf_2 = {EXPIRETIME_ReplySchema_oneOf_2_elements,.length=2};

/* EXPIRETIME_ReplySchema_oneOf array reply schema */
struct jsonObject *EXPIRETIME_ReplySchema_oneOf[] = {
&EXPIRETIME_ReplySchema_oneOf_0,
&EXPIRETIME_ReplySchema_oneOf_1,
&EXPIRETIME_ReplySchema_oneOf_2,
};

/* EXPIRETIME_ReplySchema reply schema */
struct jsonObjectElement EXPIRETIME_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=EXPIRETIME_ReplySchema_oneOf,.length=3}},
};

struct jsonObject EXPIRETIME_ReplySchema = {EXPIRETIME_ReplySchema_elements,.length=1};

/********** KEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* KEYS history */
#define KEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* KEYS tips */
const char *KEYS_Tips[] = {
"request_policy:all_shards",
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* KEYS key specs */
#define KEYS_Keyspecs NULL
#endif

/* KEYS argument table */
struct COMMAND_ARG KEYS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* KEYS_ReplySchema_items reply schema */
struct jsonObjectElement KEYS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject KEYS_ReplySchema_items = {KEYS_ReplySchema_items_elements,.length=1};

/* KEYS_ReplySchema reply schema */
struct jsonObjectElement KEYS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of keys matching pattern"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&KEYS_ReplySchema_items},
};

struct jsonObject KEYS_ReplySchema = {KEYS_ReplySchema_elements,.length=3};

/********** MIGRATE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MIGRATE history */
commandHistory MIGRATE_History[] = {
{"3.0.0","Added the `COPY` and `REPLACE` options."},
{"3.0.6","Added the `KEYS` option."},
{"4.0.7","Added the `AUTH` option."},
{"6.0.0","Added the `AUTH2` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MIGRATE tips */
const char *MIGRATE_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MIGRATE key specs */
keySpec MIGRATE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={3},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE|CMD_KEY_INCOMPLETE,KSPEC_BS_KEYWORD,.bs.keyword={"KEYS",-2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* MIGRATE key_selector argument table */
struct COMMAND_ARG MIGRATE_key_selector_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("empty-string",ARG_TYPE_PURE_TOKEN,-1,"""",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MIGRATE authentication auth2 argument table */
struct COMMAND_ARG MIGRATE_authentication_auth2_Subargs[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("password",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MIGRATE authentication argument table */
struct COMMAND_ARG MIGRATE_authentication_Subargs[] = {
{MAKE_ARG("auth",ARG_TYPE_STRING,-1,"AUTH",NULL,"4.0.7",CMD_ARG_NONE,0,NULL),.display_text="password"},
{MAKE_ARG("auth2",ARG_TYPE_BLOCK,-1,"AUTH2",NULL,"6.0.0",CMD_ARG_NONE,2,NULL),.subargs=MIGRATE_authentication_auth2_Subargs},
};

/* MIGRATE argument table */
struct COMMAND_ARG MIGRATE_Args[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=MIGRATE_key_selector_Subargs},
{MAKE_ARG("destination-db",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("copy",ARG_TYPE_PURE_TOKEN,-1,"COPY",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("authentication",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=MIGRATE_authentication_Subargs},
{MAKE_ARG("keys",ARG_TYPE_KEY,1,"KEYS",NULL,"3.0.6",CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL),.display_text="key"},
};

/* MIGRATE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement MIGRATE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="Success."},
};

struct jsonObject MIGRATE_ReplySchema_oneOf_0 = {MIGRATE_ReplySchema_oneOf_0_elements,.length=2};

/* MIGRATE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement MIGRATE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="NOKEY"},
{JSON_TYPE_STRING,"description",.value.string="No keys were found in the source instance."},
};

struct jsonObject MIGRATE_ReplySchema_oneOf_1 = {MIGRATE_ReplySchema_oneOf_1_elements,.length=2};

/* MIGRATE_ReplySchema_oneOf array reply schema */
struct jsonObject *MIGRATE_ReplySchema_oneOf[] = {
&MIGRATE_ReplySchema_oneOf_0,
&MIGRATE_ReplySchema_oneOf_1,
};

/* MIGRATE_ReplySchema reply schema */
struct jsonObjectElement MIGRATE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=MIGRATE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject MIGRATE_ReplySchema = {MIGRATE_ReplySchema_elements,.length=1};

/********** MOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MOVE history */
#define MOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MOVE tips */
#define MOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MOVE key specs */
keySpec MOVE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* MOVE argument table */
struct COMMAND_ARG MOVE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("db",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MOVE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement MOVE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="key was moved"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject MOVE_ReplySchema_oneOf_0 = {MOVE_ReplySchema_oneOf_0_elements,.length=2};

/* MOVE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement MOVE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="key wasn't moved"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject MOVE_ReplySchema_oneOf_1 = {MOVE_ReplySchema_oneOf_1_elements,.length=2};

/* MOVE_ReplySchema_oneOf array reply schema */
struct jsonObject *MOVE_ReplySchema_oneOf[] = {
&MOVE_ReplySchema_oneOf_0,
&MOVE_ReplySchema_oneOf_1,
};

/* MOVE_ReplySchema reply schema */
struct jsonObjectElement MOVE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=MOVE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject MOVE_ReplySchema = {MOVE_ReplySchema_elements,.length=1};

/********** OBJECT ENCODING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT ENCODING history */
#define OBJECT_ENCODING_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT ENCODING tips */
const char *OBJECT_ENCODING_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT ENCODING key specs */
keySpec OBJECT_ENCODING_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT ENCODING argument table */
struct COMMAND_ARG OBJECT_ENCODING_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* OBJECT_ENCODING_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement OBJECT_ENCODING_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="key doesn't exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject OBJECT_ENCODING_ReplySchema_oneOf_0 = {OBJECT_ENCODING_ReplySchema_oneOf_0_elements,.length=2};

/* OBJECT_ENCODING_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement OBJECT_ENCODING_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="encoding of the object"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject OBJECT_ENCODING_ReplySchema_oneOf_1 = {OBJECT_ENCODING_ReplySchema_oneOf_1_elements,.length=2};

/* OBJECT_ENCODING_ReplySchema_oneOf array reply schema */
struct jsonObject *OBJECT_ENCODING_ReplySchema_oneOf[] = {
&OBJECT_ENCODING_ReplySchema_oneOf_0,
&OBJECT_ENCODING_ReplySchema_oneOf_1,
};

/* OBJECT_ENCODING_ReplySchema reply schema */
struct jsonObjectElement OBJECT_ENCODING_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=OBJECT_ENCODING_ReplySchema_oneOf,.length=2}},
};

struct jsonObject OBJECT_ENCODING_ReplySchema = {OBJECT_ENCODING_ReplySchema_elements,.length=1};

/********** OBJECT FREQ ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT FREQ history */
#define OBJECT_FREQ_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT FREQ tips */
const char *OBJECT_FREQ_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT FREQ key specs */
keySpec OBJECT_FREQ_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT FREQ argument table */
struct COMMAND_ARG OBJECT_FREQ_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* OBJECT_FREQ_ReplySchema reply schema */
struct jsonObjectElement OBJECT_FREQ_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the counter's value"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject OBJECT_FREQ_ReplySchema = {OBJECT_FREQ_ReplySchema_elements,.length=2};

/********** OBJECT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT HELP history */
#define OBJECT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT HELP tips */
#define OBJECT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT HELP key specs */
#define OBJECT_HELP_Keyspecs NULL
#endif

/* OBJECT_HELP_ReplySchema_items reply schema */
struct jsonObjectElement OBJECT_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject OBJECT_HELP_ReplySchema_items = {OBJECT_HELP_ReplySchema_items_elements,.length=1};

/* OBJECT_HELP_ReplySchema reply schema */
struct jsonObjectElement OBJECT_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&OBJECT_HELP_ReplySchema_items},
};

struct jsonObject OBJECT_HELP_ReplySchema = {OBJECT_HELP_ReplySchema_elements,.length=3};

/********** OBJECT IDLETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT IDLETIME history */
#define OBJECT_IDLETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT IDLETIME tips */
const char *OBJECT_IDLETIME_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT IDLETIME key specs */
keySpec OBJECT_IDLETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT IDLETIME argument table */
struct COMMAND_ARG OBJECT_IDLETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* OBJECT_IDLETIME_ReplySchema reply schema */
struct jsonObjectElement OBJECT_IDLETIME_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the idle time in seconds"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject OBJECT_IDLETIME_ReplySchema = {OBJECT_IDLETIME_ReplySchema_elements,.length=2};

/********** OBJECT REFCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT REFCOUNT history */
#define OBJECT_REFCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT REFCOUNT tips */
const char *OBJECT_REFCOUNT_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT REFCOUNT key specs */
keySpec OBJECT_REFCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* OBJECT REFCOUNT argument table */
struct COMMAND_ARG OBJECT_REFCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* OBJECT_REFCOUNT_ReplySchema reply schema */
struct jsonObjectElement OBJECT_REFCOUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of references"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject OBJECT_REFCOUNT_ReplySchema = {OBJECT_REFCOUNT_ReplySchema_elements,.length=2};

/* OBJECT command table */
struct COMMAND_STRUCT OBJECT_Subcommands[] = {
{MAKE_CMD("encoding","Returns the internal encoding of a Redis object.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_ENCODING_History,0,OBJECT_ENCODING_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_ENCODING_Keyspecs,1,NULL,1),.args=OBJECT_ENCODING_Args,.reply_schema=&OBJECT_ENCODING_ReplySchema},
{MAKE_CMD("freq","Returns the logarithmic access frequency counter of a Redis object.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_FREQ_History,0,OBJECT_FREQ_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_FREQ_Keyspecs,1,NULL,1),.args=OBJECT_FREQ_Args,.reply_schema=&OBJECT_FREQ_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_HELP_History,0,OBJECT_HELP_Tips,0,objectCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_KEYSPACE,OBJECT_HELP_Keyspecs,0,NULL,0),.reply_schema=&OBJECT_HELP_ReplySchema},
{MAKE_CMD("idletime","Returns the time since the last access to a Redis object.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_IDLETIME_History,0,OBJECT_IDLETIME_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_IDLETIME_Keyspecs,1,NULL,1),.args=OBJECT_IDLETIME_Args,.reply_schema=&OBJECT_IDLETIME_ReplySchema},
{MAKE_CMD("refcount","Returns the reference count of a value of a key.","O(1)","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_REFCOUNT_History,0,OBJECT_REFCOUNT_Tips,1,objectCommand,3,CMD_READONLY,ACL_CATEGORY_KEYSPACE,OBJECT_REFCOUNT_Keyspecs,1,NULL,1),.args=OBJECT_REFCOUNT_Args,.reply_schema=&OBJECT_REFCOUNT_ReplySchema},
{0}
};

/********** OBJECT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* OBJECT history */
#define OBJECT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* OBJECT tips */
#define OBJECT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* OBJECT key specs */
#define OBJECT_Keyspecs NULL
#endif

/********** PERSIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PERSIST history */
#define PERSIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PERSIST tips */
#define PERSIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PERSIST key specs */
keySpec PERSIST_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PERSIST argument table */
struct COMMAND_ARG PERSIST_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PERSIST_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PERSIST_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="Key does not exist or does not have an associated timeout."},
};

struct jsonObject PERSIST_ReplySchema_oneOf_0 = {PERSIST_ReplySchema_oneOf_0_elements,.length=2};

/* PERSIST_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PERSIST_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="The timeout has been removed."},
};

struct jsonObject PERSIST_ReplySchema_oneOf_1 = {PERSIST_ReplySchema_oneOf_1_elements,.length=2};

/* PERSIST_ReplySchema_oneOf array reply schema */
struct jsonObject *PERSIST_ReplySchema_oneOf[] = {
&PERSIST_ReplySchema_oneOf_0,
&PERSIST_ReplySchema_oneOf_1,
};

/* PERSIST_ReplySchema reply schema */
struct jsonObjectElement PERSIST_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PERSIST_ReplySchema_oneOf,.length=2}},
};

struct jsonObject PERSIST_ReplySchema = {PERSIST_ReplySchema_elements,.length=1};

/********** PEXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIRE history */
commandHistory PEXPIRE_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIRE tips */
#define PEXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIRE key specs */
keySpec PEXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIRE condition argument table */
struct COMMAND_ARG PEXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PEXPIRE argument table */
struct COMMAND_ARG PEXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=PEXPIRE_condition_Subargs},
};

/* PEXPIRE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PEXPIRE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."},
};

struct jsonObject PEXPIRE_ReplySchema_oneOf_0 = {PEXPIRE_ReplySchema_oneOf_0_elements,.length=2};

/* PEXPIRE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PEXPIRE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="The timeout was set."},
};

struct jsonObject PEXPIRE_ReplySchema_oneOf_1 = {PEXPIRE_ReplySchema_oneOf_1_elements,.length=2};

/* PEXPIRE_ReplySchema_oneOf array reply schema */
struct jsonObject *PEXPIRE_ReplySchema_oneOf[] = {
&PEXPIRE_ReplySchema_oneOf_0,
&PEXPIRE_ReplySchema_oneOf_1,
};

/* PEXPIRE_ReplySchema reply schema */
struct jsonObjectElement PEXPIRE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PEXPIRE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject PEXPIRE_ReplySchema = {PEXPIRE_ReplySchema_elements,.length=1};

/********** PEXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIREAT history */
commandHistory PEXPIREAT_History[] = {
{"7.0.0","Added options: `NX`, `XX`, `GT` and `LT`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIREAT tips */
#define PEXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIREAT key specs */
keySpec PEXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIREAT condition argument table */
struct COMMAND_ARG PEXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PEXPIREAT argument table */
struct COMMAND_ARG PEXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"7.0.0",CMD_ARG_OPTIONAL,4,NULL),.subargs=PEXPIREAT_condition_Subargs},
};

/* PEXPIREAT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PEXPIREAT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="The timeout was set."},
};

struct jsonObject PEXPIREAT_ReplySchema_oneOf_0 = {PEXPIREAT_ReplySchema_oneOf_0_elements,.length=2};

/* PEXPIREAT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PEXPIREAT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."},
};

struct jsonObject PEXPIREAT_ReplySchema_oneOf_1 = {PEXPIREAT_ReplySchema_oneOf_1_elements,.length=2};

/* PEXPIREAT_ReplySchema_oneOf array reply schema */
struct jsonObject *PEXPIREAT_ReplySchema_oneOf[] = {
&PEXPIREAT_ReplySchema_oneOf_0,
&PEXPIREAT_ReplySchema_oneOf_1,
};

/* PEXPIREAT_ReplySchema reply schema */
struct jsonObjectElement PEXPIREAT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PEXPIREAT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject PEXPIREAT_ReplySchema = {PEXPIREAT_ReplySchema_elements,.length=1};

/********** PEXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PEXPIRETIME history */
#define PEXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PEXPIRETIME tips */
#define PEXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PEXPIRETIME key specs */
keySpec PEXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PEXPIRETIME argument table */
struct COMMAND_ARG PEXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PEXPIRETIME_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PEXPIRETIME_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Expiration Unix timestamp in milliseconds."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject PEXPIRETIME_ReplySchema_oneOf_0 = {PEXPIRETIME_ReplySchema_oneOf_0_elements,.length=3};

/* PEXPIRETIME_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PEXPIRETIME_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
{JSON_TYPE_STRING,"description",.value.string="The key exists but has no associated expiration time."},
};

struct jsonObject PEXPIRETIME_ReplySchema_oneOf_1 = {PEXPIRETIME_ReplySchema_oneOf_1_elements,.length=2};

/* PEXPIRETIME_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement PEXPIRETIME_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
};

struct jsonObject PEXPIRETIME_ReplySchema_oneOf_2 = {PEXPIRETIME_ReplySchema_oneOf_2_elements,.length=2};

/* PEXPIRETIME_ReplySchema_oneOf array reply schema */
struct jsonObject *PEXPIRETIME_ReplySchema_oneOf[] = {
&PEXPIRETIME_ReplySchema_oneOf_0,
&PEXPIRETIME_ReplySchema_oneOf_1,
&PEXPIRETIME_ReplySchema_oneOf_2,
};

/* PEXPIRETIME_ReplySchema reply schema */
struct jsonObjectElement PEXPIRETIME_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PEXPIRETIME_ReplySchema_oneOf,.length=3}},
};

struct jsonObject PEXPIRETIME_ReplySchema = {PEXPIRETIME_ReplySchema_elements,.length=1};

/********** PTTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PTTL history */
commandHistory PTTL_History[] = {
{"2.8.0","Added the -2 reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PTTL tips */
const char *PTTL_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PTTL key specs */
keySpec PTTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PTTL argument table */
struct COMMAND_ARG PTTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PTTL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PTTL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="TTL in milliseconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject PTTL_ReplySchema_oneOf_0 = {PTTL_ReplySchema_oneOf_0_elements,.length=3};

/* PTTL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PTTL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject PTTL_ReplySchema_oneOf_1 = {PTTL_ReplySchema_oneOf_1_elements,.length=2};

/* PTTL_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement PTTL_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject PTTL_ReplySchema_oneOf_2 = {PTTL_ReplySchema_oneOf_2_elements,.length=2};

/* PTTL_ReplySchema_oneOf array reply schema */
struct jsonObject *PTTL_ReplySchema_oneOf[] = {
&PTTL_ReplySchema_oneOf_0,
&PTTL_ReplySchema_oneOf_1,
&PTTL_ReplySchema_oneOf_2,
};

/* PTTL_ReplySchema reply schema */
struct jsonObjectElement PTTL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PTTL_ReplySchema_oneOf,.length=3}},
};

struct jsonObject PTTL_ReplySchema = {PTTL_ReplySchema_elements,.length=1};

/********** RANDOMKEY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RANDOMKEY history */
#define RANDOMKEY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RANDOMKEY tips */
const char *RANDOMKEY_Tips[] = {
"request_policy:all_shards",
"response_policy:special",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RANDOMKEY key specs */
#define RANDOMKEY_Keyspecs NULL
#endif

/* RANDOMKEY_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement RANDOMKEY_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when the database is empty"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject RANDOMKEY_ReplySchema_oneOf_0 = {RANDOMKEY_ReplySchema_oneOf_0_elements,.length=2};

/* RANDOMKEY_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement RANDOMKEY_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="random key in db"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject RANDOMKEY_ReplySchema_oneOf_1 = {RANDOMKEY_ReplySchema_oneOf_1_elements,.length=2};

/* RANDOMKEY_ReplySchema_oneOf array reply schema */
struct jsonObject *RANDOMKEY_ReplySchema_oneOf[] = {
&RANDOMKEY_ReplySchema_oneOf_0,
&RANDOMKEY_ReplySchema_oneOf_1,
};

/* RANDOMKEY_ReplySchema reply schema */
struct jsonObjectElement RANDOMKEY_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=RANDOMKEY_ReplySchema_oneOf,.length=2}},
};

struct jsonObject RANDOMKEY_ReplySchema = {RANDOMKEY_ReplySchema_elements,.length=1};

/********** RENAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RENAME history */
#define RENAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RENAME tips */
#define RENAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RENAME key specs */
keySpec RENAME_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RENAME argument table */
struct COMMAND_ARG RENAME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("newkey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* RENAME_ReplySchema reply schema */
struct jsonObjectElement RENAME_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject RENAME_ReplySchema = {RENAME_ReplySchema_elements,.length=1};

/********** RENAMENX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RENAMENX history */
commandHistory RENAMENX_History[] = {
{"3.2.0","The command no longer returns an error when source and destination names are the same."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RENAMENX tips */
#define RENAMENX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RENAMENX key specs */
keySpec RENAMENX_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RENAMENX argument table */
struct COMMAND_ARG RENAMENX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("newkey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* RENAMENX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement RENAMENX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="key was renamed to newkey"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject RENAMENX_ReplySchema_oneOf_0 = {RENAMENX_ReplySchema_oneOf_0_elements,.length=2};

/* RENAMENX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement RENAMENX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="new key already exists"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject RENAMENX_ReplySchema_oneOf_1 = {RENAMENX_ReplySchema_oneOf_1_elements,.length=2};

/* RENAMENX_ReplySchema_oneOf array reply schema */
struct jsonObject *RENAMENX_ReplySchema_oneOf[] = {
&RENAMENX_ReplySchema_oneOf_0,
&RENAMENX_ReplySchema_oneOf_1,
};

/* RENAMENX_ReplySchema reply schema */
struct jsonObjectElement RENAMENX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=RENAMENX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject RENAMENX_ReplySchema = {RENAMENX_ReplySchema_elements,.length=1};

/********** RESTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESTORE history */
commandHistory RESTORE_History[] = {
{"3.0.0","Added the `REPLACE` modifier."},
{"5.0.0","Added the `ABSTTL` modifier."},
{"5.0.0","Added the `IDLETIME` and `FREQ` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESTORE tips */
#define RESTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESTORE key specs */
keySpec RESTORE_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RESTORE argument table */
struct COMMAND_ARG RESTORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ttl",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("absttl",ARG_TYPE_PURE_TOKEN,-1,"ABSTTL",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"IDLETIME",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("frequency",ARG_TYPE_INTEGER,-1,"FREQ",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* RESTORE_ReplySchema reply schema */
struct jsonObjectElement RESTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject RESTORE_ReplySchema = {RESTORE_ReplySchema_elements,.length=1};

/********** SCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCAN history */
commandHistory SCAN_History[] = {
{"6.0.0","Added the `TYPE` subcommand."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCAN tips */
const char *SCAN_Tips[] = {
"nondeterministic_output",
"request_policy:special",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCAN key specs */
#define SCAN_Keyspecs NULL
#endif

/* SCAN argument table */
struct COMMAND_ARG SCAN_Args[] = {
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("type",ARG_TYPE_STRING,-1,"TYPE",NULL,"6.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* SCAN_ReplySchema_items_0 reply schema */
struct jsonObjectElement SCAN_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SCAN_ReplySchema_items_0 = {SCAN_ReplySchema_items_0_elements,.length=2};

/* SCAN_ReplySchema_items_1_items reply schema */
struct jsonObjectElement SCAN_ReplySchema_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SCAN_ReplySchema_items_1_items = {SCAN_ReplySchema_items_1_items_elements,.length=1};

/* SCAN_ReplySchema_items_1 reply schema */
struct jsonObjectElement SCAN_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of keys"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SCAN_ReplySchema_items_1_items},
};

struct jsonObject SCAN_ReplySchema_items_1 = {SCAN_ReplySchema_items_1_elements,.length=3};

/* SCAN_ReplySchema_items array reply schema */
struct jsonObject *SCAN_ReplySchema_items[] = {
&SCAN_ReplySchema_items_0,
&SCAN_ReplySchema_items_1,
};

/* SCAN_ReplySchema reply schema */
struct jsonObjectElement SCAN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor and scan response in array form"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SCAN_ReplySchema_items,.length=2}},
};

struct jsonObject SCAN_ReplySchema = {SCAN_ReplySchema_elements,.length=5};

/********** SORT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SORT history */
#define SORT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SORT tips */
#define SORT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SORT key specs */
keySpec SORT_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}},{"For the optional STORE keyword. It is marked 'unknown' because the keyword can appear anywhere in the argument array",CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}}
};
#endif

/* SORT limit argument table */
struct COMMAND_ARG SORT_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT order argument table */
struct COMMAND_ARG SORT_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT argument table */
struct COMMAND_ARG SORT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("by-pattern",ARG_TYPE_PATTERN,1,"BY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="pattern"},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_limit_Subargs},
{MAKE_ARG("get-pattern",ARG_TYPE_PATTERN,1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL),.display_text="pattern"},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_order_Subargs},
{MAKE_ARG("sorting",ARG_TYPE_PURE_TOKEN,-1,"ALPHA",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,2,"STORE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* SORT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SORT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when the store option is specified the command returns the number of sorted elements in the destination list"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SORT_ReplySchema_oneOf_0 = {SORT_ReplySchema_oneOf_0_elements,.length=3};

/* SORT_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement SORT_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SORT_ReplySchema_oneOf_1_items_oneOf_0 = {SORT_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=1};

/* SORT_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement SORT_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="GET option is specified, but no object was found"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SORT_ReplySchema_oneOf_1_items_oneOf_1 = {SORT_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* SORT_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *SORT_ReplySchema_oneOf_1_items_oneOf[] = {
&SORT_ReplySchema_oneOf_1_items_oneOf_0,
&SORT_ReplySchema_oneOf_1_items_oneOf_1,
};

/* SORT_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement SORT_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SORT_ReplySchema_oneOf_1_items_oneOf,.length=2}},
};

struct jsonObject SORT_ReplySchema_oneOf_1_items = {SORT_ReplySchema_oneOf_1_items_elements,.length=1};

/* SORT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SORT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when not passing the store option the command returns a list of sorted elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SORT_ReplySchema_oneOf_1_items},
};

struct jsonObject SORT_ReplySchema_oneOf_1 = {SORT_ReplySchema_oneOf_1_elements,.length=3};

/* SORT_ReplySchema_oneOf array reply schema */
struct jsonObject *SORT_ReplySchema_oneOf[] = {
&SORT_ReplySchema_oneOf_0,
&SORT_ReplySchema_oneOf_1,
};

/* SORT_ReplySchema reply schema */
struct jsonObjectElement SORT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SORT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SORT_ReplySchema = {SORT_ReplySchema_elements,.length=1};

/********** SORT_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SORT_RO history */
#define SORT_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SORT_RO tips */
#define SORT_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SORT_RO key specs */
keySpec SORT_RO_Keyspecs[2] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{"For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_UNKNOWN,{{0}},KSPEC_FK_UNKNOWN,{{0}}}
};
#endif

/* SORT_RO limit argument table */
struct COMMAND_ARG SORT_RO_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT_RO order argument table */
struct COMMAND_ARG SORT_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SORT_RO argument table */
struct COMMAND_ARG SORT_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("by-pattern",ARG_TYPE_PATTERN,1,"BY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="pattern"},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_RO_limit_Subargs},
{MAKE_ARG("get-pattern",ARG_TYPE_PATTERN,1,"GET",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,0,NULL),.display_text="pattern"},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SORT_RO_order_Subargs},
{MAKE_ARG("sorting",ARG_TYPE_PURE_TOKEN,-1,"ALPHA",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* SORT_RO_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement SORT_RO_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SORT_RO_ReplySchema_items_oneOf_0 = {SORT_RO_ReplySchema_items_oneOf_0_elements,.length=1};

/* SORT_RO_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement SORT_RO_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="GET option is specified, but no object was found"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SORT_RO_ReplySchema_items_oneOf_1 = {SORT_RO_ReplySchema_items_oneOf_1_elements,.length=2};

/* SORT_RO_ReplySchema_items_oneOf array reply schema */
struct jsonObject *SORT_RO_ReplySchema_items_oneOf[] = {
&SORT_RO_ReplySchema_items_oneOf_0,
&SORT_RO_ReplySchema_items_oneOf_1,
};

/* SORT_RO_ReplySchema_items reply schema */
struct jsonObjectElement SORT_RO_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SORT_RO_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject SORT_RO_ReplySchema_items = {SORT_RO_ReplySchema_items_elements,.length=1};

/* SORT_RO_ReplySchema reply schema */
struct jsonObjectElement SORT_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a list of sorted elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SORT_RO_ReplySchema_items},
};

struct jsonObject SORT_RO_ReplySchema = {SORT_RO_ReplySchema_elements,.length=3};

/********** TOUCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TOUCH history */
#define TOUCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TOUCH tips */
const char *TOUCH_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TOUCH key specs */
keySpec TOUCH_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* TOUCH argument table */
struct COMMAND_ARG TOUCH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* TOUCH_ReplySchema reply schema */
struct jsonObjectElement TOUCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of touched keys"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject TOUCH_ReplySchema = {TOUCH_ReplySchema_elements,.length=3};

/********** TTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TTL history */
commandHistory TTL_History[] = {
{"2.8.0","Added the -2 reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TTL tips */
const char *TTL_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TTL key specs */
keySpec TTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* TTL argument table */
struct COMMAND_ARG TTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* TTL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement TTL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="TTL in seconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject TTL_ReplySchema_oneOf_0 = {TTL_ReplySchema_oneOf_0_elements,.length=3};

/* TTL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement TTL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject TTL_ReplySchema_oneOf_1 = {TTL_ReplySchema_oneOf_1_elements,.length=2};

/* TTL_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement TTL_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject TTL_ReplySchema_oneOf_2 = {TTL_ReplySchema_oneOf_2_elements,.length=2};

/* TTL_ReplySchema_oneOf array reply schema */
struct jsonObject *TTL_ReplySchema_oneOf[] = {
&TTL_ReplySchema_oneOf_0,
&TTL_ReplySchema_oneOf_1,
&TTL_ReplySchema_oneOf_2,
};

/* TTL_ReplySchema reply schema */
struct jsonObjectElement TTL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=TTL_ReplySchema_oneOf,.length=3}},
};

struct jsonObject TTL_ReplySchema = {TTL_ReplySchema_elements,.length=1};

/********** TYPE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TYPE history */
#define TYPE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TYPE tips */
#define TYPE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TYPE key specs */
keySpec TYPE_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* TYPE argument table */
struct COMMAND_ARG TYPE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* TYPE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement TYPE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key doesn't exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject TYPE_ReplySchema_oneOf_0 = {TYPE_ReplySchema_oneOf_0_elements,.length=2};

/* TYPE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement TYPE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Type of the key"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject TYPE_ReplySchema_oneOf_1 = {TYPE_ReplySchema_oneOf_1_elements,.length=2};

/* TYPE_ReplySchema_oneOf array reply schema */
struct jsonObject *TYPE_ReplySchema_oneOf[] = {
&TYPE_ReplySchema_oneOf_0,
&TYPE_ReplySchema_oneOf_1,
};

/* TYPE_ReplySchema reply schema */
struct jsonObjectElement TYPE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=TYPE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject TYPE_ReplySchema = {TYPE_ReplySchema_elements,.length=1};

/********** UNLINK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* UNLINK history */
#define UNLINK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* UNLINK tips */
const char *UNLINK_Tips[] = {
"request_policy:multi_shard",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* UNLINK key specs */
keySpec UNLINK_Keyspecs[1] = {
{NULL,CMD_KEY_RM|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* UNLINK argument table */
struct COMMAND_ARG UNLINK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* UNLINK_ReplySchema reply schema */
struct jsonObjectElement UNLINK_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of keys that were unlinked"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject UNLINK_ReplySchema = {UNLINK_ReplySchema_elements,.length=3};

/********** WAIT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* WAIT history */
#define WAIT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* WAIT tips */
const char *WAIT_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_min",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* WAIT key specs */
#define WAIT_Keyspecs NULL
#endif

/* WAIT argument table */
struct COMMAND_ARG WAIT_Args[] = {
{MAKE_ARG("numreplicas",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* WAIT_ReplySchema reply schema */
struct jsonObjectElement WAIT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The number of replicas reached by all the writes performed in the context of the current connection."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject WAIT_ReplySchema = {WAIT_ReplySchema_elements,.length=3};

/********** WAITAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* WAITAOF history */
#define WAITAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* WAITAOF tips */
const char *WAITAOF_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_min",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* WAITAOF key specs */
#define WAITAOF_Keyspecs NULL
#endif

/* WAITAOF argument table */
struct COMMAND_ARG WAITAOF_Args[] = {
{MAKE_ARG("numlocal",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numreplicas",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* WAITAOF_ReplySchema_items_0 reply schema */
struct jsonObjectElement WAITAOF_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of local AOF files."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject WAITAOF_ReplySchema_items_0 = {WAITAOF_ReplySchema_items_0_elements,.length=3};

/* WAITAOF_ReplySchema_items_1 reply schema */
struct jsonObjectElement WAITAOF_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of replica AOF files."},
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject WAITAOF_ReplySchema_items_1 = {WAITAOF_ReplySchema_items_1_elements,.length=3};

/* WAITAOF_ReplySchema_items array reply schema */
struct jsonObject *WAITAOF_ReplySchema_items[] = {
&WAITAOF_ReplySchema_items_0,
&WAITAOF_ReplySchema_items_1,
};

/* WAITAOF_ReplySchema reply schema */
struct jsonObjectElement WAITAOF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Number of local and remote AOF files in sync."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=WAITAOF_ReplySchema_items,.length=2}},
};

struct jsonObject WAITAOF_ReplySchema = {WAITAOF_ReplySchema_elements,.length=5};

/********** GEOADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOADD history */
commandHistory GEOADD_History[] = {
{"6.2.0","Added the `CH`, `NX` and `XX` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOADD tips */
#define GEOADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOADD key specs */
keySpec GEOADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOADD condition argument table */
struct COMMAND_ARG GEOADD_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOADD data argument table */
struct COMMAND_ARG GEOADD_data_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOADD argument table */
struct COMMAND_ARG GEOADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOADD_condition_Subargs},
{MAKE_ARG("change",ARG_TYPE_PURE_TOKEN,-1,"CH",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,3,NULL),.subargs=GEOADD_data_Subargs},
};

/* GEOADD_ReplySchema reply schema */
struct jsonObjectElement GEOADD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="When used without optional arguments, the number of elements added to the sorted set (excluding score updates).  If the CH option is specified, the number of elements that were changed (added or updated)."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEOADD_ReplySchema = {GEOADD_ReplySchema_elements,.length=2};

/********** GEODIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEODIST history */
#define GEODIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEODIST tips */
#define GEODIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEODIST key specs */
keySpec GEODIST_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEODIST unit argument table */
struct COMMAND_ARG GEODIST_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEODIST argument table */
struct COMMAND_ARG GEODIST_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member2",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=GEODIST_unit_Subargs},
};

/* GEODIST_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GEODIST_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="one or both of elements are missing"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GEODIST_ReplySchema_oneOf_0 = {GEODIST_ReplySchema_oneOf_0_elements,.length=2};

/* GEODIST_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GEODIST_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="distance as a double (represented as a string) in the specified units"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="^[0-9]*(.[0-9]*)?$"},
};

struct jsonObject GEODIST_ReplySchema_oneOf_1 = {GEODIST_ReplySchema_oneOf_1_elements,.length=3};

/* GEODIST_ReplySchema_oneOf array reply schema */
struct jsonObject *GEODIST_ReplySchema_oneOf[] = {
&GEODIST_ReplySchema_oneOf_0,
&GEODIST_ReplySchema_oneOf_1,
};

/* GEODIST_ReplySchema reply schema */
struct jsonObjectElement GEODIST_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEODIST_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GEODIST_ReplySchema = {GEODIST_ReplySchema_elements,.length=1};

/********** GEOHASH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOHASH history */
#define GEOHASH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOHASH tips */
#define GEOHASH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOHASH key specs */
keySpec GEOHASH_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOHASH argument table */
struct COMMAND_ARG GEOHASH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* GEOHASH_ReplySchema_items reply schema */
struct jsonObjectElement GEOHASH_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEOHASH_ReplySchema_items = {GEOHASH_ReplySchema_items_elements,.length=1};

/* GEOHASH_ReplySchema reply schema */
struct jsonObjectElement GEOHASH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="An array where each element is the Geohash corresponding to each member name passed as argument to the command."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEOHASH_ReplySchema_items},
};

struct jsonObject GEOHASH_ReplySchema = {GEOHASH_ReplySchema_elements,.length=3};

/********** GEOPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOPOS history */
#define GEOPOS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOPOS tips */
#define GEOPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOPOS key specs */
keySpec GEOPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOPOS argument table */
struct COMMAND_ARG GEOPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* GEOPOS_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Element does not exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GEOPOS_ReplySchema_items_oneOf_0 = {GEOPOS_ReplySchema_items_oneOf_0_elements,.length=2};

/* GEOPOS_ReplySchema_items_oneOf_1_items_0 reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_items_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEOPOS_ReplySchema_items_oneOf_1_items_0 = {GEOPOS_ReplySchema_items_oneOf_1_items_0_elements,.length=2};

/* GEOPOS_ReplySchema_items_oneOf_1_items_1 reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_items_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEOPOS_ReplySchema_items_oneOf_1_items_1 = {GEOPOS_ReplySchema_items_oneOf_1_items_1_elements,.length=2};

/* GEOPOS_ReplySchema_items_oneOf_1_items array reply schema */
struct jsonObject *GEOPOS_ReplySchema_items_oneOf_1_items[] = {
&GEOPOS_ReplySchema_items_oneOf_1_items_0,
&GEOPOS_ReplySchema_items_oneOf_1_items_1,
};

/* GEOPOS_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEOPOS_ReplySchema_items_oneOf_1_items,.length=2}},
};

struct jsonObject GEOPOS_ReplySchema_items_oneOf_1 = {GEOPOS_ReplySchema_items_oneOf_1_elements,.length=4};

/* GEOPOS_ReplySchema_items_oneOf array reply schema */
struct jsonObject *GEOPOS_ReplySchema_items_oneOf[] = {
&GEOPOS_ReplySchema_items_oneOf_0,
&GEOPOS_ReplySchema_items_oneOf_1,
};

/* GEOPOS_ReplySchema_items reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEOPOS_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject GEOPOS_ReplySchema_items = {GEOPOS_ReplySchema_items_elements,.length=1};

/* GEOPOS_ReplySchema reply schema */
struct jsonObjectElement GEOPOS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="An array where each element is a two elements array representing longitude and latitude (x,y) of each member name passed as argument to the command"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEOPOS_ReplySchema_items},
};

struct jsonObject GEOPOS_ReplySchema = {GEOPOS_ReplySchema_elements,.length=3};

/********** GEORADIUS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUS history */
commandHistory GEORADIUS_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUS tips */
#define GEORADIUS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUS key specs */
keySpec GEORADIUS_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STORE",6},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STOREDIST",6},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUS unit argument table */
struct COMMAND_ARG GEORADIUS_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS count_block argument table */
struct COMMAND_ARG GEORADIUS_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUS order argument table */
struct COMMAND_ARG GEORADIUS_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS store argument table */
struct COMMAND_ARG GEORADIUS_store_Subargs[] = {
{MAKE_ARG("storekey",ARG_TYPE_KEY,1,"STORE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
{MAKE_ARG("storedistkey",ARG_TYPE_KEY,2,"STOREDIST",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
};

/* GEORADIUS argument table */
struct COMMAND_ARG GEORADIUS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUS_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_order_Subargs},
{MAKE_ARG("store",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_store_Subargs},
};

/* GEORADIUS_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_0_items = {GEORADIUS_ReplySchema_anyOf_0_items_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no WITH* option is specified, array of matched members names"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUS_ReplySchema_anyOf_0_items},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_0 = {GEORADIUS_ReplySchema_anyOf_0_elements,.length=3};

/* GEORADIUS_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Matched member name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_items_0 = {GEORADIUS_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *GEORADIUS_ReplySchema_anyOf_1_items_items[] = {
&GEORADIUS_ReplySchema_anyOf_1_items_items_0,
};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHHASH option is specified, the geohash integer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items array reply schema */
struct jsonObject *GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items[] = {
&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0,
&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1,
};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items,.length=2}},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements,.length=5};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf array reply schema */
struct jsonObject *GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf[] = {
&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_0,
&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_1,
&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf_2,
};

/* GEORADIUS_ReplySchema_anyOf_1_items_additionalItems reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_oneOf,.length=3}},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items_additionalItems = {GEORADIUS_ReplySchema_anyOf_1_items_additionalItems_elements,.length=1};

/* GEORADIUS_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUS_ReplySchema_anyOf_1_items_items,.length=1}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&GEORADIUS_ReplySchema_anyOf_1_items_additionalItems},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1_items = {GEORADIUS_ReplySchema_anyOf_1_items_elements,.length=5};

/* GEORADIUS_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUS_ReplySchema_anyOf_1_items},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_1 = {GEORADIUS_ReplySchema_anyOf_1_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of items stored in key"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUS_ReplySchema_anyOf_2 = {GEORADIUS_ReplySchema_anyOf_2_elements,.length=2};

/* GEORADIUS_ReplySchema_anyOf array reply schema */
struct jsonObject *GEORADIUS_ReplySchema_anyOf[] = {
&GEORADIUS_ReplySchema_anyOf_0,
&GEORADIUS_ReplySchema_anyOf_1,
&GEORADIUS_ReplySchema_anyOf_2,
};

/* GEORADIUS_ReplySchema reply schema */
struct jsonObjectElement GEORADIUS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of matched members information"},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=GEORADIUS_ReplySchema_anyOf,.length=3}},
};

struct jsonObject GEORADIUS_ReplySchema = {GEORADIUS_ReplySchema_elements,.length=2};

/********** GEORADIUSBYMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUSBYMEMBER history */
commandHistory GEORADIUSBYMEMBER_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUSBYMEMBER tips */
#define GEORADIUSBYMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUSBYMEMBER key specs */
keySpec GEORADIUSBYMEMBER_Keyspecs[3] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STORE",5},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_KEYWORD,.bs.keyword={"STOREDIST",5},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUSBYMEMBER unit argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER count_block argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUSBYMEMBER order argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER store argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_store_Subargs[] = {
{MAKE_ARG("storekey",ARG_TYPE_KEY,1,"STORE",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
{MAKE_ARG("storedistkey",ARG_TYPE_KEY,2,"STOREDIST",NULL,NULL,CMD_ARG_NONE,0,NULL),.display_text="key"},
};

/* GEORADIUSBYMEMBER argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUSBYMEMBER_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_order_Subargs},
{MAKE_ARG("store",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_store_Subargs},
};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_0_items = {GEORADIUSBYMEMBER_ReplySchema_anyOf_0_items_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no WITH* option is specified, array of matched members names"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUSBYMEMBER_ReplySchema_anyOf_0_items},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_0 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_0_elements,.length=3};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Matched member name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items_0 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items[] = {
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items_0,
};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHHASH option is specified, the geohash integer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items[] = {
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0,
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1,
};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items,.length=2}},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements,.length=5};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf[] = {
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_0,
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_1,
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf_2,
};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_oneOf,.length=3}},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems_elements,.length=1};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_items,.length=1}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_additionalItems},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items_elements,.length=5};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUSBYMEMBER_ReplySchema_anyOf_1_items},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_1 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_1_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of items stored in key"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema_anyOf_2 = {GEORADIUSBYMEMBER_ReplySchema_anyOf_2_elements,.length=2};

/* GEORADIUSBYMEMBER_ReplySchema_anyOf array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_ReplySchema_anyOf[] = {
&GEORADIUSBYMEMBER_ReplySchema_anyOf_0,
&GEORADIUSBYMEMBER_ReplySchema_anyOf_1,
&GEORADIUSBYMEMBER_ReplySchema_anyOf_2,
};

/* GEORADIUSBYMEMBER_ReplySchema reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of matched members information"},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=GEORADIUSBYMEMBER_ReplySchema_anyOf,.length=3}},
};

struct jsonObject GEORADIUSBYMEMBER_ReplySchema = {GEORADIUSBYMEMBER_ReplySchema_elements,.length=2};

/********** GEORADIUSBYMEMBER_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUSBYMEMBER_RO history */
commandHistory GEORADIUSBYMEMBER_RO_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUSBYMEMBER_RO tips */
#define GEORADIUSBYMEMBER_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUSBYMEMBER_RO key specs */
keySpec GEORADIUSBYMEMBER_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUSBYMEMBER_RO unit argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO count_block argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO order argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUSBYMEMBER_RO argument table */
struct COMMAND_ARG GEORADIUSBYMEMBER_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUSBYMEMBER_RO_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_RO_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUSBYMEMBER_RO_order_Subargs},
};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_items = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_items_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no WITH* option is specified, array of matched members names"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_items},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0_elements,.length=3};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Matched member name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items_0 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items[] = {
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items_0,
};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHHASH option is specified, the geohash integer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items[] = {
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0,
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1,
};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items,.length=2}},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements,.length=5};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf[] = {
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0,
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1,
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2,
};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf,.length=3}},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems_elements,.length=1};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_items,.length=1}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_additionalItems},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items_elements,.length=5};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_items},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1 = {GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1_elements,.length=2};

/* GEORADIUSBYMEMBER_RO_ReplySchema_anyOf array reply schema */
struct jsonObject *GEORADIUSBYMEMBER_RO_ReplySchema_anyOf[] = {
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_0,
&GEORADIUSBYMEMBER_RO_ReplySchema_anyOf_1,
};

/* GEORADIUSBYMEMBER_RO_ReplySchema reply schema */
struct jsonObjectElement GEORADIUSBYMEMBER_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of matched members information"},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=GEORADIUSBYMEMBER_RO_ReplySchema_anyOf,.length=2}},
};

struct jsonObject GEORADIUSBYMEMBER_RO_ReplySchema = {GEORADIUSBYMEMBER_RO_ReplySchema_elements,.length=2};

/********** GEORADIUS_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEORADIUS_RO history */
commandHistory GEORADIUS_RO_History[] = {
{"6.2.0","Added the `ANY` option for `COUNT`."},
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEORADIUS_RO tips */
#define GEORADIUS_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEORADIUS_RO key specs */
keySpec GEORADIUS_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEORADIUS_RO unit argument table */
struct COMMAND_ARG GEORADIUS_RO_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS_RO count_block argument table */
struct COMMAND_ARG GEORADIUS_RO_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEORADIUS_RO order argument table */
struct COMMAND_ARG GEORADIUS_RO_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEORADIUS_RO argument table */
struct COMMAND_ARG GEORADIUS_RO_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEORADIUS_RO_unit_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_RO_count_block_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEORADIUS_RO_order_Subargs},
};

/* GEORADIUS_RO_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_0_items = {GEORADIUS_RO_ReplySchema_anyOf_0_items_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no WITH* option is specified, array of matched members names"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUS_RO_ReplySchema_anyOf_0_items},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_0 = {GEORADIUS_RO_ReplySchema_anyOf_0_elements,.length=3};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Matched member name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_items_0 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *GEORADIUS_RO_ReplySchema_anyOf_1_items_items[] = {
&GEORADIUS_RO_ReplySchema_anyOf_1_items_items_0,
};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHHASH option is specified, the geohash integer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items array reply schema */
struct jsonObject *GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items[] = {
&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0,
&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1,
};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items,.length=2}},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements,.length=5};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf array reply schema */
struct jsonObject *GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf[] = {
&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_0,
&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_1,
&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf_2,
};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_oneOf,.length=3}},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems = {GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems_elements,.length=1};

/* GEORADIUS_RO_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEORADIUS_RO_ReplySchema_anyOf_1_items_items,.length=1}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&GEORADIUS_RO_ReplySchema_anyOf_1_items_additionalItems},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1_items = {GEORADIUS_RO_ReplySchema_anyOf_1_items_elements,.length=5};

/* GEORADIUS_RO_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEORADIUS_RO_ReplySchema_anyOf_1_items},
};

struct jsonObject GEORADIUS_RO_ReplySchema_anyOf_1 = {GEORADIUS_RO_ReplySchema_anyOf_1_elements,.length=2};

/* GEORADIUS_RO_ReplySchema_anyOf array reply schema */
struct jsonObject *GEORADIUS_RO_ReplySchema_anyOf[] = {
&GEORADIUS_RO_ReplySchema_anyOf_0,
&GEORADIUS_RO_ReplySchema_anyOf_1,
};

/* GEORADIUS_RO_ReplySchema reply schema */
struct jsonObjectElement GEORADIUS_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of matched members information"},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=GEORADIUS_RO_ReplySchema_anyOf,.length=2}},
};

struct jsonObject GEORADIUS_RO_ReplySchema = {GEORADIUS_RO_ReplySchema_elements,.length=2};

/********** GEOSEARCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOSEARCH history */
commandHistory GEOSEARCH_History[] = {
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOSEARCH tips */
#define GEOSEARCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOSEARCH key specs */
keySpec GEOSEARCH_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOSEARCH from fromlonlat argument table */
struct COMMAND_ARG GEOSEARCH_from_fromlonlat_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH from argument table */
struct COMMAND_ARG GEOSEARCH_from_Subargs[] = {
{MAKE_ARG("member",ARG_TYPE_STRING,-1,"FROMMEMBER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fromlonlat",ARG_TYPE_BLOCK,-1,"FROMLONLAT",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_from_fromlonlat_Subargs},
};

/* GEOSEARCH by circle unit argument table */
struct COMMAND_ARG GEOSEARCH_by_circle_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH by circle argument table */
struct COMMAND_ARG GEOSEARCH_by_circle_Subargs[] = {
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,"BYRADIUS",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCH_by_circle_unit_Subargs},
};

/* GEOSEARCH by box unit argument table */
struct COMMAND_ARG GEOSEARCH_by_box_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH by box argument table */
struct COMMAND_ARG GEOSEARCH_by_box_Subargs[] = {
{MAKE_ARG("width",ARG_TYPE_DOUBLE,-1,"BYBOX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("height",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCH_by_box_unit_Subargs},
};

/* GEOSEARCH by argument table */
struct COMMAND_ARG GEOSEARCH_by_Subargs[] = {
{MAKE_ARG("circle",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_by_circle_Subargs},
{MAKE_ARG("box",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=GEOSEARCH_by_box_Subargs},
};

/* GEOSEARCH order argument table */
struct COMMAND_ARG GEOSEARCH_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCH count_block argument table */
struct COMMAND_ARG GEOSEARCH_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCH argument table */
struct COMMAND_ARG GEOSEARCH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("from",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_from_Subargs},
{MAKE_ARG("by",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCH_by_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCH_order_Subargs},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCH_count_block_Subargs},
{MAKE_ARG("withcoord",ARG_TYPE_PURE_TOKEN,-1,"WITHCOORD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withdist",ARG_TYPE_PURE_TOKEN,-1,"WITHDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withhash",ARG_TYPE_PURE_TOKEN,-1,"WITHHASH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCH_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_0_items = {GEOSEARCH_ReplySchema_anyOf_0_items_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no WITH* option is specified, array of matched members names"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEOSEARCH_ReplySchema_anyOf_0_items},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_0 = {GEOSEARCH_ReplySchema_anyOf_0_elements,.length=3};

/* GEOSEARCH_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Matched member name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_items_0 = {GEOSEARCH_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *GEOSEARCH_ReplySchema_anyOf_1_items_items[] = {
&GEOSEARCH_ReplySchema_anyOf_1_items_items_0,
};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_0 = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_0_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHHASH option is specified, the geohash integer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_1 = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_1_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latitude (x)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0 = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="longitude (y)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1 = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items array reply schema */
struct jsonObject *GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items[] = {
&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_0,
&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items_1,
};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_items,.length=2}},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2 = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2_elements,.length=5};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf array reply schema */
struct jsonObject *GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf[] = {
&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_0,
&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_1,
&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf_2,
};

/* GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_oneOf,.length=3}},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems = {GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems_elements,.length=1};

/* GEOSEARCH_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=GEOSEARCH_ReplySchema_anyOf_1_items_items,.length=1}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&GEOSEARCH_ReplySchema_anyOf_1_items_additionalItems},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1_items = {GEOSEARCH_ReplySchema_anyOf_1_items_elements,.length=5};

/* GEOSEARCH_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&GEOSEARCH_ReplySchema_anyOf_1_items},
};

struct jsonObject GEOSEARCH_ReplySchema_anyOf_1 = {GEOSEARCH_ReplySchema_anyOf_1_elements,.length=2};

/* GEOSEARCH_ReplySchema_anyOf array reply schema */
struct jsonObject *GEOSEARCH_ReplySchema_anyOf[] = {
&GEOSEARCH_ReplySchema_anyOf_0,
&GEOSEARCH_ReplySchema_anyOf_1,
};

/* GEOSEARCH_ReplySchema reply schema */
struct jsonObjectElement GEOSEARCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of matched members information"},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=GEOSEARCH_ReplySchema_anyOf,.length=2}},
};

struct jsonObject GEOSEARCH_ReplySchema = {GEOSEARCH_ReplySchema_elements,.length=2};

/********** GEOSEARCHSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GEOSEARCHSTORE history */
commandHistory GEOSEARCHSTORE_History[] = {
{"7.0.0","Added support for uppercase unit names."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GEOSEARCHSTORE tips */
#define GEOSEARCHSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GEOSEARCHSTORE key specs */
keySpec GEOSEARCHSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GEOSEARCHSTORE from fromlonlat argument table */
struct COMMAND_ARG GEOSEARCHSTORE_from_fromlonlat_Subargs[] = {
{MAKE_ARG("longitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("latitude",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE from argument table */
struct COMMAND_ARG GEOSEARCHSTORE_from_Subargs[] = {
{MAKE_ARG("member",ARG_TYPE_STRING,-1,"FROMMEMBER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("fromlonlat",ARG_TYPE_BLOCK,-1,"FROMLONLAT",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_from_fromlonlat_Subargs},
};

/* GEOSEARCHSTORE by circle unit argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_circle_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE by circle argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_circle_Subargs[] = {
{MAKE_ARG("radius",ARG_TYPE_DOUBLE,-1,"BYRADIUS",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCHSTORE_by_circle_unit_Subargs},
};

/* GEOSEARCHSTORE by box unit argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_box_unit_Subargs[] = {
{MAKE_ARG("m",ARG_TYPE_PURE_TOKEN,-1,"M",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("km",ARG_TYPE_PURE_TOKEN,-1,"KM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ft",ARG_TYPE_PURE_TOKEN,-1,"FT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("mi",ARG_TYPE_PURE_TOKEN,-1,"MI",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE by box argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_box_Subargs[] = {
{MAKE_ARG("width",ARG_TYPE_DOUBLE,-1,"BYBOX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("height",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unit",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=GEOSEARCHSTORE_by_box_unit_Subargs},
};

/* GEOSEARCHSTORE by argument table */
struct COMMAND_ARG GEOSEARCHSTORE_by_Subargs[] = {
{MAKE_ARG("circle",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_by_circle_Subargs},
{MAKE_ARG("box",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=GEOSEARCHSTORE_by_box_Subargs},
};

/* GEOSEARCHSTORE order argument table */
struct COMMAND_ARG GEOSEARCHSTORE_order_Subargs[] = {
{MAKE_ARG("asc",ARG_TYPE_PURE_TOKEN,-1,"ASC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("desc",ARG_TYPE_PURE_TOKEN,-1,"DESC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GEOSEARCHSTORE count_block argument table */
struct COMMAND_ARG GEOSEARCHSTORE_count_block_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("any",ARG_TYPE_PURE_TOKEN,-1,"ANY",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCHSTORE argument table */
struct COMMAND_ARG GEOSEARCHSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("source",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("from",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_from_Subargs},
{MAKE_ARG("by",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=GEOSEARCHSTORE_by_Subargs},
{MAKE_ARG("order",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCHSTORE_order_Subargs},
{MAKE_ARG("count-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=GEOSEARCHSTORE_count_block_Subargs},
{MAKE_ARG("storedist",ARG_TYPE_PURE_TOKEN,-1,"STOREDIST",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* GEOSEARCHSTORE_ReplySchema reply schema */
struct jsonObjectElement GEOSEARCHSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of elements in the resulting set"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject GEOSEARCHSTORE_ReplySchema = {GEOSEARCHSTORE_ReplySchema_elements,.length=2};

/********** HDEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HDEL history */
commandHistory HDEL_History[] = {
{"2.4.0","Accepts multiple `field` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HDEL tips */
#define HDEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HDEL key specs */
keySpec HDEL_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HDEL argument table */
struct COMMAND_ARG HDEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HDEL_ReplySchema reply schema */
struct jsonObjectElement HDEL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The number of fields that were removed from the hash."},
};

struct jsonObject HDEL_ReplySchema = {HDEL_ReplySchema_elements,.length=2};

/********** HEXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HEXISTS history */
#define HEXISTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HEXISTS tips */
#define HEXISTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HEXISTS key specs */
keySpec HEXISTS_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HEXISTS argument table */
struct COMMAND_ARG HEXISTS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HEXISTS_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HEXISTS_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The hash does not contain the field, or key does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject HEXISTS_ReplySchema_oneOf_0 = {HEXISTS_ReplySchema_oneOf_0_elements,.length=2};

/* HEXISTS_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HEXISTS_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The hash contains the field."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HEXISTS_ReplySchema_oneOf_1 = {HEXISTS_ReplySchema_oneOf_1_elements,.length=2};

/* HEXISTS_ReplySchema_oneOf array reply schema */
struct jsonObject *HEXISTS_ReplySchema_oneOf[] = {
&HEXISTS_ReplySchema_oneOf_0,
&HEXISTS_ReplySchema_oneOf_1,
};

/* HEXISTS_ReplySchema reply schema */
struct jsonObjectElement HEXISTS_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXISTS_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HEXISTS_ReplySchema = {HEXISTS_ReplySchema_elements,.length=1};

/********** HEXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HEXPIRE history */
#define HEXPIRE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HEXPIRE tips */
#define HEXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HEXPIRE key specs */
keySpec HEXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HEXPIRE condition argument table */
struct COMMAND_ARG HEXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HEXPIRE argument table */
struct COMMAND_ARG HEXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=HEXPIRE_condition_Subargs},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HEXPIRE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_0 = {HEXPIRE_ReplySchema_oneOf_0_elements,.length=2};

/* HEXPIRE_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="he field does not exist."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1_items_oneOf_0 = {HEXPIRE_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HEXPIRE_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Specified NX | XX | GT | LT condition not met"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1_items_oneOf_1 = {HEXPIRE_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HEXPIRE_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration time was set or updated."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1_items_oneOf_2 = {HEXPIRE_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=2};

/* HEXPIRE_ReplySchema_oneOf_1_items_oneOf_3 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_items_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Field deleted because the specified expiration time is in the past."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1_items_oneOf_3 = {HEXPIRE_ReplySchema_oneOf_1_items_oneOf_3_elements,.length=2};

/* HEXPIRE_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HEXPIRE_ReplySchema_oneOf_1_items_oneOf[] = {
&HEXPIRE_ReplySchema_oneOf_1_items_oneOf_0,
&HEXPIRE_ReplySchema_oneOf_1_items_oneOf_1,
&HEXPIRE_ReplySchema_oneOf_1_items_oneOf_2,
&HEXPIRE_ReplySchema_oneOf_1_items_oneOf_3,
};

/* HEXPIRE_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIRE_ReplySchema_oneOf_1_items_oneOf,.length=4}},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1_items = {HEXPIRE_ReplySchema_oneOf_1_items_elements,.length=1};

/* HEXPIRE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HEXPIRE_ReplySchema_oneOf_1_items},
};

struct jsonObject HEXPIRE_ReplySchema_oneOf_1 = {HEXPIRE_ReplySchema_oneOf_1_elements,.length=5};

/* HEXPIRE_ReplySchema_oneOf array reply schema */
struct jsonObject *HEXPIRE_ReplySchema_oneOf[] = {
&HEXPIRE_ReplySchema_oneOf_0,
&HEXPIRE_ReplySchema_oneOf_1,
};

/* HEXPIRE_ReplySchema reply schema */
struct jsonObjectElement HEXPIRE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIRE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HEXPIRE_ReplySchema = {HEXPIRE_ReplySchema_elements,.length=1};

/********** HEXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HEXPIREAT history */
#define HEXPIREAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HEXPIREAT tips */
#define HEXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HEXPIREAT key specs */
keySpec HEXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HEXPIREAT condition argument table */
struct COMMAND_ARG HEXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HEXPIREAT argument table */
struct COMMAND_ARG HEXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-seconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=HEXPIREAT_condition_Subargs},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HEXPIREAT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_0 = {HEXPIREAT_ReplySchema_oneOf_0_elements,.length=2};

/* HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0 = {HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Specified NX | XX | GT | LT condition not met"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1 = {HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration time was set or updated."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2 = {HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=2};

/* HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Field deleted because the specified expiration time is in the past."},
{JSON_TYPE_INTEGER,"const",.value.integer=2},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3 = {HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3_elements,.length=2};

/* HEXPIREAT_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HEXPIREAT_ReplySchema_oneOf_1_items_oneOf[] = {
&HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0,
&HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1,
&HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2,
&HEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3,
};

/* HEXPIREAT_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIREAT_ReplySchema_oneOf_1_items_oneOf,.length=4}},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1_items = {HEXPIREAT_ReplySchema_oneOf_1_items_elements,.length=1};

/* HEXPIREAT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HEXPIREAT_ReplySchema_oneOf_1_items},
};

struct jsonObject HEXPIREAT_ReplySchema_oneOf_1 = {HEXPIREAT_ReplySchema_oneOf_1_elements,.length=5};

/* HEXPIREAT_ReplySchema_oneOf array reply schema */
struct jsonObject *HEXPIREAT_ReplySchema_oneOf[] = {
&HEXPIREAT_ReplySchema_oneOf_0,
&HEXPIREAT_ReplySchema_oneOf_1,
};

/* HEXPIREAT_ReplySchema reply schema */
struct jsonObjectElement HEXPIREAT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIREAT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HEXPIREAT_ReplySchema = {HEXPIREAT_ReplySchema_elements,.length=1};

/********** HEXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HEXPIRETIME history */
#define HEXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HEXPIRETIME tips */
#define HEXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HEXPIRETIME key specs */
keySpec HEXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HEXPIRETIME argument table */
struct COMMAND_ARG HEXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HEXPIRETIME_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_0 = {HEXPIRETIME_ReplySchema_oneOf_0_elements,.length=2};

/* HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0 = {HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1 = {HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration Unix timestamp in seconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2 = {HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=3};

/* HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf[] = {
&HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0,
&HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1,
&HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2,
};

/* HEXPIRETIME_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIRETIME_ReplySchema_oneOf_1_items_oneOf,.length=3}},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_1_items = {HEXPIRETIME_ReplySchema_oneOf_1_items_elements,.length=1};

/* HEXPIRETIME_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HEXPIRETIME_ReplySchema_oneOf_1_items},
};

struct jsonObject HEXPIRETIME_ReplySchema_oneOf_1 = {HEXPIRETIME_ReplySchema_oneOf_1_elements,.length=5};

/* HEXPIRETIME_ReplySchema_oneOf array reply schema */
struct jsonObject *HEXPIRETIME_ReplySchema_oneOf[] = {
&HEXPIRETIME_ReplySchema_oneOf_0,
&HEXPIRETIME_ReplySchema_oneOf_1,
};

/* HEXPIRETIME_ReplySchema reply schema */
struct jsonObjectElement HEXPIRETIME_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HEXPIRETIME_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HEXPIRETIME_ReplySchema = {HEXPIRETIME_ReplySchema_elements,.length=1};

/********** HGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HGET history */
#define HGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HGET tips */
#define HGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HGET key specs */
keySpec HGET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HGET argument table */
struct COMMAND_ARG HGET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HGET_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HGET_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value associated with the field."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HGET_ReplySchema_oneOf_0 = {HGET_ReplySchema_oneOf_0_elements,.length=2};

/* HGET_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HGET_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If the field is not present in the hash or key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HGET_ReplySchema_oneOf_1 = {HGET_ReplySchema_oneOf_1_elements,.length=2};

/* HGET_ReplySchema_oneOf array reply schema */
struct jsonObject *HGET_ReplySchema_oneOf[] = {
&HGET_ReplySchema_oneOf_0,
&HGET_ReplySchema_oneOf_1,
};

/* HGET_ReplySchema reply schema */
struct jsonObjectElement HGET_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HGET_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HGET_ReplySchema = {HGET_ReplySchema_elements,.length=1};

/********** HGETALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HGETALL history */
#define HGETALL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HGETALL tips */
const char *HGETALL_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HGETALL key specs */
keySpec HGETALL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HGETALL argument table */
struct COMMAND_ARG HGETALL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HGETALL_ReplySchema_additionalProperties reply schema */
struct jsonObjectElement HGETALL_ReplySchema_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HGETALL_ReplySchema_additionalProperties = {HGETALL_ReplySchema_additionalProperties_elements,.length=1};

/* HGETALL_ReplySchema reply schema */
struct jsonObjectElement HGETALL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_STRING,"description",.value.string="Map of fields and their values stored in the hash, or an empty list when key does not exist. In RESP2 this is returned as a flat array."},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&HGETALL_ReplySchema_additionalProperties},
};

struct jsonObject HGETALL_ReplySchema = {HGETALL_ReplySchema_elements,.length=3};

/********** HINCRBY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HINCRBY history */
#define HINCRBY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HINCRBY tips */
#define HINCRBY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HINCRBY key specs */
keySpec HINCRBY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HINCRBY argument table */
struct COMMAND_ARG HINCRBY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HINCRBY_ReplySchema reply schema */
struct jsonObjectElement HINCRBY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The value of the field after the increment operation."},
};

struct jsonObject HINCRBY_ReplySchema = {HINCRBY_ReplySchema_elements,.length=2};

/********** HINCRBYFLOAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HINCRBYFLOAT history */
#define HINCRBYFLOAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HINCRBYFLOAT tips */
#define HINCRBYFLOAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HINCRBYFLOAT key specs */
keySpec HINCRBYFLOAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HINCRBYFLOAT argument table */
struct COMMAND_ARG HINCRBYFLOAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HINCRBYFLOAT_ReplySchema reply schema */
struct jsonObjectElement HINCRBYFLOAT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The value of the field after the increment operation."},
};

struct jsonObject HINCRBYFLOAT_ReplySchema = {HINCRBYFLOAT_ReplySchema_elements,.length=2};

/********** HKEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HKEYS history */
#define HKEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HKEYS tips */
const char *HKEYS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HKEYS key specs */
keySpec HKEYS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HKEYS argument table */
struct COMMAND_ARG HKEYS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HKEYS_ReplySchema_items reply schema */
struct jsonObjectElement HKEYS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HKEYS_ReplySchema_items = {HKEYS_ReplySchema_items_elements,.length=1};

/* HKEYS_ReplySchema reply schema */
struct jsonObjectElement HKEYS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of fields in the hash, or an empty list when the key does not exist."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&HKEYS_ReplySchema_items},
};

struct jsonObject HKEYS_ReplySchema = {HKEYS_ReplySchema_elements,.length=4};

/********** HLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HLEN history */
#define HLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HLEN tips */
#define HLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HLEN key specs */
keySpec HLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HLEN argument table */
struct COMMAND_ARG HLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HLEN_ReplySchema reply schema */
struct jsonObjectElement HLEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of the fields in the hash, or 0 when the key does not exist."},
};

struct jsonObject HLEN_ReplySchema = {HLEN_ReplySchema_elements,.length=2};

/********** HMGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HMGET history */
#define HMGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HMGET tips */
#define HMGET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HMGET key specs */
keySpec HMGET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HMGET argument table */
struct COMMAND_ARG HMGET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HMGET_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement HMGET_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HMGET_ReplySchema_items_oneOf_0 = {HMGET_ReplySchema_items_oneOf_0_elements,.length=1};

/* HMGET_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement HMGET_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HMGET_ReplySchema_items_oneOf_1 = {HMGET_ReplySchema_items_oneOf_1_elements,.length=1};

/* HMGET_ReplySchema_items_oneOf array reply schema */
struct jsonObject *HMGET_ReplySchema_items_oneOf[] = {
&HMGET_ReplySchema_items_oneOf_0,
&HMGET_ReplySchema_items_oneOf_1,
};

/* HMGET_ReplySchema_items reply schema */
struct jsonObjectElement HMGET_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HMGET_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject HMGET_ReplySchema_items = {HMGET_ReplySchema_items_elements,.length=1};

/* HMGET_ReplySchema reply schema */
struct jsonObjectElement HMGET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of values associated with the given fields, in the same order as they are requested."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&HMGET_ReplySchema_items},
};

struct jsonObject HMGET_ReplySchema = {HMGET_ReplySchema_elements,.length=4};

/********** HMSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HMSET history */
#define HMSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HMSET tips */
#define HMSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HMSET key specs */
keySpec HMSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HMSET data argument table */
struct COMMAND_ARG HMSET_data_Subargs[] = {
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HMSET argument table */
struct COMMAND_ARG HMSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=HMSET_data_Subargs},
};

/* HMSET_ReplySchema reply schema */
struct jsonObjectElement HMSET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject HMSET_ReplySchema = {HMSET_ReplySchema_elements,.length=1};

/********** HPERSIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HPERSIST history */
#define HPERSIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HPERSIST tips */
#define HPERSIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HPERSIST key specs */
keySpec HPERSIST_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HPERSIST argument table */
struct COMMAND_ARG HPERSIST_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HPERSIST_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HPERSIST_ReplySchema_oneOf_0 = {HPERSIST_ReplySchema_oneOf_0_elements,.length=2};

/* HPERSIST_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HPERSIST_ReplySchema_oneOf_1_items_0 = {HPERSIST_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* HPERSIST_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject HPERSIST_ReplySchema_oneOf_1_items_1 = {HPERSIST_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* HPERSIST_ReplySchema_oneOf_1_items_2 reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration time was removed"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HPERSIST_ReplySchema_oneOf_1_items_2 = {HPERSIST_ReplySchema_oneOf_1_items_2_elements,.length=2};

/* HPERSIST_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *HPERSIST_ReplySchema_oneOf_1_items[] = {
&HPERSIST_ReplySchema_oneOf_1_items_0,
&HPERSIST_ReplySchema_oneOf_1_items_1,
&HPERSIST_ReplySchema_oneOf_1_items_2,
};

/* HPERSIST_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=HPERSIST_ReplySchema_oneOf_1_items,.length=3}},
};

struct jsonObject HPERSIST_ReplySchema_oneOf_1 = {HPERSIST_ReplySchema_oneOf_1_elements,.length=5};

/* HPERSIST_ReplySchema_oneOf array reply schema */
struct jsonObject *HPERSIST_ReplySchema_oneOf[] = {
&HPERSIST_ReplySchema_oneOf_0,
&HPERSIST_ReplySchema_oneOf_1,
};

/* HPERSIST_ReplySchema reply schema */
struct jsonObjectElement HPERSIST_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPERSIST_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HPERSIST_ReplySchema = {HPERSIST_ReplySchema_elements,.length=1};

/********** HPEXPIRE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HPEXPIRE history */
#define HPEXPIRE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HPEXPIRE tips */
#define HPEXPIRE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HPEXPIRE key specs */
keySpec HPEXPIRE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HPEXPIRE condition argument table */
struct COMMAND_ARG HPEXPIRE_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HPEXPIRE argument table */
struct COMMAND_ARG HPEXPIRE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=HPEXPIRE_condition_Subargs},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HPEXPIRE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_0 = {HPEXPIRE_ReplySchema_oneOf_0_elements,.length=2};

/* HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_0 = {HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Specified NX | XX | GT | LT condition not met"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_1 = {HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration time was set or updated."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_2 = {HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=2};

/* HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_3 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Field deleted because the specified expiration time is in the past."},
{JSON_TYPE_INTEGER,"const",.value.integer=2},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_3 = {HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_3_elements,.length=2};

/* HPEXPIRE_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HPEXPIRE_ReplySchema_oneOf_1_items_oneOf[] = {
&HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_0,
&HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_1,
&HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_2,
&HPEXPIRE_ReplySchema_oneOf_1_items_oneOf_3,
};

/* HPEXPIRE_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIRE_ReplySchema_oneOf_1_items_oneOf,.length=4}},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1_items = {HPEXPIRE_ReplySchema_oneOf_1_items_elements,.length=1};

/* HPEXPIRE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HPEXPIRE_ReplySchema_oneOf_1_items},
};

struct jsonObject HPEXPIRE_ReplySchema_oneOf_1 = {HPEXPIRE_ReplySchema_oneOf_1_elements,.length=5};

/* HPEXPIRE_ReplySchema_oneOf array reply schema */
struct jsonObject *HPEXPIRE_ReplySchema_oneOf[] = {
&HPEXPIRE_ReplySchema_oneOf_0,
&HPEXPIRE_ReplySchema_oneOf_1,
};

/* HPEXPIRE_ReplySchema reply schema */
struct jsonObjectElement HPEXPIRE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIRE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HPEXPIRE_ReplySchema = {HPEXPIRE_ReplySchema_elements,.length=1};

/********** HPEXPIREAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HPEXPIREAT history */
#define HPEXPIREAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HPEXPIREAT tips */
#define HPEXPIREAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HPEXPIREAT key specs */
keySpec HPEXPIREAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HPEXPIREAT condition argument table */
struct COMMAND_ARG HPEXPIREAT_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HPEXPIREAT argument table */
struct COMMAND_ARG HPEXPIREAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=HPEXPIREAT_condition_Subargs},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HPEXPIREAT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_0 = {HPEXPIREAT_ReplySchema_oneOf_0_elements,.length=2};

/* HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0 = {HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Specified NX | XX | GT | LT condition not met"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1 = {HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration time was set or updated."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2 = {HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=2};

/* HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Field deleted because the specified expiration time is in the past."},
{JSON_TYPE_INTEGER,"const",.value.integer=2},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3 = {HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3_elements,.length=2};

/* HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf[] = {
&HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_0,
&HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_1,
&HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_2,
&HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf_3,
};

/* HPEXPIREAT_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIREAT_ReplySchema_oneOf_1_items_oneOf,.length=4}},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1_items = {HPEXPIREAT_ReplySchema_oneOf_1_items_elements,.length=1};

/* HPEXPIREAT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HPEXPIREAT_ReplySchema_oneOf_1_items},
};

struct jsonObject HPEXPIREAT_ReplySchema_oneOf_1 = {HPEXPIREAT_ReplySchema_oneOf_1_elements,.length=5};

/* HPEXPIREAT_ReplySchema_oneOf array reply schema */
struct jsonObject *HPEXPIREAT_ReplySchema_oneOf[] = {
&HPEXPIREAT_ReplySchema_oneOf_0,
&HPEXPIREAT_ReplySchema_oneOf_1,
};

/* HPEXPIREAT_ReplySchema reply schema */
struct jsonObjectElement HPEXPIREAT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIREAT_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HPEXPIREAT_ReplySchema = {HPEXPIREAT_ReplySchema_elements,.length=1};

/********** HPEXPIRETIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HPEXPIRETIME history */
#define HPEXPIRETIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HPEXPIRETIME tips */
#define HPEXPIRETIME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HPEXPIRETIME key specs */
keySpec HPEXPIRETIME_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HPEXPIRETIME argument table */
struct COMMAND_ARG HPEXPIRETIME_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HPEXPIRETIME_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_0 = {HPEXPIRETIME_ReplySchema_oneOf_0_elements,.length=2};

/* HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0 = {HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1 = {HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Expiration Unix timestamp in milliseconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2 = {HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=3};

/* HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf[] = {
&HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_0,
&HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_1,
&HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf_2,
};

/* HPEXPIRETIME_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIRETIME_ReplySchema_oneOf_1_items_oneOf,.length=3}},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_1_items = {HPEXPIRETIME_ReplySchema_oneOf_1_items_elements,.length=1};

/* HPEXPIRETIME_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The keyname, popped member, and its score."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HPEXPIRETIME_ReplySchema_oneOf_1_items},
};

struct jsonObject HPEXPIRETIME_ReplySchema_oneOf_1 = {HPEXPIRETIME_ReplySchema_oneOf_1_elements,.length=5};

/* HPEXPIRETIME_ReplySchema_oneOf array reply schema */
struct jsonObject *HPEXPIRETIME_ReplySchema_oneOf[] = {
&HPEXPIRETIME_ReplySchema_oneOf_0,
&HPEXPIRETIME_ReplySchema_oneOf_1,
};

/* HPEXPIRETIME_ReplySchema reply schema */
struct jsonObjectElement HPEXPIRETIME_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPEXPIRETIME_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HPEXPIRETIME_ReplySchema = {HPEXPIRETIME_ReplySchema_elements,.length=1};

/********** HPTTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HPTTL history */
#define HPTTL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HPTTL tips */
#define HPTTL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HPTTL key specs */
keySpec HPTTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HPTTL argument table */
struct COMMAND_ARG HPTTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HPTTL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HPTTL_ReplySchema_oneOf_0 = {HPTTL_ReplySchema_oneOf_0_elements,.length=2};

/* HPTTL_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HPTTL_ReplySchema_oneOf_1_items_oneOf_0 = {HPTTL_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HPTTL_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject HPTTL_ReplySchema_oneOf_1_items_oneOf_1 = {HPTTL_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HPTTL_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="TTL in milliseconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject HPTTL_ReplySchema_oneOf_1_items_oneOf_2 = {HPTTL_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=3};

/* HPTTL_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HPTTL_ReplySchema_oneOf_1_items_oneOf[] = {
&HPTTL_ReplySchema_oneOf_1_items_oneOf_0,
&HPTTL_ReplySchema_oneOf_1_items_oneOf_1,
&HPTTL_ReplySchema_oneOf_1_items_oneOf_2,
};

/* HPTTL_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPTTL_ReplySchema_oneOf_1_items_oneOf,.length=3}},
};

struct jsonObject HPTTL_ReplySchema_oneOf_1_items = {HPTTL_ReplySchema_oneOf_1_items_elements,.length=1};

/* HPTTL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HPTTL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The keyname, popped member, and its score."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HPTTL_ReplySchema_oneOf_1_items},
};

struct jsonObject HPTTL_ReplySchema_oneOf_1 = {HPTTL_ReplySchema_oneOf_1_elements,.length=5};

/* HPTTL_ReplySchema_oneOf array reply schema */
struct jsonObject *HPTTL_ReplySchema_oneOf[] = {
&HPTTL_ReplySchema_oneOf_0,
&HPTTL_ReplySchema_oneOf_1,
};

/* HPTTL_ReplySchema reply schema */
struct jsonObjectElement HPTTL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HPTTL_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HPTTL_ReplySchema = {HPTTL_ReplySchema_elements,.length=1};

/********** HRANDFIELD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HRANDFIELD history */
#define HRANDFIELD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HRANDFIELD tips */
const char *HRANDFIELD_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HRANDFIELD key specs */
keySpec HRANDFIELD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HRANDFIELD options argument table */
struct COMMAND_ARG HRANDFIELD_options_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withvalues",ARG_TYPE_PURE_TOKEN,-1,"WITHVALUES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* HRANDFIELD argument table */
struct COMMAND_ARG HRANDFIELD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("options",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=HRANDFIELD_options_Subargs},
};

/* HRANDFIELD_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key doesn't exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_0 = {HRANDFIELD_ReplySchema_anyOf_0_elements,.length=2};

/* HRANDFIELD_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A single random field. Returned in case `COUNT` was not used."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_1 = {HRANDFIELD_ReplySchema_anyOf_1_elements,.length=2};

/* HRANDFIELD_ReplySchema_anyOf_2_items reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_2_items = {HRANDFIELD_ReplySchema_anyOf_2_items_elements,.length=1};

/* HRANDFIELD_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A list of fields. Returned in case `COUNT` was used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&HRANDFIELD_ReplySchema_anyOf_2_items},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_2 = {HRANDFIELD_ReplySchema_anyOf_2_elements,.length=3};

/* HRANDFIELD_ReplySchema_anyOf_3_items_items_0 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_3_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Field"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_3_items_items_0 = {HRANDFIELD_ReplySchema_anyOf_3_items_items_0_elements,.length=2};

/* HRANDFIELD_ReplySchema_anyOf_3_items_items_1 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_3_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Value"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_3_items_items_1 = {HRANDFIELD_ReplySchema_anyOf_3_items_items_1_elements,.length=2};

/* HRANDFIELD_ReplySchema_anyOf_3_items_items array reply schema */
struct jsonObject *HRANDFIELD_ReplySchema_anyOf_3_items_items[] = {
&HRANDFIELD_ReplySchema_anyOf_3_items_items_0,
&HRANDFIELD_ReplySchema_anyOf_3_items_items_1,
};

/* HRANDFIELD_ReplySchema_anyOf_3_items reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_3_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=HRANDFIELD_ReplySchema_anyOf_3_items_items,.length=2}},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_3_items = {HRANDFIELD_ReplySchema_anyOf_3_items_elements,.length=4};

/* HRANDFIELD_ReplySchema_anyOf_3 reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_anyOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Fields and their values. Returned in case `COUNT` and `WITHVALUES` were used. In RESP2 this is returned as a flat array."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&HRANDFIELD_ReplySchema_anyOf_3_items},
};

struct jsonObject HRANDFIELD_ReplySchema_anyOf_3 = {HRANDFIELD_ReplySchema_anyOf_3_elements,.length=3};

/* HRANDFIELD_ReplySchema_anyOf array reply schema */
struct jsonObject *HRANDFIELD_ReplySchema_anyOf[] = {
&HRANDFIELD_ReplySchema_anyOf_0,
&HRANDFIELD_ReplySchema_anyOf_1,
&HRANDFIELD_ReplySchema_anyOf_2,
&HRANDFIELD_ReplySchema_anyOf_3,
};

/* HRANDFIELD_ReplySchema reply schema */
struct jsonObjectElement HRANDFIELD_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=HRANDFIELD_ReplySchema_anyOf,.length=4}},
};

struct jsonObject HRANDFIELD_ReplySchema = {HRANDFIELD_ReplySchema_elements,.length=1};

/********** HSCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSCAN history */
#define HSCAN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSCAN tips */
const char *HSCAN_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSCAN key specs */
keySpec HSCAN_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSCAN argument table */
struct COMMAND_ARG HSCAN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("novalues",ARG_TYPE_PURE_TOKEN,-1,"NOVALUES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* HSCAN_ReplySchema_items_0 reply schema */
struct jsonObjectElement HSCAN_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HSCAN_ReplySchema_items_0 = {HSCAN_ReplySchema_items_0_elements,.length=2};

/* HSCAN_ReplySchema_items_1_items reply schema */
struct jsonObjectElement HSCAN_ReplySchema_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HSCAN_ReplySchema_items_1_items = {HSCAN_ReplySchema_items_1_items_elements,.length=1};

/* HSCAN_ReplySchema_items_1 reply schema */
struct jsonObjectElement HSCAN_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of key/value pairs from the hash where each even element is the key, and each odd element is the value, or when novalues option is on, a list of keys from the hash"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&HSCAN_ReplySchema_items_1_items},
};

struct jsonObject HSCAN_ReplySchema_items_1 = {HSCAN_ReplySchema_items_1_elements,.length=3};

/* HSCAN_ReplySchema_items array reply schema */
struct jsonObject *HSCAN_ReplySchema_items[] = {
&HSCAN_ReplySchema_items_0,
&HSCAN_ReplySchema_items_1,
};

/* HSCAN_ReplySchema reply schema */
struct jsonObjectElement HSCAN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor and scan response in array form"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=HSCAN_ReplySchema_items,.length=2}},
};

struct jsonObject HSCAN_ReplySchema = {HSCAN_ReplySchema_elements,.length=5};

/********** HSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSET history */
commandHistory HSET_History[] = {
{"4.0.0","Accepts multiple `field` and `value` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSET tips */
#define HSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSET key specs */
keySpec HSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSET data argument table */
struct COMMAND_ARG HSET_data_Subargs[] = {
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HSET argument table */
struct COMMAND_ARG HSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=HSET_data_Subargs},
};

/* HSET_ReplySchema reply schema */
struct jsonObjectElement HSET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of fields that were added"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject HSET_ReplySchema = {HSET_ReplySchema_elements,.length=2};

/********** HSETNX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSETNX history */
#define HSETNX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSETNX tips */
#define HSETNX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSETNX key specs */
keySpec HSETNX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSETNX argument table */
struct COMMAND_ARG HSETNX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HSETNX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HSETNX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field is a new field in the hash and value was set."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject HSETNX_ReplySchema_oneOf_0 = {HSETNX_ReplySchema_oneOf_0_elements,.length=2};

/* HSETNX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HSETNX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field already exists in the hash and no operation was performed."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject HSETNX_ReplySchema_oneOf_1 = {HSETNX_ReplySchema_oneOf_1_elements,.length=2};

/* HSETNX_ReplySchema_oneOf array reply schema */
struct jsonObject *HSETNX_ReplySchema_oneOf[] = {
&HSETNX_ReplySchema_oneOf_0,
&HSETNX_ReplySchema_oneOf_1,
};

/* HSETNX_ReplySchema reply schema */
struct jsonObjectElement HSETNX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HSETNX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HSETNX_ReplySchema = {HSETNX_ReplySchema_elements,.length=1};

/********** HSTRLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HSTRLEN history */
#define HSTRLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HSTRLEN tips */
#define HSTRLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HSTRLEN key specs */
keySpec HSTRLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HSTRLEN argument table */
struct COMMAND_ARG HSTRLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HSTRLEN_ReplySchema reply schema */
struct jsonObjectElement HSTRLEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="String length of the value associated with the field, or zero when the field is not present in the hash or key does not exist at all."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject HSTRLEN_ReplySchema = {HSTRLEN_ReplySchema_elements,.length=3};

/********** HTTL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HTTL history */
#define HTTL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HTTL tips */
#define HTTL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HTTL key specs */
keySpec HTTL_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HTTL argument table */
struct COMMAND_ARG HTTL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numfields",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* HTTL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject HTTL_ReplySchema_oneOf_0 = {HTTL_ReplySchema_oneOf_0_elements,.length=2};

/* HTTL_ReplySchema_oneOf_1_items_oneOf_0 reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_1_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field does not exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=-2},
};

struct jsonObject HTTL_ReplySchema_oneOf_1_items_oneOf_0 = {HTTL_ReplySchema_oneOf_1_items_oneOf_0_elements,.length=2};

/* HTTL_ReplySchema_oneOf_1_items_oneOf_1 reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_1_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The field exists but has no associated expire."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject HTTL_ReplySchema_oneOf_1_items_oneOf_1 = {HTTL_ReplySchema_oneOf_1_items_oneOf_1_elements,.length=2};

/* HTTL_ReplySchema_oneOf_1_items_oneOf_2 reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_1_items_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="TTL in seconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject HTTL_ReplySchema_oneOf_1_items_oneOf_2 = {HTTL_ReplySchema_oneOf_1_items_oneOf_2_elements,.length=3};

/* HTTL_ReplySchema_oneOf_1_items_oneOf array reply schema */
struct jsonObject *HTTL_ReplySchema_oneOf_1_items_oneOf[] = {
&HTTL_ReplySchema_oneOf_1_items_oneOf_0,
&HTTL_ReplySchema_oneOf_1_items_oneOf_1,
&HTTL_ReplySchema_oneOf_1_items_oneOf_2,
};

/* HTTL_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HTTL_ReplySchema_oneOf_1_items_oneOf,.length=3}},
};

struct jsonObject HTTL_ReplySchema_oneOf_1_items = {HTTL_ReplySchema_oneOf_1_items_elements,.length=1};

/* HTTL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement HTTL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of results"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_OBJECT,"items",.value.object=&HTTL_ReplySchema_oneOf_1_items},
};

struct jsonObject HTTL_ReplySchema_oneOf_1 = {HTTL_ReplySchema_oneOf_1_elements,.length=5};

/* HTTL_ReplySchema_oneOf array reply schema */
struct jsonObject *HTTL_ReplySchema_oneOf[] = {
&HTTL_ReplySchema_oneOf_0,
&HTTL_ReplySchema_oneOf_1,
};

/* HTTL_ReplySchema reply schema */
struct jsonObjectElement HTTL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=HTTL_ReplySchema_oneOf,.length=2}},
};

struct jsonObject HTTL_ReplySchema = {HTTL_ReplySchema_elements,.length=1};

/********** HVALS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* HVALS history */
#define HVALS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* HVALS tips */
const char *HVALS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* HVALS key specs */
keySpec HVALS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* HVALS argument table */
struct COMMAND_ARG HVALS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* HVALS_ReplySchema_items reply schema */
struct jsonObjectElement HVALS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject HVALS_ReplySchema_items = {HVALS_ReplySchema_items_elements,.length=1};

/* HVALS_ReplySchema reply schema */
struct jsonObjectElement HVALS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of values in the hash, or an empty list when the key does not exist."},
{JSON_TYPE_OBJECT,"items",.value.object=&HVALS_ReplySchema_items},
};

struct jsonObject HVALS_ReplySchema = {HVALS_ReplySchema_elements,.length=3};

/********** PFADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFADD history */
#define PFADD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFADD tips */
#define PFADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFADD key specs */
keySpec PFADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PFADD argument table */
struct COMMAND_ARG PFADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* PFADD_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement PFADD_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="if at least 1 HyperLogLog internal register was altered"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject PFADD_ReplySchema_oneOf_0 = {PFADD_ReplySchema_oneOf_0_elements,.length=2};

/* PFADD_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement PFADD_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="if no HyperLogLog internal register were altered"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject PFADD_ReplySchema_oneOf_1 = {PFADD_ReplySchema_oneOf_1_elements,.length=2};

/* PFADD_ReplySchema_oneOf array reply schema */
struct jsonObject *PFADD_ReplySchema_oneOf[] = {
&PFADD_ReplySchema_oneOf_0,
&PFADD_ReplySchema_oneOf_1,
};

/* PFADD_ReplySchema reply schema */
struct jsonObjectElement PFADD_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=PFADD_ReplySchema_oneOf,.length=2}},
};

struct jsonObject PFADD_ReplySchema = {PFADD_ReplySchema_elements,.length=1};

/********** PFCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFCOUNT history */
#define PFCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFCOUNT tips */
#define PFCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFCOUNT key specs */
keySpec PFCOUNT_Keyspecs[1] = {
{"RW because it may change the internal representation of the key, and propagate to replicas",CMD_KEY_RW|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* PFCOUNT argument table */
struct COMMAND_ARG PFCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* PFCOUNT_ReplySchema reply schema */
struct jsonObjectElement PFCOUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The approximated number of unique elements observed via PFADD"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject PFCOUNT_ReplySchema = {PFCOUNT_ReplySchema_elements,.length=2};

/********** PFDEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFDEBUG history */
#define PFDEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFDEBUG tips */
#define PFDEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFDEBUG key specs */
keySpec PFDEBUG_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PFDEBUG argument table */
struct COMMAND_ARG PFDEBUG_Args[] = {
{MAKE_ARG("subcommand",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** PFMERGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFMERGE history */
#define PFMERGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFMERGE tips */
#define PFMERGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFMERGE key specs */
keySpec PFMERGE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* PFMERGE argument table */
struct COMMAND_ARG PFMERGE_Args[] = {
{MAKE_ARG("destkey",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sourcekey",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* PFMERGE_ReplySchema reply schema */
struct jsonObjectElement PFMERGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject PFMERGE_ReplySchema = {PFMERGE_ReplySchema_elements,.length=1};

/********** PFSELFTEST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PFSELFTEST history */
#define PFSELFTEST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PFSELFTEST tips */
#define PFSELFTEST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PFSELFTEST key specs */
#define PFSELFTEST_Keyspecs NULL
#endif

/* PFSELFTEST_ReplySchema reply schema */
struct jsonObjectElement PFSELFTEST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject PFSELFTEST_ReplySchema = {PFSELFTEST_ReplySchema_elements,.length=1};

/********** BLMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLMOVE history */
#define BLMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLMOVE tips */
#define BLMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLMOVE key specs */
keySpec BLMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BLMOVE wherefrom argument table */
struct COMMAND_ARG BLMOVE_wherefrom_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMOVE whereto argument table */
struct COMMAND_ARG BLMOVE_whereto_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMOVE argument table */
struct COMMAND_ARG BLMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("wherefrom",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMOVE_wherefrom_Subargs},
{MAKE_ARG("whereto",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMOVE_whereto_Subargs},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMOVE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BLMOVE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The popped element."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BLMOVE_ReplySchema_oneOf_0 = {BLMOVE_ReplySchema_oneOf_0_elements,.length=2};

/* BLMOVE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BLMOVE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Operation timed-out"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BLMOVE_ReplySchema_oneOf_1 = {BLMOVE_ReplySchema_oneOf_1_elements,.length=2};

/* BLMOVE_ReplySchema_oneOf array reply schema */
struct jsonObject *BLMOVE_ReplySchema_oneOf[] = {
&BLMOVE_ReplySchema_oneOf_0,
&BLMOVE_ReplySchema_oneOf_1,
};

/* BLMOVE_ReplySchema reply schema */
struct jsonObjectElement BLMOVE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BLMOVE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BLMOVE_ReplySchema = {BLMOVE_ReplySchema_elements,.length=1};

/********** BLMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLMPOP history */
#define BLMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLMPOP tips */
#define BLMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLMPOP key specs */
keySpec BLMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* BLMPOP where argument table */
struct COMMAND_ARG BLMPOP_where_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLMPOP argument table */
struct COMMAND_ARG BLMPOP_Args[] = {
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BLMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* BLMPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Operation timed-out"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BLMPOP_ReplySchema_oneOf_0 = {BLMPOP_ReplySchema_oneOf_0_elements,.length=2};

/* BLMPOP_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List key from which elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BLMPOP_ReplySchema_oneOf_1_items_0 = {BLMPOP_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BLMPOP_ReplySchema_oneOf_1_items_1_items reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_oneOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BLMPOP_ReplySchema_oneOf_1_items_1_items = {BLMPOP_ReplySchema_oneOf_1_items_1_items_elements,.length=1};

/* BLMPOP_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of popped elements."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&BLMPOP_ReplySchema_oneOf_1_items_1_items},
};

struct jsonObject BLMPOP_ReplySchema_oneOf_1_items_1 = {BLMPOP_ReplySchema_oneOf_1_items_1_elements,.length=4};

/* BLMPOP_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BLMPOP_ReplySchema_oneOf_1_items[] = {
&BLMPOP_ReplySchema_oneOf_1_items_0,
&BLMPOP_ReplySchema_oneOf_1_items_1,
};

/* BLMPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key from which elements were popped and the popped elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BLMPOP_ReplySchema_oneOf_1_items,.length=2}},
};

struct jsonObject BLMPOP_ReplySchema_oneOf_1 = {BLMPOP_ReplySchema_oneOf_1_elements,.length=5};

/* BLMPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *BLMPOP_ReplySchema_oneOf[] = {
&BLMPOP_ReplySchema_oneOf_0,
&BLMPOP_ReplySchema_oneOf_1,
};

/* BLMPOP_ReplySchema reply schema */
struct jsonObjectElement BLMPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BLMPOP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BLMPOP_ReplySchema = {BLMPOP_ReplySchema_elements,.length=1};

/********** BLPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BLPOP history */
commandHistory BLPOP_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BLPOP tips */
#define BLPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BLPOP key specs */
keySpec BLPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BLPOP argument table */
struct COMMAND_ARG BLPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BLPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BLPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="No element could be popped and timeout expired"},
};

struct jsonObject BLPOP_ReplySchema_oneOf_0 = {BLPOP_ReplySchema_oneOf_0_elements,.length=2};

/* BLPOP_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BLPOP_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List key from which the element was popped."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BLPOP_ReplySchema_oneOf_1_items_0 = {BLPOP_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BLPOP_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BLPOP_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Value of the popped element."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BLPOP_ReplySchema_oneOf_1_items_1 = {BLPOP_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* BLPOP_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BLPOP_ReplySchema_oneOf_1_items[] = {
&BLPOP_ReplySchema_oneOf_1_items_0,
&BLPOP_ReplySchema_oneOf_1_items_1,
};

/* BLPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BLPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key from which the element was popped and the value of the popped element"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BLPOP_ReplySchema_oneOf_1_items,.length=2}},
};

struct jsonObject BLPOP_ReplySchema_oneOf_1 = {BLPOP_ReplySchema_oneOf_1_elements,.length=5};

/* BLPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *BLPOP_ReplySchema_oneOf[] = {
&BLPOP_ReplySchema_oneOf_0,
&BLPOP_ReplySchema_oneOf_1,
};

/* BLPOP_ReplySchema reply schema */
struct jsonObjectElement BLPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BLPOP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BLPOP_ReplySchema = {BLPOP_ReplySchema_elements,.length=1};

/********** BRPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BRPOP history */
commandHistory BRPOP_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BRPOP tips */
#define BRPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BRPOP key specs */
keySpec BRPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BRPOP argument table */
struct COMMAND_ARG BRPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BRPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BRPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="No element could be popped and the timeout expired."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BRPOP_ReplySchema_oneOf_0 = {BRPOP_ReplySchema_oneOf_0_elements,.length=2};

/* BRPOP_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BRPOP_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The name of the key where an element was popped "},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BRPOP_ReplySchema_oneOf_1_items_0 = {BRPOP_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BRPOP_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BRPOP_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value of the popped element"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BRPOP_ReplySchema_oneOf_1_items_1 = {BRPOP_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* BRPOP_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BRPOP_ReplySchema_oneOf_1_items[] = {
&BRPOP_ReplySchema_oneOf_1_items_0,
&BRPOP_ReplySchema_oneOf_1_items_1,
};

/* BRPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BRPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BRPOP_ReplySchema_oneOf_1_items,.length=2}},
};

struct jsonObject BRPOP_ReplySchema_oneOf_1 = {BRPOP_ReplySchema_oneOf_1_elements,.length=4};

/* BRPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *BRPOP_ReplySchema_oneOf[] = {
&BRPOP_ReplySchema_oneOf_0,
&BRPOP_ReplySchema_oneOf_1,
};

/* BRPOP_ReplySchema reply schema */
struct jsonObjectElement BRPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BRPOP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BRPOP_ReplySchema = {BRPOP_ReplySchema_elements,.length=1};

/********** BRPOPLPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BRPOPLPUSH history */
commandHistory BRPOPLPUSH_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BRPOPLPUSH tips */
#define BRPOPLPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BRPOPLPUSH key specs */
keySpec BRPOPLPUSH_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* BRPOPLPUSH argument table */
struct COMMAND_ARG BRPOPLPUSH_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BRPOPLPUSH_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BRPOPLPUSH_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The element being popped from source and pushed to destination."},
};

struct jsonObject BRPOPLPUSH_ReplySchema_oneOf_0 = {BRPOPLPUSH_ReplySchema_oneOf_0_elements,.length=2};

/* BRPOPLPUSH_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BRPOPLPUSH_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Timeout is reached."},
};

struct jsonObject BRPOPLPUSH_ReplySchema_oneOf_1 = {BRPOPLPUSH_ReplySchema_oneOf_1_elements,.length=2};

/* BRPOPLPUSH_ReplySchema_oneOf array reply schema */
struct jsonObject *BRPOPLPUSH_ReplySchema_oneOf[] = {
&BRPOPLPUSH_ReplySchema_oneOf_0,
&BRPOPLPUSH_ReplySchema_oneOf_1,
};

/* BRPOPLPUSH_ReplySchema reply schema */
struct jsonObjectElement BRPOPLPUSH_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BRPOPLPUSH_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BRPOPLPUSH_ReplySchema = {BRPOPLPUSH_ReplySchema_elements,.length=1};

/********** LINDEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LINDEX history */
#define LINDEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LINDEX tips */
#define LINDEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LINDEX key specs */
keySpec LINDEX_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LINDEX argument table */
struct COMMAND_ARG LINDEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LINDEX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement LINDEX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Index is out of range"},
};

struct jsonObject LINDEX_ReplySchema_oneOf_0 = {LINDEX_ReplySchema_oneOf_0_elements,.length=2};

/* LINDEX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement LINDEX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The requested element"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LINDEX_ReplySchema_oneOf_1 = {LINDEX_ReplySchema_oneOf_1_elements,.length=2};

/* LINDEX_ReplySchema_oneOf array reply schema */
struct jsonObject *LINDEX_ReplySchema_oneOf[] = {
&LINDEX_ReplySchema_oneOf_0,
&LINDEX_ReplySchema_oneOf_1,
};

/* LINDEX_ReplySchema reply schema */
struct jsonObjectElement LINDEX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=LINDEX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject LINDEX_ReplySchema = {LINDEX_ReplySchema_elements,.length=1};

/********** LINSERT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LINSERT history */
#define LINSERT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LINSERT tips */
#define LINSERT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LINSERT key specs */
keySpec LINSERT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LINSERT where argument table */
struct COMMAND_ARG LINSERT_where_Subargs[] = {
{MAKE_ARG("before",ARG_TYPE_PURE_TOKEN,-1,"BEFORE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("after",ARG_TYPE_PURE_TOKEN,-1,"AFTER",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LINSERT argument table */
struct COMMAND_ARG LINSERT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LINSERT_where_Subargs},
{MAKE_ARG("pivot",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LINSERT_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement LINSERT_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List length after a successful insert operation."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject LINSERT_ReplySchema_oneOf_0 = {LINSERT_ReplySchema_oneOf_0_elements,.length=3};

/* LINSERT_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement LINSERT_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="in case key doesn't exist."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject LINSERT_ReplySchema_oneOf_1 = {LINSERT_ReplySchema_oneOf_1_elements,.length=2};

/* LINSERT_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement LINSERT_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="when the pivot wasn't found."},
{JSON_TYPE_INTEGER,"const",.value.integer=-1},
};

struct jsonObject LINSERT_ReplySchema_oneOf_2 = {LINSERT_ReplySchema_oneOf_2_elements,.length=2};

/* LINSERT_ReplySchema_oneOf array reply schema */
struct jsonObject *LINSERT_ReplySchema_oneOf[] = {
&LINSERT_ReplySchema_oneOf_0,
&LINSERT_ReplySchema_oneOf_1,
&LINSERT_ReplySchema_oneOf_2,
};

/* LINSERT_ReplySchema reply schema */
struct jsonObjectElement LINSERT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=LINSERT_ReplySchema_oneOf,.length=3}},
};

struct jsonObject LINSERT_ReplySchema = {LINSERT_ReplySchema_elements,.length=1};

/********** LLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LLEN history */
#define LLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LLEN tips */
#define LLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LLEN key specs */
keySpec LLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LLEN argument table */
struct COMMAND_ARG LLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LLEN_ReplySchema reply schema */
struct jsonObjectElement LLEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List length."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LLEN_ReplySchema = {LLEN_ReplySchema_elements,.length=3};

/********** LMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LMOVE history */
#define LMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LMOVE tips */
#define LMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LMOVE key specs */
keySpec LMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LMOVE wherefrom argument table */
struct COMMAND_ARG LMOVE_wherefrom_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMOVE whereto argument table */
struct COMMAND_ARG LMOVE_whereto_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMOVE argument table */
struct COMMAND_ARG LMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("wherefrom",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMOVE_wherefrom_Subargs},
{MAKE_ARG("whereto",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMOVE_whereto_Subargs},
};

/* LMOVE_ReplySchema reply schema */
struct jsonObjectElement LMOVE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The element being popped and pushed."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LMOVE_ReplySchema = {LMOVE_ReplySchema_elements,.length=2};

/********** LMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LMPOP history */
#define LMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LMPOP tips */
#define LMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LMPOP key specs */
keySpec LMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* LMPOP where argument table */
struct COMMAND_ARG LMPOP_where_Subargs[] = {
{MAKE_ARG("left",ARG_TYPE_PURE_TOKEN,-1,"LEFT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("right",ARG_TYPE_PURE_TOKEN,-1,"RIGHT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LMPOP argument table */
struct COMMAND_ARG LMPOP_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=LMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* LMPOP_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement LMPOP_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If no element could be popped."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject LMPOP_ReplySchema_anyOf_0 = {LMPOP_ReplySchema_anyOf_0_elements,.length=2};

/* LMPOP_ReplySchema_anyOf_1_items_0 reply schema */
struct jsonObjectElement LMPOP_ReplySchema_anyOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Name of the key from which elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LMPOP_ReplySchema_anyOf_1_items_0 = {LMPOP_ReplySchema_anyOf_1_items_0_elements,.length=2};

/* LMPOP_ReplySchema_anyOf_1_items_1_items reply schema */
struct jsonObjectElement LMPOP_ReplySchema_anyOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LMPOP_ReplySchema_anyOf_1_items_1_items = {LMPOP_ReplySchema_anyOf_1_items_1_items_elements,.length=1};

/* LMPOP_ReplySchema_anyOf_1_items_1 reply schema */
struct jsonObjectElement LMPOP_ReplySchema_anyOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of popped elements."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&LMPOP_ReplySchema_anyOf_1_items_1_items},
};

struct jsonObject LMPOP_ReplySchema_anyOf_1_items_1 = {LMPOP_ReplySchema_anyOf_1_items_1_elements,.length=4};

/* LMPOP_ReplySchema_anyOf_1_items array reply schema */
struct jsonObject *LMPOP_ReplySchema_anyOf_1_items[] = {
&LMPOP_ReplySchema_anyOf_1_items_0,
&LMPOP_ReplySchema_anyOf_1_items_1,
};

/* LMPOP_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement LMPOP_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List key from which elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=LMPOP_ReplySchema_anyOf_1_items,.length=2}},
};

struct jsonObject LMPOP_ReplySchema_anyOf_1 = {LMPOP_ReplySchema_anyOf_1_elements,.length=5};

/* LMPOP_ReplySchema_anyOf array reply schema */
struct jsonObject *LMPOP_ReplySchema_anyOf[] = {
&LMPOP_ReplySchema_anyOf_0,
&LMPOP_ReplySchema_anyOf_1,
};

/* LMPOP_ReplySchema reply schema */
struct jsonObjectElement LMPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=LMPOP_ReplySchema_anyOf,.length=2}},
};

struct jsonObject LMPOP_ReplySchema = {LMPOP_ReplySchema_elements,.length=1};

/********** LPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPOP history */
commandHistory LPOP_History[] = {
{"6.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPOP tips */
#define LPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPOP key specs */
keySpec LPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPOP argument table */
struct COMMAND_ARG LPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* LPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement LPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject LPOP_ReplySchema_oneOf_0 = {LPOP_ReplySchema_oneOf_0_elements,.length=2};

/* LPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement LPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` argument was not given, the value of the first element."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LPOP_ReplySchema_oneOf_1 = {LPOP_ReplySchema_oneOf_1_elements,.length=2};

/* LPOP_ReplySchema_oneOf_2_items reply schema */
struct jsonObjectElement LPOP_ReplySchema_oneOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LPOP_ReplySchema_oneOf_2_items = {LPOP_ReplySchema_oneOf_2_items_elements,.length=1};

/* LPOP_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement LPOP_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` argument was given, a list of popped elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&LPOP_ReplySchema_oneOf_2_items},
};

struct jsonObject LPOP_ReplySchema_oneOf_2 = {LPOP_ReplySchema_oneOf_2_elements,.length=3};

/* LPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *LPOP_ReplySchema_oneOf[] = {
&LPOP_ReplySchema_oneOf_0,
&LPOP_ReplySchema_oneOf_1,
&LPOP_ReplySchema_oneOf_2,
};

/* LPOP_ReplySchema reply schema */
struct jsonObjectElement LPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=LPOP_ReplySchema_oneOf,.length=3}},
};

struct jsonObject LPOP_ReplySchema = {LPOP_ReplySchema_elements,.length=1};

/********** LPOS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPOS history */
#define LPOS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPOS tips */
#define LPOS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPOS key specs */
keySpec LPOS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPOS argument table */
struct COMMAND_ARG LPOS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("rank",ARG_TYPE_INTEGER,-1,"RANK",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("num-matches",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("len",ARG_TYPE_INTEGER,-1,"MAXLEN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* LPOS_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement LPOS_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case there is no matching element"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject LPOS_ReplySchema_anyOf_0 = {LPOS_ReplySchema_anyOf_0_elements,.length=2};

/* LPOS_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement LPOS_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="An integer representing the matching element"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LPOS_ReplySchema_anyOf_1 = {LPOS_ReplySchema_anyOf_1_elements,.length=2};

/* LPOS_ReplySchema_anyOf_2_items reply schema */
struct jsonObjectElement LPOS_ReplySchema_anyOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LPOS_ReplySchema_anyOf_2_items = {LPOS_ReplySchema_anyOf_2_items_elements,.length=1};

/* LPOS_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement LPOS_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If the COUNT option is given, an array of integers representing the matching elements (empty if there are no matches)"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&LPOS_ReplySchema_anyOf_2_items},
};

struct jsonObject LPOS_ReplySchema_anyOf_2 = {LPOS_ReplySchema_anyOf_2_elements,.length=4};

/* LPOS_ReplySchema_anyOf array reply schema */
struct jsonObject *LPOS_ReplySchema_anyOf[] = {
&LPOS_ReplySchema_anyOf_0,
&LPOS_ReplySchema_anyOf_1,
&LPOS_ReplySchema_anyOf_2,
};

/* LPOS_ReplySchema reply schema */
struct jsonObjectElement LPOS_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=LPOS_ReplySchema_anyOf,.length=3}},
};

struct jsonObject LPOS_ReplySchema = {LPOS_ReplySchema_elements,.length=1};

/********** LPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPUSH history */
commandHistory LPUSH_History[] = {
{"2.4.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPUSH tips */
#define LPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPUSH key specs */
keySpec LPUSH_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPUSH argument table */
struct COMMAND_ARG LPUSH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* LPUSH_ReplySchema reply schema */
struct jsonObjectElement LPUSH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Length of the list after the push operations."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LPUSH_ReplySchema = {LPUSH_ReplySchema_elements,.length=2};

/********** LPUSHX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LPUSHX history */
commandHistory LPUSHX_History[] = {
{"4.0.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LPUSHX tips */
#define LPUSHX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LPUSHX key specs */
keySpec LPUSHX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LPUSHX argument table */
struct COMMAND_ARG LPUSHX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* LPUSHX_ReplySchema reply schema */
struct jsonObjectElement LPUSHX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="the length of the list after the push operation"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LPUSHX_ReplySchema = {LPUSHX_ReplySchema_elements,.length=3};

/********** LRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LRANGE history */
#define LRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LRANGE tips */
#define LRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LRANGE key specs */
keySpec LRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LRANGE argument table */
struct COMMAND_ARG LRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LRANGE_ReplySchema_items reply schema */
struct jsonObjectElement LRANGE_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LRANGE_ReplySchema_items = {LRANGE_ReplySchema_items_elements,.length=1};

/* LRANGE_ReplySchema reply schema */
struct jsonObjectElement LRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of elements in the specified range"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&LRANGE_ReplySchema_items},
};

struct jsonObject LRANGE_ReplySchema = {LRANGE_ReplySchema_elements,.length=3};

/********** LREM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LREM history */
#define LREM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LREM tips */
#define LREM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LREM key specs */
keySpec LREM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LREM argument table */
struct COMMAND_ARG LREM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LREM_ReplySchema reply schema */
struct jsonObjectElement LREM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of removed elements."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LREM_ReplySchema = {LREM_ReplySchema_elements,.length=3};

/********** LSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LSET history */
#define LSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LSET tips */
#define LSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LSET key specs */
keySpec LSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LSET argument table */
struct COMMAND_ARG LSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LSET_ReplySchema reply schema */
struct jsonObjectElement LSET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject LSET_ReplySchema = {LSET_ReplySchema_elements,.length=1};

/********** LTRIM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LTRIM history */
#define LTRIM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LTRIM tips */
#define LTRIM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LTRIM key specs */
keySpec LTRIM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* LTRIM argument table */
struct COMMAND_ARG LTRIM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LTRIM_ReplySchema reply schema */
struct jsonObjectElement LTRIM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject LTRIM_ReplySchema = {LTRIM_ReplySchema_elements,.length=1};

/********** RPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPOP history */
commandHistory RPOP_History[] = {
{"6.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPOP tips */
#define RPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPOP key specs */
keySpec RPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPOP argument table */
struct COMMAND_ARG RPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* RPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement RPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
};

struct jsonObject RPOP_ReplySchema_oneOf_0 = {RPOP_ReplySchema_oneOf_0_elements,.length=2};

/* RPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement RPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="When 'COUNT' was not given, the value of the last element."},
};

struct jsonObject RPOP_ReplySchema_oneOf_1 = {RPOP_ReplySchema_oneOf_1_elements,.length=2};

/* RPOP_ReplySchema_oneOf_2_items reply schema */
struct jsonObjectElement RPOP_ReplySchema_oneOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject RPOP_ReplySchema_oneOf_2_items = {RPOP_ReplySchema_oneOf_2_items_elements,.length=1};

/* RPOP_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement RPOP_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="When 'COUNT' was given, list of popped elements."},
{JSON_TYPE_OBJECT,"items",.value.object=&RPOP_ReplySchema_oneOf_2_items},
};

struct jsonObject RPOP_ReplySchema_oneOf_2 = {RPOP_ReplySchema_oneOf_2_elements,.length=3};

/* RPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *RPOP_ReplySchema_oneOf[] = {
&RPOP_ReplySchema_oneOf_0,
&RPOP_ReplySchema_oneOf_1,
&RPOP_ReplySchema_oneOf_2,
};

/* RPOP_ReplySchema reply schema */
struct jsonObjectElement RPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=RPOP_ReplySchema_oneOf,.length=3}},
};

struct jsonObject RPOP_ReplySchema = {RPOP_ReplySchema_elements,.length=1};

/********** RPOPLPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPOPLPUSH history */
#define RPOPLPUSH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPOPLPUSH tips */
#define RPOPLPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPOPLPUSH key specs */
keySpec RPOPLPUSH_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPOPLPUSH argument table */
struct COMMAND_ARG RPOPLPUSH_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* RPOPLPUSH_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement RPOPLPUSH_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The element being popped and pushed."},
};

struct jsonObject RPOPLPUSH_ReplySchema_oneOf_0 = {RPOPLPUSH_ReplySchema_oneOf_0_elements,.length=2};

/* RPOPLPUSH_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement RPOPLPUSH_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Source list is empty."},
};

struct jsonObject RPOPLPUSH_ReplySchema_oneOf_1 = {RPOPLPUSH_ReplySchema_oneOf_1_elements,.length=2};

/* RPOPLPUSH_ReplySchema_oneOf array reply schema */
struct jsonObject *RPOPLPUSH_ReplySchema_oneOf[] = {
&RPOPLPUSH_ReplySchema_oneOf_0,
&RPOPLPUSH_ReplySchema_oneOf_1,
};

/* RPOPLPUSH_ReplySchema reply schema */
struct jsonObjectElement RPOPLPUSH_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=RPOPLPUSH_ReplySchema_oneOf,.length=2}},
};

struct jsonObject RPOPLPUSH_ReplySchema = {RPOPLPUSH_ReplySchema_elements,.length=1};

/********** RPUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPUSH history */
commandHistory RPUSH_History[] = {
{"2.4.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPUSH tips */
#define RPUSH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPUSH key specs */
keySpec RPUSH_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPUSH argument table */
struct COMMAND_ARG RPUSH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* RPUSH_ReplySchema reply schema */
struct jsonObjectElement RPUSH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Length of the list after the push operations."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=1},
};

struct jsonObject RPUSH_ReplySchema = {RPUSH_ReplySchema_elements,.length=3};

/********** RPUSHX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RPUSHX history */
commandHistory RPUSHX_History[] = {
{"4.0.0","Accepts multiple `element` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RPUSHX tips */
#define RPUSHX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RPUSHX key specs */
keySpec RPUSHX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RPUSHX argument table */
struct COMMAND_ARG RPUSHX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("element",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* RPUSHX_ReplySchema reply schema */
struct jsonObjectElement RPUSHX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Length of the list after the push operation."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject RPUSHX_ReplySchema = {RPUSHX_ReplySchema_elements,.length=3};

/********** PSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PSUBSCRIBE history */
#define PSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PSUBSCRIBE tips */
#define PSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PSUBSCRIBE key specs */
#define PSUBSCRIBE_Keyspecs NULL
#endif

/* PSUBSCRIBE argument table */
struct COMMAND_ARG PSUBSCRIBE_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** PUBLISH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBLISH history */
#define PUBLISH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBLISH tips */
#define PUBLISH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBLISH key specs */
#define PUBLISH_Keyspecs NULL
#endif

/* PUBLISH argument table */
struct COMMAND_ARG PUBLISH_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PUBLISH_ReplySchema reply schema */
struct jsonObjectElement PUBLISH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of clients that received the message. Note that in a Redis Cluster, only clients that are connected to the same node as the publishing client are included in the count"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject PUBLISH_ReplySchema = {PUBLISH_ReplySchema_elements,.length=3};

/********** PUBSUB CHANNELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB CHANNELS history */
#define PUBSUB_CHANNELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB CHANNELS tips */
#define PUBSUB_CHANNELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB CHANNELS key specs */
#define PUBSUB_CHANNELS_Keyspecs NULL
#endif

/* PUBSUB CHANNELS argument table */
struct COMMAND_ARG PUBSUB_CHANNELS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* PUBSUB_CHANNELS_ReplySchema_items reply schema */
struct jsonObjectElement PUBSUB_CHANNELS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject PUBSUB_CHANNELS_ReplySchema_items = {PUBSUB_CHANNELS_ReplySchema_items_elements,.length=1};

/* PUBSUB_CHANNELS_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_CHANNELS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a list of active channels, optionally matching the specified pattern"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&PUBSUB_CHANNELS_ReplySchema_items},
};

struct jsonObject PUBSUB_CHANNELS_ReplySchema = {PUBSUB_CHANNELS_ReplySchema_elements,.length=4};

/********** PUBSUB HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB HELP history */
#define PUBSUB_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB HELP tips */
#define PUBSUB_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB HELP key specs */
#define PUBSUB_HELP_Keyspecs NULL
#endif

/* PUBSUB_HELP_ReplySchema_items reply schema */
struct jsonObjectElement PUBSUB_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject PUBSUB_HELP_ReplySchema_items = {PUBSUB_HELP_ReplySchema_items_elements,.length=1};

/* PUBSUB_HELP_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&PUBSUB_HELP_ReplySchema_items},
};

struct jsonObject PUBSUB_HELP_ReplySchema = {PUBSUB_HELP_ReplySchema_elements,.length=3};

/********** PUBSUB NUMPAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB NUMPAT history */
#define PUBSUB_NUMPAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB NUMPAT tips */
#define PUBSUB_NUMPAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB NUMPAT key specs */
#define PUBSUB_NUMPAT_Keyspecs NULL
#endif

/* PUBSUB_NUMPAT_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_NUMPAT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of patterns all the clients are subscribed to"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject PUBSUB_NUMPAT_ReplySchema = {PUBSUB_NUMPAT_ReplySchema_elements,.length=3};

/********** PUBSUB NUMSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB NUMSUB history */
#define PUBSUB_NUMSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB NUMSUB tips */
#define PUBSUB_NUMSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB NUMSUB key specs */
#define PUBSUB_NUMSUB_Keyspecs NULL
#endif

/* PUBSUB NUMSUB argument table */
struct COMMAND_ARG PUBSUB_NUMSUB_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* PUBSUB_NUMSUB_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_NUMSUB_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of subscribers per channel, each even element (including 0th) is channel name, each odd element is the number of subscribers"},
{JSON_TYPE_STRING,"type",.value.string="array"},
};

struct jsonObject PUBSUB_NUMSUB_ReplySchema = {PUBSUB_NUMSUB_ReplySchema_elements,.length=2};

/********** PUBSUB SHARDCHANNELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB SHARDCHANNELS history */
#define PUBSUB_SHARDCHANNELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB SHARDCHANNELS tips */
#define PUBSUB_SHARDCHANNELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB SHARDCHANNELS key specs */
#define PUBSUB_SHARDCHANNELS_Keyspecs NULL
#endif

/* PUBSUB SHARDCHANNELS argument table */
struct COMMAND_ARG PUBSUB_SHARDCHANNELS_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* PUBSUB_SHARDCHANNELS_ReplySchema_items reply schema */
struct jsonObjectElement PUBSUB_SHARDCHANNELS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject PUBSUB_SHARDCHANNELS_ReplySchema_items = {PUBSUB_SHARDCHANNELS_ReplySchema_items_elements,.length=1};

/* PUBSUB_SHARDCHANNELS_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_SHARDCHANNELS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a list of active channels, optionally matching the specified pattern"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&PUBSUB_SHARDCHANNELS_ReplySchema_items},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
};

struct jsonObject PUBSUB_SHARDCHANNELS_ReplySchema = {PUBSUB_SHARDCHANNELS_ReplySchema_elements,.length=4};

/********** PUBSUB SHARDNUMSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB SHARDNUMSUB history */
#define PUBSUB_SHARDNUMSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB SHARDNUMSUB tips */
#define PUBSUB_SHARDNUMSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB SHARDNUMSUB key specs */
#define PUBSUB_SHARDNUMSUB_Keyspecs NULL
#endif

/* PUBSUB SHARDNUMSUB argument table */
struct COMMAND_ARG PUBSUB_SHARDNUMSUB_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* PUBSUB_SHARDNUMSUB_ReplySchema reply schema */
struct jsonObjectElement PUBSUB_SHARDNUMSUB_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of subscribers per shard channel, each even element (including 0th) is channel name, each odd element is the number of subscribers"},
{JSON_TYPE_STRING,"type",.value.string="array"},
};

struct jsonObject PUBSUB_SHARDNUMSUB_ReplySchema = {PUBSUB_SHARDNUMSUB_ReplySchema_elements,.length=2};

/* PUBSUB command table */
struct COMMAND_STRUCT PUBSUB_Subcommands[] = {
{MAKE_CMD("channels","Returns the active channels.","O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_CHANNELS_History,0,PUBSUB_CHANNELS_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_CHANNELS_Keyspecs,0,NULL,1),.args=PUBSUB_CHANNELS_Args,.reply_schema=&PUBSUB_CHANNELS_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_HELP_History,0,PUBSUB_HELP_Tips,0,pubsubCommand,2,CMD_LOADING|CMD_STALE,0,PUBSUB_HELP_Keyspecs,0,NULL,0),.reply_schema=&PUBSUB_HELP_ReplySchema},
{MAKE_CMD("numpat","Returns a count of unique pattern subscriptions.","O(1)","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_NUMPAT_History,0,PUBSUB_NUMPAT_Tips,0,pubsubCommand,2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_NUMPAT_Keyspecs,0,NULL,0),.reply_schema=&PUBSUB_NUMPAT_ReplySchema},
{MAKE_CMD("numsub","Returns a count of subscribers to channels.","O(N) for the NUMSUB subcommand, where N is the number of requested channels","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_NUMSUB_History,0,PUBSUB_NUMSUB_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_NUMSUB_Keyspecs,0,NULL,1),.args=PUBSUB_NUMSUB_Args,.reply_schema=&PUBSUB_NUMSUB_ReplySchema},
{MAKE_CMD("shardchannels","Returns the active shard channels.","O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_SHARDCHANNELS_History,0,PUBSUB_SHARDCHANNELS_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_SHARDCHANNELS_Keyspecs,0,NULL,1),.args=PUBSUB_SHARDCHANNELS_Args,.reply_schema=&PUBSUB_SHARDCHANNELS_ReplySchema},
{MAKE_CMD("shardnumsub","Returns the count of subscribers of shard channels.","O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_SHARDNUMSUB_History,0,PUBSUB_SHARDNUMSUB_Tips,0,pubsubCommand,-2,CMD_PUBSUB|CMD_LOADING|CMD_STALE,0,PUBSUB_SHARDNUMSUB_Keyspecs,0,NULL,1),.args=PUBSUB_SHARDNUMSUB_Args,.reply_schema=&PUBSUB_SHARDNUMSUB_ReplySchema},
{0}
};

/********** PUBSUB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUBSUB history */
#define PUBSUB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUBSUB tips */
#define PUBSUB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUBSUB key specs */
#define PUBSUB_Keyspecs NULL
#endif

/********** PUNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PUNSUBSCRIBE history */
#define PUNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PUNSUBSCRIBE tips */
#define PUNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PUNSUBSCRIBE key specs */
#define PUNSUBSCRIBE_Keyspecs NULL
#endif

/* PUNSUBSCRIBE argument table */
struct COMMAND_ARG PUNSUBSCRIBE_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SPUBLISH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SPUBLISH history */
#define SPUBLISH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SPUBLISH tips */
#define SPUBLISH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SPUBLISH key specs */
keySpec SPUBLISH_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SPUBLISH argument table */
struct COMMAND_ARG SPUBLISH_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("message",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SPUBLISH_ReplySchema reply schema */
struct jsonObjectElement SPUBLISH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of clients that received the message. Note that in a Redis Cluster, only clients that are connected to the same node as the publishing client are included in the count"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SPUBLISH_ReplySchema = {SPUBLISH_ReplySchema_elements,.length=3};

/********** SSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SSUBSCRIBE history */
#define SSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SSUBSCRIBE tips */
#define SSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SSUBSCRIBE key specs */
keySpec SSUBSCRIBE_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SSUBSCRIBE argument table */
struct COMMAND_ARG SSUBSCRIBE_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUBSCRIBE history */
#define SUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUBSCRIBE tips */
#define SUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUBSCRIBE key specs */
#define SUBSCRIBE_Keyspecs NULL
#endif

/* SUBSCRIBE argument table */
struct COMMAND_ARG SUBSCRIBE_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/********** SUNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUNSUBSCRIBE history */
#define SUNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUNSUBSCRIBE tips */
#define SUNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUNSUBSCRIBE key specs */
keySpec SUNSUBSCRIBE_Keyspecs[1] = {
{NULL,CMD_KEY_NOT_KEY,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SUNSUBSCRIBE argument table */
struct COMMAND_ARG SUNSUBSCRIBE_Args[] = {
{MAKE_ARG("shardchannel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** UNSUBSCRIBE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* UNSUBSCRIBE history */
#define UNSUBSCRIBE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* UNSUBSCRIBE tips */
#define UNSUBSCRIBE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* UNSUBSCRIBE key specs */
#define UNSUBSCRIBE_Keyspecs NULL
#endif

/* UNSUBSCRIBE argument table */
struct COMMAND_ARG UNSUBSCRIBE_Args[] = {
{MAKE_ARG("channel",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/********** EVAL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVAL history */
#define EVAL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVAL tips */
#define EVAL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVAL key specs */
keySpec EVAL_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVAL argument table */
struct COMMAND_ARG EVAL_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* EVAL_ReplySchema reply schema */
struct jsonObjectElement EVAL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the script that is executed"},
};

struct jsonObject EVAL_ReplySchema = {EVAL_ReplySchema_elements,.length=1};

/********** EVALSHA ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVALSHA history */
#define EVALSHA_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVALSHA tips */
#define EVALSHA_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVALSHA key specs */
keySpec EVALSHA_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVALSHA argument table */
struct COMMAND_ARG EVALSHA_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* EVALSHA_ReplySchema reply schema */
struct jsonObjectElement EVALSHA_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the script that is executed"},
};

struct jsonObject EVALSHA_ReplySchema = {EVALSHA_ReplySchema_elements,.length=1};

/********** EVALSHA_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVALSHA_RO history */
#define EVALSHA_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVALSHA_RO tips */
#define EVALSHA_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVALSHA_RO key specs */
keySpec EVALSHA_RO_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVALSHA_RO argument table */
struct COMMAND_ARG EVALSHA_RO_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* EVALSHA_RO_ReplySchema reply schema */
struct jsonObjectElement EVALSHA_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the script that is executed"},
};

struct jsonObject EVALSHA_RO_ReplySchema = {EVALSHA_RO_ReplySchema_elements,.length=1};

/********** EVAL_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EVAL_RO history */
#define EVAL_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EVAL_RO tips */
#define EVAL_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EVAL_RO key specs */
keySpec EVAL_RO_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* EVAL_RO argument table */
struct COMMAND_ARG EVAL_RO_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* EVAL_RO_ReplySchema reply schema */
struct jsonObjectElement EVAL_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the script that is executed"},
};

struct jsonObject EVAL_RO_ReplySchema = {EVAL_RO_ReplySchema_elements,.length=1};

/********** FCALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FCALL history */
#define FCALL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FCALL tips */
#define FCALL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FCALL key specs */
keySpec FCALL_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* FCALL argument table */
struct COMMAND_ARG FCALL_Args[] = {
{MAKE_ARG("function",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* FCALL_ReplySchema reply schema */
struct jsonObjectElement FCALL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the function that is executed"},
};

struct jsonObject FCALL_ReplySchema = {FCALL_ReplySchema_elements,.length=1};

/********** FCALL_RO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FCALL_RO history */
#define FCALL_RO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FCALL_RO tips */
#define FCALL_RO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FCALL_RO key specs */
keySpec FCALL_RO_Keyspecs[1] = {
{"We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* FCALL_RO argument table */
struct COMMAND_ARG FCALL_RO_Args[] = {
{MAKE_ARG("function",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* FCALL_RO_ReplySchema reply schema */
struct jsonObjectElement FCALL_RO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Return value depends on the function that is executed"},
};

struct jsonObject FCALL_RO_ReplySchema = {FCALL_RO_ReplySchema_elements,.length=1};

/********** FUNCTION DELETE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION DELETE history */
#define FUNCTION_DELETE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION DELETE tips */
const char *FUNCTION_DELETE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION DELETE key specs */
#define FUNCTION_DELETE_Keyspecs NULL
#endif

/* FUNCTION DELETE argument table */
struct COMMAND_ARG FUNCTION_DELETE_Args[] = {
{MAKE_ARG("library-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION_DELETE_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_DELETE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FUNCTION_DELETE_ReplySchema = {FUNCTION_DELETE_ReplySchema_elements,.length=1};

/********** FUNCTION DUMP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION DUMP history */
#define FUNCTION_DUMP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION DUMP tips */
#define FUNCTION_DUMP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION DUMP key specs */
#define FUNCTION_DUMP_Keyspecs NULL
#endif

/* FUNCTION_DUMP_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_DUMP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the serialized payload"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_DUMP_ReplySchema = {FUNCTION_DUMP_ReplySchema_elements,.length=2};

/********** FUNCTION FLUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION FLUSH history */
#define FUNCTION_FLUSH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION FLUSH tips */
const char *FUNCTION_FLUSH_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION FLUSH key specs */
#define FUNCTION_FLUSH_Keyspecs NULL
#endif

/* FUNCTION FLUSH flush_type argument table */
struct COMMAND_ARG FUNCTION_FLUSH_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION FLUSH argument table */
struct COMMAND_ARG FUNCTION_FLUSH_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FUNCTION_FLUSH_flush_type_Subargs},
};

/* FUNCTION_FLUSH_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_FLUSH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FUNCTION_FLUSH_ReplySchema = {FUNCTION_FLUSH_ReplySchema_elements,.length=1};

/********** FUNCTION HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION HELP history */
#define FUNCTION_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION HELP tips */
#define FUNCTION_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION HELP key specs */
#define FUNCTION_HELP_Keyspecs NULL
#endif

/* FUNCTION_HELP_ReplySchema_items reply schema */
struct jsonObjectElement FUNCTION_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_HELP_ReplySchema_items = {FUNCTION_HELP_ReplySchema_items_elements,.length=1};

/* FUNCTION_HELP_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&FUNCTION_HELP_ReplySchema_items},
};

struct jsonObject FUNCTION_HELP_ReplySchema = {FUNCTION_HELP_ReplySchema_elements,.length=3};

/********** FUNCTION KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION KILL history */
#define FUNCTION_KILL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION KILL tips */
const char *FUNCTION_KILL_Tips[] = {
"request_policy:all_shards",
"response_policy:one_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION KILL key specs */
#define FUNCTION_KILL_Keyspecs NULL
#endif

/* FUNCTION_KILL_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_KILL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FUNCTION_KILL_ReplySchema = {FUNCTION_KILL_ReplySchema_elements,.length=1};

/********** FUNCTION LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION LIST history */
#define FUNCTION_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION LIST tips */
const char *FUNCTION_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION LIST key specs */
#define FUNCTION_LIST_Keyspecs NULL
#endif

/* FUNCTION LIST argument table */
struct COMMAND_ARG FUNCTION_LIST_Args[] = {
{MAKE_ARG("library-name-pattern",ARG_TYPE_STRING,-1,"LIBRARYNAME",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withcode",ARG_TYPE_PURE_TOKEN,-1,"WITHCODE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* FUNCTION_LIST_ReplySchema_items_properties_library_name reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_library_name_elements[] = {
{JSON_TYPE_STRING,"description",.value.string=" the name of the library"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_library_name = {FUNCTION_LIST_ReplySchema_items_properties_library_name_elements,.length=2};

/* FUNCTION_LIST_ReplySchema_items_properties_engine reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_engine_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the engine of the library"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_engine = {FUNCTION_LIST_ReplySchema_items_properties_engine_elements,.length=2};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_name reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the name of the function"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_name = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_name_elements,.length=2};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_0 reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_0 = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_0_elements,.length=1};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_1 reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_1 = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_1_elements,.length=1};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf array reply schema */
struct jsonObject *FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf[] = {
&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_0,
&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf_1,
};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the function's description"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_oneOf,.length=2}},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description_elements,.length=2};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_items reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_items = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_items_elements,.length=1};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array of function flags"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_items},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags_elements,.length=3};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_name},
{JSON_TYPE_OBJECT,"description",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_description},
{JSON_TYPE_OBJECT,"flags",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_flags},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties_elements,.length=3};

/* FUNCTION_LIST_ReplySchema_items_properties_functions_items reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items_properties},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions_items = {FUNCTION_LIST_ReplySchema_items_properties_functions_items_elements,.length=3};

/* FUNCTION_LIST_ReplySchema_items_properties_functions reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_functions_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the list of functions in the library"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions_items},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_functions = {FUNCTION_LIST_ReplySchema_items_properties_functions_elements,.length=3};

/* FUNCTION_LIST_ReplySchema_items_properties_library_code reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_library_code_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the library's source code (when given the WITHCODE modifier)"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties_library_code = {FUNCTION_LIST_ReplySchema_items_properties_library_code_elements,.length=2};

/* FUNCTION_LIST_ReplySchema_items_properties reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"library_name",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_library_name},
{JSON_TYPE_OBJECT,"engine",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_engine},
{JSON_TYPE_OBJECT,"functions",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_functions},
{JSON_TYPE_OBJECT,"library_code",.value.object=&FUNCTION_LIST_ReplySchema_items_properties_library_code},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items_properties = {FUNCTION_LIST_ReplySchema_items_properties_elements,.length=4};

/* FUNCTION_LIST_ReplySchema_items reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&FUNCTION_LIST_ReplySchema_items_properties},
};

struct jsonObject FUNCTION_LIST_ReplySchema_items = {FUNCTION_LIST_ReplySchema_items_elements,.length=3};

/* FUNCTION_LIST_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_LIST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&FUNCTION_LIST_ReplySchema_items},
};

struct jsonObject FUNCTION_LIST_ReplySchema = {FUNCTION_LIST_ReplySchema_elements,.length=2};

/********** FUNCTION LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION LOAD history */
#define FUNCTION_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION LOAD tips */
const char *FUNCTION_LOAD_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION LOAD key specs */
#define FUNCTION_LOAD_Keyspecs NULL
#endif

/* FUNCTION LOAD argument table */
struct COMMAND_ARG FUNCTION_LOAD_Args[] = {
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("function-code",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION_LOAD_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_LOAD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The library name that was loaded"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_LOAD_ReplySchema = {FUNCTION_LOAD_ReplySchema_elements,.length=2};

/********** FUNCTION RESTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION RESTORE history */
#define FUNCTION_RESTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION RESTORE tips */
const char *FUNCTION_RESTORE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION RESTORE key specs */
#define FUNCTION_RESTORE_Keyspecs NULL
#endif

/* FUNCTION RESTORE policy argument table */
struct COMMAND_ARG FUNCTION_RESTORE_policy_Subargs[] = {
{MAKE_ARG("flush",ARG_TYPE_PURE_TOKEN,-1,"FLUSH",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("append",ARG_TYPE_PURE_TOKEN,-1,"APPEND",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* FUNCTION RESTORE argument table */
struct COMMAND_ARG FUNCTION_RESTORE_Args[] = {
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("policy",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=FUNCTION_RESTORE_policy_Subargs},
};

/* FUNCTION_RESTORE_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_RESTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FUNCTION_RESTORE_ReplySchema = {FUNCTION_RESTORE_ReplySchema_elements,.length=1};

/********** FUNCTION STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION STATS history */
#define FUNCTION_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION STATS tips */
const char *FUNCTION_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION STATS key specs */
#define FUNCTION_STATS_Keyspecs NULL
#endif

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_0 reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If there's no in-flight function"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_0 = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_0_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_name reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_name_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the name of the function."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_name = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_name_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_items reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_items = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_items_elements,.length=1};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the command and arguments used for invoking the function."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_items},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command_elements,.length=3};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_duration_ms reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_duration_ms_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the function's runtime duration in milliseconds."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_duration_ms = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_duration_ms_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_name},
{JSON_TYPE_OBJECT,"command",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_command},
{JSON_TYPE_OBJECT,"duration_ms",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_duration_ms},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties_elements,.length=3};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1 reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a map with the information about the running script"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_properties},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1 = {FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1_elements,.length=4};

/* FUNCTION_STATS_ReplySchema_properties_running_script_oneOf array reply schema */
struct jsonObject *FUNCTION_STATS_ReplySchema_properties_running_script_oneOf[] = {
&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_0,
&FUNCTION_STATS_ReplySchema_properties_running_script_oneOf_1,
};

/* FUNCTION_STATS_ReplySchema_properties_running_script reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_running_script_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="information about the running script."},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=FUNCTION_STATS_ReplySchema_properties_running_script_oneOf,.length=2}},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_running_script = {FUNCTION_STATS_ReplySchema_properties_running_script_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_libraries_count reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_libraries_count_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of libraries"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_libraries_count = {FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_libraries_count_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_functions_count reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_functions_count_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of functions"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_functions_count = {FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_functions_count_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_elements[] = {
{JSON_TYPE_OBJECT,"libraries_count",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_libraries_count},
{JSON_TYPE_OBJECT,"functions_count",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_functions_count},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties = {FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties_elements,.length=2};

/* FUNCTION_STATS_ReplySchema_properties_engines_patternProperties_____ reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Engine map contains statistics about the engine"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______properties},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines_patternProperties_____ = {FUNCTION_STATS_ReplySchema_properties_engines_patternProperties______elements,.length=4};

/* FUNCTION_STATS_ReplySchema_properties_engines_patternProperties reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_patternProperties_elements[] = {
{JSON_TYPE_OBJECT,"^.*$",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines_patternProperties_____},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines_patternProperties = {FUNCTION_STATS_ReplySchema_properties_engines_patternProperties_elements,.length=1};

/* FUNCTION_STATS_ReplySchema_properties_engines reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_engines_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map when each entry in the map represent a single engine."},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"patternProperties",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines_patternProperties},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties_engines = {FUNCTION_STATS_ReplySchema_properties_engines_elements,.length=3};

/* FUNCTION_STATS_ReplySchema_properties reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_properties_elements[] = {
{JSON_TYPE_OBJECT,"running_script",.value.object=&FUNCTION_STATS_ReplySchema_properties_running_script},
{JSON_TYPE_OBJECT,"engines",.value.object=&FUNCTION_STATS_ReplySchema_properties_engines},
};

struct jsonObject FUNCTION_STATS_ReplySchema_properties = {FUNCTION_STATS_ReplySchema_properties_elements,.length=2};

/* FUNCTION_STATS_ReplySchema reply schema */
struct jsonObjectElement FUNCTION_STATS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&FUNCTION_STATS_ReplySchema_properties},
};

struct jsonObject FUNCTION_STATS_ReplySchema = {FUNCTION_STATS_ReplySchema_elements,.length=3};

/* FUNCTION command table */
struct COMMAND_STRUCT FUNCTION_Subcommands[] = {
{MAKE_CMD("delete","Deletes a library and its functions.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_DELETE_History,0,FUNCTION_DELETE_Tips,2,functionDeleteCommand,3,CMD_NOSCRIPT|CMD_WRITE,ACL_CATEGORY_SCRIPTING,FUNCTION_DELETE_Keyspecs,0,NULL,1),.args=FUNCTION_DELETE_Args,.reply_schema=&FUNCTION_DELETE_ReplySchema},
{MAKE_CMD("dump","Dumps all libraries into a serialized binary payload.","O(N) where N is the number of functions","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_DUMP_History,0,FUNCTION_DUMP_Tips,0,functionDumpCommand,2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,FUNCTION_DUMP_Keyspecs,0,NULL,0),.reply_schema=&FUNCTION_DUMP_ReplySchema},
{MAKE_CMD("flush","Deletes all libraries and functions.","O(N) where N is the number of functions deleted","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_FLUSH_History,0,FUNCTION_FLUSH_Tips,2,functionFlushCommand,-2,CMD_NOSCRIPT|CMD_WRITE,ACL_CATEGORY_SCRIPTING,FUNCTION_FLUSH_Keyspecs,0,NULL,1),.args=FUNCTION_FLUSH_Args,.reply_schema=&FUNCTION_FLUSH_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_HELP_History,0,FUNCTION_HELP_Tips,0,functionHelpCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_SCRIPTING,FUNCTION_HELP_Keyspecs,0,NULL,0),.reply_schema=&FUNCTION_HELP_ReplySchema},
{MAKE_CMD("kill","Terminates a function during execution.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_KILL_History,0,FUNCTION_KILL_Tips,2,functionKillCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,FUNCTION_KILL_Keyspecs,0,NULL,0),.reply_schema=&FUNCTION_KILL_ReplySchema},
{MAKE_CMD("list","Returns information about all libraries.","O(N) where N is the number of functions","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_LIST_History,0,FUNCTION_LIST_Tips,1,functionListCommand,-2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,FUNCTION_LIST_Keyspecs,0,NULL,2),.args=FUNCTION_LIST_Args,.reply_schema=&FUNCTION_LIST_ReplySchema},
{MAKE_CMD("load","Creates a library.","O(1) (considering compilation time is redundant)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_LOAD_History,0,FUNCTION_LOAD_Tips,2,functionLoadCommand,-3,CMD_NOSCRIPT|CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SCRIPTING,FUNCTION_LOAD_Keyspecs,0,NULL,2),.args=FUNCTION_LOAD_Args,.reply_schema=&FUNCTION_LOAD_ReplySchema},
{MAKE_CMD("restore","Restores all libraries from a payload.","O(N) where N is the number of functions on the payload","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_RESTORE_History,0,FUNCTION_RESTORE_Tips,2,functionRestoreCommand,-3,CMD_NOSCRIPT|CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SCRIPTING,FUNCTION_RESTORE_Keyspecs,0,NULL,2),.args=FUNCTION_RESTORE_Args,.reply_schema=&FUNCTION_RESTORE_ReplySchema},
{MAKE_CMD("stats","Returns information about a function during execution.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_STATS_History,0,FUNCTION_STATS_Tips,3,functionStatsCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,FUNCTION_STATS_Keyspecs,0,NULL,0),.reply_schema=&FUNCTION_STATS_ReplySchema},
{0}
};

/********** FUNCTION ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FUNCTION history */
#define FUNCTION_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FUNCTION tips */
#define FUNCTION_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FUNCTION key specs */
#define FUNCTION_Keyspecs NULL
#endif

/********** SCRIPT DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT DEBUG history */
#define SCRIPT_DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT DEBUG tips */
#define SCRIPT_DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT DEBUG key specs */
#define SCRIPT_DEBUG_Keyspecs NULL
#endif

/* SCRIPT DEBUG mode argument table */
struct COMMAND_ARG SCRIPT_DEBUG_mode_Subargs[] = {
{MAKE_ARG("yes",ARG_TYPE_PURE_TOKEN,-1,"YES",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT DEBUG argument table */
struct COMMAND_ARG SCRIPT_DEBUG_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,3,NULL),.subargs=SCRIPT_DEBUG_mode_Subargs},
};

/* SCRIPT_DEBUG_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_DEBUG_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SCRIPT_DEBUG_ReplySchema = {SCRIPT_DEBUG_ReplySchema_elements,.length=1};

/********** SCRIPT EXISTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT EXISTS history */
#define SCRIPT_EXISTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT EXISTS tips */
const char *SCRIPT_EXISTS_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_logical_and",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT EXISTS key specs */
#define SCRIPT_EXISTS_Keyspecs NULL
#endif

/* SCRIPT EXISTS argument table */
struct COMMAND_ARG SCRIPT_EXISTS_Args[] = {
{MAKE_ARG("sha1",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SCRIPT_EXISTS_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement SCRIPT_EXISTS_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="sha1 hash exists in script cache"},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject SCRIPT_EXISTS_ReplySchema_items_oneOf_0 = {SCRIPT_EXISTS_ReplySchema_items_oneOf_0_elements,.length=2};

/* SCRIPT_EXISTS_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement SCRIPT_EXISTS_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="sha1 hash does not exist in script cache"},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject SCRIPT_EXISTS_ReplySchema_items_oneOf_1 = {SCRIPT_EXISTS_ReplySchema_items_oneOf_1_elements,.length=2};

/* SCRIPT_EXISTS_ReplySchema_items_oneOf array reply schema */
struct jsonObject *SCRIPT_EXISTS_ReplySchema_items_oneOf[] = {
&SCRIPT_EXISTS_ReplySchema_items_oneOf_0,
&SCRIPT_EXISTS_ReplySchema_items_oneOf_1,
};

/* SCRIPT_EXISTS_ReplySchema_items reply schema */
struct jsonObjectElement SCRIPT_EXISTS_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SCRIPT_EXISTS_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject SCRIPT_EXISTS_ReplySchema_items = {SCRIPT_EXISTS_ReplySchema_items_elements,.length=1};

/* SCRIPT_EXISTS_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_EXISTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="An array of integers that correspond to the specified SHA1 digest arguments."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SCRIPT_EXISTS_ReplySchema_items},
};

struct jsonObject SCRIPT_EXISTS_ReplySchema = {SCRIPT_EXISTS_ReplySchema_elements,.length=3};

/********** SCRIPT FLUSH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT FLUSH history */
commandHistory SCRIPT_FLUSH_History[] = {
{"6.2.0","Added the `ASYNC` and `SYNC` flushing mode modifiers."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT FLUSH tips */
const char *SCRIPT_FLUSH_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT FLUSH key specs */
#define SCRIPT_FLUSH_Keyspecs NULL
#endif

/* SCRIPT FLUSH flush_type argument table */
struct COMMAND_ARG SCRIPT_FLUSH_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT FLUSH argument table */
struct COMMAND_ARG SCRIPT_FLUSH_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=SCRIPT_FLUSH_flush_type_Subargs},
};

/* SCRIPT_FLUSH_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_FLUSH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SCRIPT_FLUSH_ReplySchema = {SCRIPT_FLUSH_ReplySchema_elements,.length=1};

/********** SCRIPT HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT HELP history */
#define SCRIPT_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT HELP tips */
#define SCRIPT_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT HELP key specs */
#define SCRIPT_HELP_Keyspecs NULL
#endif

/* SCRIPT_HELP_ReplySchema_items reply schema */
struct jsonObjectElement SCRIPT_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SCRIPT_HELP_ReplySchema_items = {SCRIPT_HELP_ReplySchema_items_elements,.length=1};

/* SCRIPT_HELP_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&SCRIPT_HELP_ReplySchema_items},
};

struct jsonObject SCRIPT_HELP_ReplySchema = {SCRIPT_HELP_ReplySchema_elements,.length=3};

/********** SCRIPT KILL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT KILL history */
#define SCRIPT_KILL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT KILL tips */
const char *SCRIPT_KILL_Tips[] = {
"request_policy:all_shards",
"response_policy:one_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT KILL key specs */
#define SCRIPT_KILL_Keyspecs NULL
#endif

/* SCRIPT_KILL_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_KILL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SCRIPT_KILL_ReplySchema = {SCRIPT_KILL_ReplySchema_elements,.length=1};

/********** SCRIPT LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT LOAD history */
#define SCRIPT_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT LOAD tips */
const char *SCRIPT_LOAD_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT LOAD key specs */
#define SCRIPT_LOAD_Keyspecs NULL
#endif

/* SCRIPT LOAD argument table */
struct COMMAND_ARG SCRIPT_LOAD_Args[] = {
{MAKE_ARG("script",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCRIPT_LOAD_ReplySchema reply schema */
struct jsonObjectElement SCRIPT_LOAD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The SHA1 digest of the script added into the script cache"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SCRIPT_LOAD_ReplySchema = {SCRIPT_LOAD_ReplySchema_elements,.length=2};

/* SCRIPT command table */
struct COMMAND_STRUCT SCRIPT_Subcommands[] = {
{MAKE_CMD("debug","Sets the debug mode of server-side Lua scripts.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_DEBUG_History,0,SCRIPT_DEBUG_Tips,0,scriptCommand,3,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_DEBUG_Keyspecs,0,NULL,1),.args=SCRIPT_DEBUG_Args,.reply_schema=&SCRIPT_DEBUG_ReplySchema},
{MAKE_CMD("exists","Determines whether server-side Lua scripts exist in the script cache.","O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_EXISTS_History,0,SCRIPT_EXISTS_Tips,2,scriptCommand,-3,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_EXISTS_Keyspecs,0,NULL,1),.args=SCRIPT_EXISTS_Args,.reply_schema=&SCRIPT_EXISTS_ReplySchema},
{MAKE_CMD("flush","Removes all server-side Lua scripts from the script cache.","O(N) with N being the number of scripts in cache","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_FLUSH_History,1,SCRIPT_FLUSH_Tips,2,scriptCommand,-2,CMD_NOSCRIPT,ACL_CATEGORY_SCRIPTING,SCRIPT_FLUSH_Keyspecs,0,NULL,1),.args=SCRIPT_FLUSH_Args,.reply_schema=&SCRIPT_FLUSH_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_HELP_History,0,SCRIPT_HELP_Tips,0,scriptCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_SCRIPTING,SCRIPT_HELP_Keyspecs,0,NULL,0),.reply_schema=&SCRIPT_HELP_ReplySchema},
{MAKE_CMD("kill","Terminates a server-side Lua script during execution.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_KILL_History,0,SCRIPT_KILL_Tips,2,scriptCommand,2,CMD_NOSCRIPT|CMD_ALLOW_BUSY,ACL_CATEGORY_SCRIPTING,SCRIPT_KILL_Keyspecs,0,NULL,0),.reply_schema=&SCRIPT_KILL_ReplySchema},
{MAKE_CMD("load","Loads a server-side Lua script to the script cache.","O(N) with N being the length in bytes of the script body.","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_LOAD_History,0,SCRIPT_LOAD_Tips,2,scriptCommand,3,CMD_NOSCRIPT|CMD_STALE,ACL_CATEGORY_SCRIPTING,SCRIPT_LOAD_Keyspecs,0,NULL,1),.args=SCRIPT_LOAD_Args,.reply_schema=&SCRIPT_LOAD_ReplySchema},
{0}
};

/********** SCRIPT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCRIPT history */
#define SCRIPT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCRIPT tips */
#define SCRIPT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCRIPT key specs */
#define SCRIPT_Keyspecs NULL
#endif

/********** SENTINEL CKQUORUM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL CKQUORUM history */
#define SENTINEL_CKQUORUM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL CKQUORUM tips */
#define SENTINEL_CKQUORUM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL CKQUORUM key specs */
#define SENTINEL_CKQUORUM_Keyspecs NULL
#endif

/* SENTINEL CKQUORUM argument table */
struct COMMAND_ARG SENTINEL_CKQUORUM_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_CKQUORUM_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_CKQUORUM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Returns OK if the current Sentinel configuration is able to reach the quorum needed to failover a master, and the majority needed to authorize the failover."},
{JSON_TYPE_STRING,"pattern",.value.string="OK"},
};

struct jsonObject SENTINEL_CKQUORUM_ReplySchema = {SENTINEL_CKQUORUM_ReplySchema_elements,.length=3};

/********** SENTINEL CONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL CONFIG history */
commandHistory SENTINEL_CONFIG_History[] = {
{"7.2.0","Added the ability to set and get multiple parameters in one call."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL CONFIG tips */
#define SENTINEL_CONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL CONFIG key specs */
#define SENTINEL_CONFIG_Keyspecs NULL
#endif

/* SENTINEL CONFIG action set argument table */
struct COMMAND_ARG SENTINEL_CONFIG_action_set_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL CONFIG action argument table */
struct COMMAND_ARG SENTINEL_CONFIG_action_Subargs[] = {
{MAKE_ARG("set",ARG_TYPE_BLOCK,-1,"SET",NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_CONFIG_action_set_Subargs},
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,"GET",NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SENTINEL CONFIG argument table */
struct COMMAND_ARG SENTINEL_CONFIG_Args[] = {
{MAKE_ARG("action",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SENTINEL_CONFIG_action_Subargs},
};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="yes"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_0 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_0_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="no"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_1 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_1_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf array reply schema */
struct jsonObject *SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf[] = {
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_0,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf_1,
};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_oneOf,.length=2}},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="yes"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_0 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_0_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="no"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_1 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_1_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf array reply schema */
struct jsonObject *SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf[] = {
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_0,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf_1,
};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_oneOf,.length=2}},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_ip reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_ip_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_ip = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_ip_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_port reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_port_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_port = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_port_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_user reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_user_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_user = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_user_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_pass reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_pass_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_pass = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_pass_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="debug"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_0 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_0_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="verbose"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_1 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_1_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_2 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="notice"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_2 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_2_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_3 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="warning"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_3 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_3_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_4 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_4_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="nothing"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_4 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_4_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_5 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_5_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="unknown"},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_5 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_5_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf array reply schema */
struct jsonObject *SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf[] = {
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_0,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_1,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_2,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_3,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_4,
&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf_5,
};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_oneOf,.length=6}},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel_elements,.length=1};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0_properties reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_elements[] = {
{JSON_TYPE_OBJECT,"resolve-hostnames",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_resolve_hostnames},
{JSON_TYPE_OBJECT,"announce-hostnames",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_hostnames},
{JSON_TYPE_OBJECT,"announce-ip",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_ip},
{JSON_TYPE_OBJECT,"announce-port",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_announce_port},
{JSON_TYPE_OBJECT,"sentinel-user",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_user},
{JSON_TYPE_OBJECT,"sentinel-pass",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_sentinel_pass},
{JSON_TYPE_OBJECT,"loglevel",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_loglevel},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0_properties = {SENTINEL_CONFIG_ReplySchema_oneOf_0_properties_elements,.length=7};

/* SENTINEL_CONFIG_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_STRING,"description",.value.string="When 'SENTINEL-CONFIG GET' is called, returns a map."},
{JSON_TYPE_OBJECT,"properties",.value.object=&SENTINEL_CONFIG_ReplySchema_oneOf_0_properties},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_0 = {SENTINEL_CONFIG_ReplySchema_oneOf_0_elements,.length=4};

/* SENTINEL_CONFIG_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="When 'SENTINEL-CONFIG SET' is called, returns OK on success."},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema_oneOf_1 = {SENTINEL_CONFIG_ReplySchema_oneOf_1_elements,.length=2};

/* SENTINEL_CONFIG_ReplySchema_oneOf array reply schema */
struct jsonObject *SENTINEL_CONFIG_ReplySchema_oneOf[] = {
&SENTINEL_CONFIG_ReplySchema_oneOf_0,
&SENTINEL_CONFIG_ReplySchema_oneOf_1,
};

/* SENTINEL_CONFIG_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_CONFIG_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_CONFIG_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SENTINEL_CONFIG_ReplySchema = {SENTINEL_CONFIG_ReplySchema_elements,.length=1};

/********** SENTINEL DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL DEBUG history */
#define SENTINEL_DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL DEBUG tips */
#define SENTINEL_DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL DEBUG key specs */
#define SENTINEL_DEBUG_Keyspecs NULL
#endif

/* SENTINEL DEBUG data argument table */
struct COMMAND_ARG SENTINEL_DEBUG_data_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL DEBUG argument table */
struct COMMAND_ARG SENTINEL_DEBUG_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_DEBUG_data_Subargs},
};

/* SENTINEL_DEBUG_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_DEBUG_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The configuration update was successful."},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SENTINEL_DEBUG_ReplySchema_oneOf_0 = {SENTINEL_DEBUG_ReplySchema_oneOf_0_elements,.length=2};

/* SENTINEL_DEBUG_ReplySchema_oneOf_1_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_DEBUG_ReplySchema_oneOf_1_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_DEBUG_ReplySchema_oneOf_1_additionalProperties = {SENTINEL_DEBUG_ReplySchema_oneOf_1_additionalProperties_elements,.length=1};

/* SENTINEL_DEBUG_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_DEBUG_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of configurable time parameters and their values (milliseconds)."},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_DEBUG_ReplySchema_oneOf_1_additionalProperties},
};

struct jsonObject SENTINEL_DEBUG_ReplySchema_oneOf_1 = {SENTINEL_DEBUG_ReplySchema_oneOf_1_elements,.length=3};

/* SENTINEL_DEBUG_ReplySchema_oneOf array reply schema */
struct jsonObject *SENTINEL_DEBUG_ReplySchema_oneOf[] = {
&SENTINEL_DEBUG_ReplySchema_oneOf_0,
&SENTINEL_DEBUG_ReplySchema_oneOf_1,
};

/* SENTINEL_DEBUG_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_DEBUG_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_DEBUG_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SENTINEL_DEBUG_ReplySchema = {SENTINEL_DEBUG_ReplySchema_elements,.length=1};

/********** SENTINEL FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL FAILOVER history */
#define SENTINEL_FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL FAILOVER tips */
#define SENTINEL_FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL FAILOVER key specs */
#define SENTINEL_FAILOVER_Keyspecs NULL
#endif

/* SENTINEL FAILOVER argument table */
struct COMMAND_ARG SENTINEL_FAILOVER_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_FAILOVER_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_FAILOVER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="Force a fail over as if the master was not reachable, and without asking for agreement to other Sentinels."},
};

struct jsonObject SENTINEL_FAILOVER_ReplySchema = {SENTINEL_FAILOVER_ReplySchema_elements,.length=2};

/********** SENTINEL FLUSHCONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL FLUSHCONFIG history */
#define SENTINEL_FLUSHCONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL FLUSHCONFIG tips */
#define SENTINEL_FLUSHCONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL FLUSHCONFIG key specs */
#define SENTINEL_FLUSHCONFIG_Keyspecs NULL
#endif

/* SENTINEL_FLUSHCONFIG_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_FLUSHCONFIG_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="Force Sentinel to rewrite its configuration on disk, including the current Sentinel state."},
};

struct jsonObject SENTINEL_FLUSHCONFIG_ReplySchema = {SENTINEL_FLUSHCONFIG_ReplySchema_elements,.length=2};

/********** SENTINEL GET_MASTER_ADDR_BY_NAME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME history */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME tips */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL GET_MASTER_ADDR_BY_NAME key specs */
#define SENTINEL_GET_MASTER_ADDR_BY_NAME_Keyspecs NULL
#endif

/* SENTINEL GET_MASTER_ADDR_BY_NAME argument table */
struct COMMAND_ARG SENTINEL_GET_MASTER_ADDR_BY_NAME_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_0 reply schema */
struct jsonObjectElement SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="IP addr or hostname."},
};

struct jsonObject SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_0 = {SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_0_elements,.length=2};

/* SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_1 reply schema */
struct jsonObjectElement SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Port."},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+"},
};

struct jsonObject SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_1 = {SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_1_elements,.length=3};

/* SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items array reply schema */
struct jsonObject *SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items[] = {
&SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_0,
&SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items_1,
};

/* SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_items,.length=2}},
};

struct jsonObject SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema = {SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema_elements,.length=4};

/********** SENTINEL HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL HELP history */
#define SENTINEL_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL HELP tips */
#define SENTINEL_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL HELP key specs */
#define SENTINEL_HELP_Keyspecs NULL
#endif

/* SENTINEL_HELP_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_HELP_ReplySchema_items = {SENTINEL_HELP_ReplySchema_items_elements,.length=1};

/* SENTINEL_HELP_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_HELP_ReplySchema_items},
};

struct jsonObject SENTINEL_HELP_ReplySchema = {SENTINEL_HELP_ReplySchema_elements,.length=3};

/********** SENTINEL INFO_CACHE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL INFO_CACHE history */
#define SENTINEL_INFO_CACHE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL INFO_CACHE tips */
#define SENTINEL_INFO_CACHE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL INFO_CACHE key specs */
#define SENTINEL_INFO_CACHE_Keyspecs NULL
#endif

/* SENTINEL INFO_CACHE argument table */
struct COMMAND_ARG SENTINEL_INFO_CACHE_Args[] = {
{MAKE_ARG("nodename",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The master name."},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_0 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_0_elements,.length=2};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_0 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of milliseconds since when the INFO was cached."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_0 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_0_elements,.length=2};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The cached INFO string."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_0 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_0_elements,.length=2};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="No cached INFO string."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_1 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_1_elements,.length=2};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf array reply schema */
struct jsonObject *SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf[] = {
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_0,
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf_1,
};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The cached INFO string or null."},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_oneOf,.length=2}},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1_elements,.length=2};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items array reply schema */
struct jsonObject *SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items[] = {
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_0,
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items_1,
};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="This is an array of pairs, the odd entries are the INFO age, and the even entries are the cached INFO string. The first pair belong to the master and the rest are its replicas."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_items,.length=2}},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1_elements,.length=5};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf array reply schema */
struct jsonObject *SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf[] = {
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_0,
&SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf_1,
};

/* SENTINEL_INFO_CACHE_ReplySchema_items_0 reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_items_0_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_INFO_CACHE_ReplySchema_items_0_oneOf,.length=2}},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema_items_0 = {SENTINEL_INFO_CACHE_ReplySchema_items_0_elements,.length=1};

/* SENTINEL_INFO_CACHE_ReplySchema_items array reply schema */
struct jsonObject *SENTINEL_INFO_CACHE_ReplySchema_items[] = {
&SENTINEL_INFO_CACHE_ReplySchema_items_0,
};

/* SENTINEL_INFO_CACHE_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_INFO_CACHE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="This is actually a map, the odd entries are a master name, and the even entries are the last cached INFO output from that master and all its replicas."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=0},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4294967295},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SENTINEL_INFO_CACHE_ReplySchema_items,.length=1}},
};

struct jsonObject SENTINEL_INFO_CACHE_ReplySchema = {SENTINEL_INFO_CACHE_ReplySchema_elements,.length=5};

/********** SENTINEL IS_MASTER_DOWN_BY_ADDR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR history */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR tips */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL IS_MASTER_DOWN_BY_ADDR key specs */
#define SENTINEL_IS_MASTER_DOWN_BY_ADDR_Keyspecs NULL
#endif

/* SENTINEL IS_MASTER_DOWN_BY_ADDR argument table */
struct COMMAND_ARG SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args[] = {
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("current-epoch",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("runid",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="Master is up."},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_0 = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_0_elements,.length=2};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="Master is down."},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_1 = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_1_elements,.length=2};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf array reply schema */
struct jsonObject *SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf[] = {
&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_0,
&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf_1,
};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0 reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_oneOf,.length=2}},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0 = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0_elements,.length=1};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_1 reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Sentinel address."},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_1 = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_1_elements,.length=2};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_2 reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Port."},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_2 = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_2_elements,.length=2};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items array reply schema */
struct jsonObject *SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items[] = {
&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_0,
&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_1,
&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items_2,
};

/* SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_items,.length=3}},
};

struct jsonObject SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema = {SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema_elements,.length=4};

/********** SENTINEL MASTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MASTER history */
#define SENTINEL_MASTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MASTER tips */
#define SENTINEL_MASTER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MASTER key specs */
#define SENTINEL_MASTER_Keyspecs NULL
#endif

/* SENTINEL MASTER argument table */
struct COMMAND_ARG SENTINEL_MASTER_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_MASTER_ReplySchema_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_MASTER_ReplySchema_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_MASTER_ReplySchema_additionalProperties = {SENTINEL_MASTER_ReplySchema_additionalProperties_elements,.length=1};

/* SENTINEL_MASTER_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_MASTER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_STRING,"description",.value.string="The state and info of the specified master."},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_MASTER_ReplySchema_additionalProperties},
};

struct jsonObject SENTINEL_MASTER_ReplySchema = {SENTINEL_MASTER_ReplySchema_elements,.length=3};

/********** SENTINEL MASTERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MASTERS history */
#define SENTINEL_MASTERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MASTERS tips */
#define SENTINEL_MASTERS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MASTERS key specs */
#define SENTINEL_MASTERS_Keyspecs NULL
#endif

/* SENTINEL_MASTERS_ReplySchema_items_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_MASTERS_ReplySchema_items_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_MASTERS_ReplySchema_items_additionalProperties = {SENTINEL_MASTERS_ReplySchema_items_additionalProperties_elements,.length=1};

/* SENTINEL_MASTERS_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_MASTERS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_MASTERS_ReplySchema_items_additionalProperties},
};

struct jsonObject SENTINEL_MASTERS_ReplySchema_items = {SENTINEL_MASTERS_ReplySchema_items_elements,.length=2};

/* SENTINEL_MASTERS_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_MASTERS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of monitored Redis masters, and their state."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_MASTERS_ReplySchema_items},
};

struct jsonObject SENTINEL_MASTERS_ReplySchema = {SENTINEL_MASTERS_ReplySchema_elements,.length=3};

/********** SENTINEL MONITOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MONITOR history */
#define SENTINEL_MONITOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MONITOR tips */
#define SENTINEL_MONITOR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MONITOR key specs */
#define SENTINEL_MONITOR_Keyspecs NULL
#endif

/* SENTINEL MONITOR argument table */
struct COMMAND_ARG SENTINEL_MONITOR_Args[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ip",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("quorum",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_MONITOR_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_MONITOR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SENTINEL_MONITOR_ReplySchema = {SENTINEL_MONITOR_ReplySchema_elements,.length=1};

/********** SENTINEL MYID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL MYID history */
#define SENTINEL_MYID_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL MYID tips */
#define SENTINEL_MYID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL MYID key specs */
#define SENTINEL_MYID_Keyspecs NULL
#endif

/* SENTINEL_MYID_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_MYID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Node ID of the sentinel instance."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_MYID_ReplySchema = {SENTINEL_MYID_ReplySchema_elements,.length=2};

/********** SENTINEL PENDING_SCRIPTS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL PENDING_SCRIPTS history */
#define SENTINEL_PENDING_SCRIPTS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL PENDING_SCRIPTS tips */
#define SENTINEL_PENDING_SCRIPTS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL PENDING_SCRIPTS key specs */
#define SENTINEL_PENDING_SCRIPTS_Keyspecs NULL
#endif

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_items reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_items = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_items_elements,.length=1};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Script arguments."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_items},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv_elements,.length=3};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_flags reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_flags_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Script flags."},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_flags = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_flags_elements,.length=2};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_pid reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_pid_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Script pid."},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_pid = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_pid_elements,.length=2};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_time reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_time_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Script run-time."},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_time = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_time_elements,.length=2};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_delay reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_delay_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Script run-delay."},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_delay = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_delay_elements,.length=2};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_retry_num reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_retry_num_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Number of times we tried to execute the script."},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_retry_num = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_retry_num_elements,.length=2};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"argv",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_argv},
{JSON_TYPE_OBJECT,"flags",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_flags},
{JSON_TYPE_OBJECT,"pid",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_pid},
{JSON_TYPE_OBJECT,"run-time",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_time},
{JSON_TYPE_OBJECT,"run-delay",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_run_delay},
{JSON_TYPE_OBJECT,"retry-num",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_retry_num},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties_elements,.length=6};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items_properties},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema_items = {SENTINEL_PENDING_SCRIPTS_ReplySchema_items_elements,.length=3};

/* SENTINEL_PENDING_SCRIPTS_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_PENDING_SCRIPTS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of pending scripts."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_PENDING_SCRIPTS_ReplySchema_items},
};

struct jsonObject SENTINEL_PENDING_SCRIPTS_ReplySchema = {SENTINEL_PENDING_SCRIPTS_ReplySchema_elements,.length=3};

/********** SENTINEL REMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL REMOVE history */
#define SENTINEL_REMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL REMOVE tips */
#define SENTINEL_REMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL REMOVE key specs */
#define SENTINEL_REMOVE_Keyspecs NULL
#endif

/* SENTINEL REMOVE argument table */
struct COMMAND_ARG SENTINEL_REMOVE_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_REMOVE_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_REMOVE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SENTINEL_REMOVE_ReplySchema = {SENTINEL_REMOVE_ReplySchema_elements,.length=1};

/********** SENTINEL REPLICAS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL REPLICAS history */
#define SENTINEL_REPLICAS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL REPLICAS tips */
#define SENTINEL_REPLICAS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL REPLICAS key specs */
#define SENTINEL_REPLICAS_Keyspecs NULL
#endif

/* SENTINEL REPLICAS argument table */
struct COMMAND_ARG SENTINEL_REPLICAS_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_REPLICAS_ReplySchema_items_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_REPLICAS_ReplySchema_items_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_REPLICAS_ReplySchema_items_additionalProperties = {SENTINEL_REPLICAS_ReplySchema_items_additionalProperties_elements,.length=1};

/* SENTINEL_REPLICAS_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_REPLICAS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_REPLICAS_ReplySchema_items_additionalProperties},
};

struct jsonObject SENTINEL_REPLICAS_ReplySchema_items = {SENTINEL_REPLICAS_ReplySchema_items_elements,.length=2};

/* SENTINEL_REPLICAS_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_REPLICAS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of replicas for this master, and their state."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_REPLICAS_ReplySchema_items},
};

struct jsonObject SENTINEL_REPLICAS_ReplySchema = {SENTINEL_REPLICAS_ReplySchema_elements,.length=3};

/********** SENTINEL RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL RESET history */
#define SENTINEL_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL RESET tips */
#define SENTINEL_RESET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL RESET key specs */
#define SENTINEL_RESET_Keyspecs NULL
#endif

/* SENTINEL RESET argument table */
struct COMMAND_ARG SENTINEL_RESET_Args[] = {
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_RESET_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_RESET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The number of masters that were reset."},
};

struct jsonObject SENTINEL_RESET_ReplySchema = {SENTINEL_RESET_ReplySchema_elements,.length=2};

/********** SENTINEL SENTINELS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SENTINELS history */
#define SENTINEL_SENTINELS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SENTINELS tips */
#define SENTINEL_SENTINELS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SENTINELS key specs */
#define SENTINEL_SENTINELS_Keyspecs NULL
#endif

/* SENTINEL SENTINELS argument table */
struct COMMAND_ARG SENTINEL_SENTINELS_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_SENTINELS_ReplySchema_items_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_SENTINELS_ReplySchema_items_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_SENTINELS_ReplySchema_items_additionalProperties = {SENTINEL_SENTINELS_ReplySchema_items_additionalProperties_elements,.length=1};

/* SENTINEL_SENTINELS_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_SENTINELS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_SENTINELS_ReplySchema_items_additionalProperties},
};

struct jsonObject SENTINEL_SENTINELS_ReplySchema_items = {SENTINEL_SENTINELS_ReplySchema_items_elements,.length=2};

/* SENTINEL_SENTINELS_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_SENTINELS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of sentinel instances, and their state."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_SENTINELS_ReplySchema_items},
};

struct jsonObject SENTINEL_SENTINELS_ReplySchema = {SENTINEL_SENTINELS_ReplySchema_elements,.length=3};

/********** SENTINEL SET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SET history */
#define SENTINEL_SET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SET tips */
#define SENTINEL_SET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SET key specs */
#define SENTINEL_SET_Keyspecs NULL
#endif

/* SENTINEL SET data argument table */
struct COMMAND_ARG SENTINEL_SET_data_Subargs[] = {
{MAKE_ARG("option",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL SET argument table */
struct COMMAND_ARG SENTINEL_SET_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=SENTINEL_SET_data_Subargs},
};

/* SENTINEL_SET_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_SET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SENTINEL_SET_ReplySchema = {SENTINEL_SET_ReplySchema_elements,.length=1};

/********** SENTINEL SIMULATE_FAILURE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SIMULATE_FAILURE history */
#define SENTINEL_SIMULATE_FAILURE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SIMULATE_FAILURE tips */
#define SENTINEL_SIMULATE_FAILURE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SIMULATE_FAILURE key specs */
#define SENTINEL_SIMULATE_FAILURE_Keyspecs NULL
#endif

/* SENTINEL SIMULATE_FAILURE mode argument table */
struct COMMAND_ARG SENTINEL_SIMULATE_FAILURE_mode_Subargs[] = {
{MAKE_ARG("crash-after-election",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("crash-after-promotion",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("help",ARG_TYPE_PURE_TOKEN,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL SIMULATE_FAILURE argument table */
struct COMMAND_ARG SENTINEL_SIMULATE_FAILURE_Args[] = {
{MAKE_ARG("mode",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,3,NULL),.subargs=SENTINEL_SIMULATE_FAILURE_mode_Subargs},
};

/* SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The simulated flag was set."},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_0 = {SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_0_elements,.length=2};

/* SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_items reply schema */
struct jsonObjectElement SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_items = {SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_items_elements,.length=1};

/* SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Supported simulates flags. Returned in case `HELP` was used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_items},
};

struct jsonObject SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1 = {SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1_elements,.length=3};

/* SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf array reply schema */
struct jsonObject *SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf[] = {
&SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_0,
&SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf_1,
};

/* SENTINEL_SIMULATE_FAILURE_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_SIMULATE_FAILURE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SENTINEL_SIMULATE_FAILURE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SENTINEL_SIMULATE_FAILURE_ReplySchema = {SENTINEL_SIMULATE_FAILURE_ReplySchema_elements,.length=1};

/********** SENTINEL SLAVES ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL SLAVES history */
#define SENTINEL_SLAVES_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL SLAVES tips */
#define SENTINEL_SLAVES_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL SLAVES key specs */
#define SENTINEL_SLAVES_Keyspecs NULL
#endif

/* SENTINEL SLAVES argument table */
struct COMMAND_ARG SENTINEL_SLAVES_Args[] = {
{MAKE_ARG("master-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SENTINEL_SLAVES_ReplySchema_items_additionalProperties reply schema */
struct jsonObjectElement SENTINEL_SLAVES_ReplySchema_items_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SENTINEL_SLAVES_ReplySchema_items_additionalProperties = {SENTINEL_SLAVES_ReplySchema_items_additionalProperties_elements,.length=1};

/* SENTINEL_SLAVES_ReplySchema_items reply schema */
struct jsonObjectElement SENTINEL_SLAVES_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&SENTINEL_SLAVES_ReplySchema_items_additionalProperties},
};

struct jsonObject SENTINEL_SLAVES_ReplySchema_items = {SENTINEL_SLAVES_ReplySchema_items_elements,.length=2};

/* SENTINEL_SLAVES_ReplySchema reply schema */
struct jsonObjectElement SENTINEL_SLAVES_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of monitored replicas, and their state."},
{JSON_TYPE_OBJECT,"items",.value.object=&SENTINEL_SLAVES_ReplySchema_items},
};

struct jsonObject SENTINEL_SLAVES_ReplySchema = {SENTINEL_SLAVES_ReplySchema_elements,.length=3};

/* SENTINEL command table */
struct COMMAND_STRUCT SENTINEL_Subcommands[] = {
{MAKE_CMD("ckquorum","Checks for a Redis Sentinel quorum.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_CKQUORUM_History,0,SENTINEL_CKQUORUM_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_CKQUORUM_Keyspecs,0,NULL,1),.args=SENTINEL_CKQUORUM_Args,.reply_schema=&SENTINEL_CKQUORUM_ReplySchema},
{MAKE_CMD("config","Configures Redis Sentinel.","O(N) when N is the number of configuration parameters provided","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_CONFIG_History,1,SENTINEL_CONFIG_Tips,0,sentinelCommand,-4,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_CONFIG_Keyspecs,0,NULL,1),.args=SENTINEL_CONFIG_Args,.reply_schema=&SENTINEL_CONFIG_ReplySchema},
{MAKE_CMD("debug","Lists or updates the current configurable parameters of Redis Sentinel.","O(N) where N is the number of configurable parameters","7.0.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_DEBUG_History,0,SENTINEL_DEBUG_Tips,0,sentinelCommand,-2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_DEBUG_Keyspecs,0,NULL,1),.args=SENTINEL_DEBUG_Args,.reply_schema=&SENTINEL_DEBUG_ReplySchema},
{MAKE_CMD("failover","Forces a Redis Sentinel failover.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_FAILOVER_History,0,SENTINEL_FAILOVER_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_FAILOVER_Keyspecs,0,NULL,1),.args=SENTINEL_FAILOVER_Args,.reply_schema=&SENTINEL_FAILOVER_ReplySchema},
{MAKE_CMD("flushconfig","Rewrites the Redis Sentinel configuration file.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_FLUSHCONFIG_History,0,SENTINEL_FLUSHCONFIG_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_FLUSHCONFIG_Keyspecs,0,NULL,0),.reply_schema=&SENTINEL_FLUSHCONFIG_ReplySchema},
{MAKE_CMD("get-master-addr-by-name","Returns the port and address of a master Redis instance.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_GET_MASTER_ADDR_BY_NAME_History,0,SENTINEL_GET_MASTER_ADDR_BY_NAME_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_GET_MASTER_ADDR_BY_NAME_Keyspecs,0,NULL,1),.args=SENTINEL_GET_MASTER_ADDR_BY_NAME_Args,.reply_schema=&SENTINEL_GET_MASTER_ADDR_BY_NAME_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_HELP_History,0,SENTINEL_HELP_Tips,0,sentinelCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_HELP_Keyspecs,0,NULL,0),.reply_schema=&SENTINEL_HELP_ReplySchema},
{MAKE_CMD("info-cache","Returns the cached `INFO` replies from the deployment's instances.","O(N) where N is the number of instances","3.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_INFO_CACHE_History,0,SENTINEL_INFO_CACHE_Tips,0,sentinelCommand,-3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_INFO_CACHE_Keyspecs,0,NULL,1),.args=SENTINEL_INFO_CACHE_Args,.reply_schema=&SENTINEL_INFO_CACHE_ReplySchema},
{MAKE_CMD("is-master-down-by-addr","Determines whether a master Redis instance is down.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_IS_MASTER_DOWN_BY_ADDR_History,0,SENTINEL_IS_MASTER_DOWN_BY_ADDR_Tips,0,sentinelCommand,6,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_IS_MASTER_DOWN_BY_ADDR_Keyspecs,0,NULL,4),.args=SENTINEL_IS_MASTER_DOWN_BY_ADDR_Args,.reply_schema=&SENTINEL_IS_MASTER_DOWN_BY_ADDR_ReplySchema},
{MAKE_CMD("master","Returns the state of a master Redis instance.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MASTER_History,0,SENTINEL_MASTER_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MASTER_Keyspecs,0,NULL,1),.args=SENTINEL_MASTER_Args,.reply_schema=&SENTINEL_MASTER_ReplySchema},
{MAKE_CMD("masters","Returns a list of monitored Redis masters.","O(N) where N is the number of masters","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MASTERS_History,0,SENTINEL_MASTERS_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MASTERS_Keyspecs,0,NULL,0),.reply_schema=&SENTINEL_MASTERS_ReplySchema},
{MAKE_CMD("monitor","Starts monitoring.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MONITOR_History,0,SENTINEL_MONITOR_Tips,0,sentinelCommand,6,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MONITOR_Keyspecs,0,NULL,4),.args=SENTINEL_MONITOR_Args,.reply_schema=&SENTINEL_MONITOR_ReplySchema},
{MAKE_CMD("myid","Returns the Redis Sentinel instance ID.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_MYID_History,0,SENTINEL_MYID_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_MYID_Keyspecs,0,NULL,0),.reply_schema=&SENTINEL_MYID_ReplySchema},
{MAKE_CMD("pending-scripts","Returns information about pending scripts for Redis Sentinel.",NULL,"2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_PENDING_SCRIPTS_History,0,SENTINEL_PENDING_SCRIPTS_Tips,0,sentinelCommand,2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_PENDING_SCRIPTS_Keyspecs,0,NULL,0),.reply_schema=&SENTINEL_PENDING_SCRIPTS_ReplySchema},
{MAKE_CMD("remove","Stops monitoring.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_REMOVE_History,0,SENTINEL_REMOVE_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_REMOVE_Keyspecs,0,NULL,1),.args=SENTINEL_REMOVE_Args,.reply_schema=&SENTINEL_REMOVE_ReplySchema},
{MAKE_CMD("replicas","Returns a list of the monitored Redis replicas.","O(N) where N is the number of replicas","5.0.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_REPLICAS_History,0,SENTINEL_REPLICAS_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_REPLICAS_Keyspecs,0,NULL,1),.args=SENTINEL_REPLICAS_Args,.reply_schema=&SENTINEL_REPLICAS_ReplySchema},
{MAKE_CMD("reset","Resets Redis masters by name matching a pattern.","O(N) where N is the number of monitored masters","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_RESET_History,0,SENTINEL_RESET_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_RESET_Keyspecs,0,NULL,1),.args=SENTINEL_RESET_Args,.reply_schema=&SENTINEL_RESET_ReplySchema},
{MAKE_CMD("sentinels","Returns a list of Sentinel instances.","O(N) where N is the number of Sentinels","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SENTINELS_History,0,SENTINEL_SENTINELS_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SENTINELS_Keyspecs,0,NULL,1),.args=SENTINEL_SENTINELS_Args,.reply_schema=&SENTINEL_SENTINELS_ReplySchema},
{MAKE_CMD("set","Changes the configuration of a monitored Redis master.","O(1)","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SET_History,0,SENTINEL_SET_Tips,0,sentinelCommand,-5,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SET_Keyspecs,0,NULL,2),.args=SENTINEL_SET_Args,.reply_schema=&SENTINEL_SET_ReplySchema},
{MAKE_CMD("simulate-failure","Simulates failover scenarios.",NULL,"3.2.0",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SIMULATE_FAILURE_History,0,SENTINEL_SIMULATE_FAILURE_Tips,0,sentinelCommand,-3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SIMULATE_FAILURE_Keyspecs,0,NULL,1),.args=SENTINEL_SIMULATE_FAILURE_Args,.reply_schema=&SENTINEL_SIMULATE_FAILURE_ReplySchema},
{MAKE_CMD("slaves","Returns a list of the monitored replicas.","O(N) where N is the number of replicas.","2.8.0",CMD_DOC_DEPRECATED,"`SENTINEL REPLICAS`","5.0.0","sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_SLAVES_History,0,SENTINEL_SLAVES_Tips,0,sentinelCommand,3,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_SLAVES_Keyspecs,0,NULL,1),.args=SENTINEL_SLAVES_Args,.reply_schema=&SENTINEL_SLAVES_ReplySchema},
{0}
};

/********** SENTINEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SENTINEL history */
#define SENTINEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SENTINEL tips */
#define SENTINEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SENTINEL key specs */
#define SENTINEL_Keyspecs NULL
#endif

/********** ACL CAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL CAT history */
#define ACL_CAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL CAT tips */
#define ACL_CAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL CAT key specs */
#define ACL_CAT_Keyspecs NULL
#endif

/* ACL CAT argument table */
struct COMMAND_ARG ACL_CAT_Args[] = {
{MAKE_ARG("category",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ACL_CAT_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ACL_CAT_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_CAT_ReplySchema_anyOf_0_items = {ACL_CAT_ReplySchema_anyOf_0_items_elements,.length=1};

/* ACL_CAT_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ACL_CAT_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="In case `category` was not given, a list of existing ACL categories"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_CAT_ReplySchema_anyOf_0_items},
};

struct jsonObject ACL_CAT_ReplySchema_anyOf_0 = {ACL_CAT_ReplySchema_anyOf_0_elements,.length=3};

/* ACL_CAT_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ACL_CAT_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_CAT_ReplySchema_anyOf_1_items = {ACL_CAT_ReplySchema_anyOf_1_items_elements,.length=1};

/* ACL_CAT_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ACL_CAT_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="In case `category` was given, list of commands that fall under the provided ACL category"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_CAT_ReplySchema_anyOf_1_items},
};

struct jsonObject ACL_CAT_ReplySchema_anyOf_1 = {ACL_CAT_ReplySchema_anyOf_1_elements,.length=3};

/* ACL_CAT_ReplySchema_anyOf array reply schema */
struct jsonObject *ACL_CAT_ReplySchema_anyOf[] = {
&ACL_CAT_ReplySchema_anyOf_0,
&ACL_CAT_ReplySchema_anyOf_1,
};

/* ACL_CAT_ReplySchema reply schema */
struct jsonObjectElement ACL_CAT_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ACL_CAT_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ACL_CAT_ReplySchema = {ACL_CAT_ReplySchema_elements,.length=1};

/********** ACL DELUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL DELUSER history */
#define ACL_DELUSER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL DELUSER tips */
const char *ACL_DELUSER_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL DELUSER key specs */
#define ACL_DELUSER_Keyspecs NULL
#endif

/* ACL DELUSER argument table */
struct COMMAND_ARG ACL_DELUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* ACL_DELUSER_ReplySchema reply schema */
struct jsonObjectElement ACL_DELUSER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The number of users that were deleted"},
};

struct jsonObject ACL_DELUSER_ReplySchema = {ACL_DELUSER_ReplySchema_elements,.length=2};

/********** ACL DRYRUN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL DRYRUN history */
#define ACL_DRYRUN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL DRYRUN tips */
#define ACL_DRYRUN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL DRYRUN key specs */
#define ACL_DRYRUN_Keyspecs NULL
#endif

/* ACL DRYRUN argument table */
struct COMMAND_ARG ACL_DRYRUN_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* ACL_DRYRUN_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ACL_DRYRUN_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="The given user may successfully execute the given command."},
};

struct jsonObject ACL_DRYRUN_ReplySchema_anyOf_0 = {ACL_DRYRUN_ReplySchema_anyOf_0_elements,.length=2};

/* ACL_DRYRUN_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ACL_DRYRUN_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The description of the problem, in case the user is not allowed to run the given command."},
};

struct jsonObject ACL_DRYRUN_ReplySchema_anyOf_1 = {ACL_DRYRUN_ReplySchema_anyOf_1_elements,.length=2};

/* ACL_DRYRUN_ReplySchema_anyOf array reply schema */
struct jsonObject *ACL_DRYRUN_ReplySchema_anyOf[] = {
&ACL_DRYRUN_ReplySchema_anyOf_0,
&ACL_DRYRUN_ReplySchema_anyOf_1,
};

/* ACL_DRYRUN_ReplySchema reply schema */
struct jsonObjectElement ACL_DRYRUN_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ACL_DRYRUN_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ACL_DRYRUN_ReplySchema = {ACL_DRYRUN_ReplySchema_elements,.length=1};

/********** ACL GENPASS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL GENPASS history */
#define ACL_GENPASS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL GENPASS tips */
#define ACL_GENPASS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL GENPASS key specs */
#define ACL_GENPASS_Keyspecs NULL
#endif

/* ACL GENPASS argument table */
struct COMMAND_ARG ACL_GENPASS_Args[] = {
{MAKE_ARG("bits",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ACL_GENPASS_ReplySchema reply schema */
struct jsonObjectElement ACL_GENPASS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Pseudorandom data. By default it contains 64 bytes, representing 256 bits of data. If `bits` was given, the output string length is the number of specified bits (rounded to the next multiple of 4) divided by 4."},
};

struct jsonObject ACL_GENPASS_ReplySchema = {ACL_GENPASS_ReplySchema_elements,.length=2};

/********** ACL GETUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL GETUSER history */
commandHistory ACL_GETUSER_History[] = {
{"6.2.0","Added Pub/Sub channel patterns."},
{"7.0.0","Added selectors and changed the format of key and channel patterns from a list to their rule representation."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL GETUSER tips */
#define ACL_GETUSER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL GETUSER key specs */
#define ACL_GETUSER_Keyspecs NULL
#endif

/* ACL GETUSER argument table */
struct COMMAND_ARG ACL_GETUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_items reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_items = {ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_items_elements,.length=1};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_flags reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_items},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_flags = {ACL_GETUSER_ReplySchema_oneOf_0_properties_flags_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_items reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_items = {ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_items_elements,.length=1};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_items},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords = {ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_commands reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_commands_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="root selector's commands"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_commands = {ACL_GETUSER_ReplySchema_oneOf_0_properties_commands_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_keys reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_keys_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="root selector's keys"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_keys = {ACL_GETUSER_ReplySchema_oneOf_0_properties_keys_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_channels reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_channels_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="root selector's channels"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_channels = {ACL_GETUSER_ReplySchema_oneOf_0_properties_channels_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_commands reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_commands_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_commands = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_commands_elements,.length=1};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_keys reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_keys_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_keys = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_keys_elements,.length=1};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_channels reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_channels_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_channels = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_channels_elements,.length=1};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"commands",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_commands},
{JSON_TYPE_OBJECT,"keys",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_keys},
{JSON_TYPE_OBJECT,"channels",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_channels},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties_elements,.length=3};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_properties},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items_elements,.length=3};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_items},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors = {ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf_0_properties reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_properties_elements[] = {
{JSON_TYPE_OBJECT,"flags",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_flags},
{JSON_TYPE_OBJECT,"passwords",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_passwords},
{JSON_TYPE_OBJECT,"commands",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_commands},
{JSON_TYPE_OBJECT,"keys",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_keys},
{JSON_TYPE_OBJECT,"channels",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_channels},
{JSON_TYPE_OBJECT,"selectors",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties_selectors},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0_properties = {ACL_GETUSER_ReplySchema_oneOf_0_properties_elements,.length=6};

/* ACL_GETUSER_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a set of ACL rule definitions for the user"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&ACL_GETUSER_ReplySchema_oneOf_0_properties},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_0 = {ACL_GETUSER_ReplySchema_oneOf_0_elements,.length=4};

/* ACL_GETUSER_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If user does not exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject ACL_GETUSER_ReplySchema_oneOf_1 = {ACL_GETUSER_ReplySchema_oneOf_1_elements,.length=2};

/* ACL_GETUSER_ReplySchema_oneOf array reply schema */
struct jsonObject *ACL_GETUSER_ReplySchema_oneOf[] = {
&ACL_GETUSER_ReplySchema_oneOf_0,
&ACL_GETUSER_ReplySchema_oneOf_1,
};

/* ACL_GETUSER_ReplySchema reply schema */
struct jsonObjectElement ACL_GETUSER_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ACL_GETUSER_ReplySchema_oneOf,.length=2}},
};

struct jsonObject ACL_GETUSER_ReplySchema = {ACL_GETUSER_ReplySchema_elements,.length=1};

/********** ACL HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL HELP history */
#define ACL_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL HELP tips */
#define ACL_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL HELP key specs */
#define ACL_HELP_Keyspecs NULL
#endif

/* ACL_HELP_ReplySchema_items reply schema */
struct jsonObjectElement ACL_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_HELP_ReplySchema_items = {ACL_HELP_ReplySchema_items_elements,.length=1};

/* ACL_HELP_ReplySchema reply schema */
struct jsonObjectElement ACL_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="A list of subcommands and their description"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_HELP_ReplySchema_items},
};

struct jsonObject ACL_HELP_ReplySchema = {ACL_HELP_ReplySchema_elements,.length=3};

/********** ACL LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LIST history */
#define ACL_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LIST tips */
#define ACL_LIST_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LIST key specs */
#define ACL_LIST_Keyspecs NULL
#endif

/* ACL_LIST_ReplySchema_items reply schema */
struct jsonObjectElement ACL_LIST_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LIST_ReplySchema_items = {ACL_LIST_ReplySchema_items_elements,.length=1};

/* ACL_LIST_ReplySchema reply schema */
struct jsonObjectElement ACL_LIST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="A list of currently active ACL rules"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_LIST_ReplySchema_items},
};

struct jsonObject ACL_LIST_ReplySchema = {ACL_LIST_ReplySchema_elements,.length=3};

/********** ACL LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LOAD history */
#define ACL_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LOAD tips */
#define ACL_LOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LOAD key specs */
#define ACL_LOAD_Keyspecs NULL
#endif

/* ACL_LOAD_ReplySchema reply schema */
struct jsonObjectElement ACL_LOAD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject ACL_LOAD_ReplySchema = {ACL_LOAD_ReplySchema_elements,.length=1};

/********** ACL LOG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL LOG history */
commandHistory ACL_LOG_History[] = {
{"7.2.0","Added entry ID, timestamp created, and timestamp last updated."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL LOG tips */
#define ACL_LOG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL LOG key specs */
#define ACL_LOG_Keyspecs NULL
#endif

/* ACL LOG operation argument table */
struct COMMAND_ARG ACL_LOG_operation_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("reset",ARG_TYPE_PURE_TOKEN,-1,"RESET",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ACL LOG argument table */
struct COMMAND_ARG ACL_LOG_Args[] = {
{MAKE_ARG("operation",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ACL_LOG_operation_Subargs},
};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_count reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_count_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_count = {ACL_LOG_ReplySchema_oneOf_0_items_properties_count_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_reason reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_reason_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_reason = {ACL_LOG_ReplySchema_oneOf_0_items_properties_reason_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_context reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_context_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_context = {ACL_LOG_ReplySchema_oneOf_0_items_properties_context_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_object reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_object_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_object = {ACL_LOG_ReplySchema_oneOf_0_items_properties_object_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_username reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_username_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_username = {ACL_LOG_ReplySchema_oneOf_0_items_properties_username_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_age_seconds reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_age_seconds_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_age_seconds = {ACL_LOG_ReplySchema_oneOf_0_items_properties_age_seconds_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_client_info reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_client_info_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_client_info = {ACL_LOG_ReplySchema_oneOf_0_items_properties_client_info_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_entry_id reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_entry_id_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_entry_id = {ACL_LOG_ReplySchema_oneOf_0_items_properties_entry_id_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_created reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_created_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_created = {ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_created_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_last_updated reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_last_updated_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_last_updated = {ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_last_updated_elements,.length=1};

/* ACL_LOG_ReplySchema_oneOf_0_items_properties reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"count",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_count},
{JSON_TYPE_OBJECT,"reason",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_reason},
{JSON_TYPE_OBJECT,"context",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_context},
{JSON_TYPE_OBJECT,"object",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_object},
{JSON_TYPE_OBJECT,"username",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_username},
{JSON_TYPE_OBJECT,"age-seconds",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_age_seconds},
{JSON_TYPE_OBJECT,"client-info",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_client_info},
{JSON_TYPE_OBJECT,"entry-id",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_entry_id},
{JSON_TYPE_OBJECT,"timestamp-created",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_created},
{JSON_TYPE_OBJECT,"timestamp-last-updated",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties_timestamp_last_updated},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items_properties = {ACL_LOG_ReplySchema_oneOf_0_items_properties_elements,.length=10};

/* ACL_LOG_ReplySchema_oneOf_0_items reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items_properties},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0_items = {ACL_LOG_ReplySchema_oneOf_0_items_elements,.length=3};

/* ACL_LOG_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `RESET` was not given, a list of recent ACL security events."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_LOG_ReplySchema_oneOf_0_items},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_0 = {ACL_LOG_ReplySchema_oneOf_0_elements,.length=3};

/* ACL_LOG_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
{JSON_TYPE_STRING,"description",.value.string="In case `RESET` was given, OK indicates ACL log was cleared."},
};

struct jsonObject ACL_LOG_ReplySchema_oneOf_1 = {ACL_LOG_ReplySchema_oneOf_1_elements,.length=2};

/* ACL_LOG_ReplySchema_oneOf array reply schema */
struct jsonObject *ACL_LOG_ReplySchema_oneOf[] = {
&ACL_LOG_ReplySchema_oneOf_0,
&ACL_LOG_ReplySchema_oneOf_1,
};

/* ACL_LOG_ReplySchema reply schema */
struct jsonObjectElement ACL_LOG_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ACL_LOG_ReplySchema_oneOf,.length=2}},
};

struct jsonObject ACL_LOG_ReplySchema = {ACL_LOG_ReplySchema_elements,.length=1};

/********** ACL SAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL SAVE history */
#define ACL_SAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL SAVE tips */
const char *ACL_SAVE_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL SAVE key specs */
#define ACL_SAVE_Keyspecs NULL
#endif

/* ACL_SAVE_ReplySchema reply schema */
struct jsonObjectElement ACL_SAVE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject ACL_SAVE_ReplySchema = {ACL_SAVE_ReplySchema_elements,.length=1};

/********** ACL SETUSER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL SETUSER history */
commandHistory ACL_SETUSER_History[] = {
{"6.2.0","Added Pub/Sub channel patterns."},
{"7.0.0","Added selectors and key based permissions."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL SETUSER tips */
const char *ACL_SETUSER_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL SETUSER key specs */
#define ACL_SETUSER_Keyspecs NULL
#endif

/* ACL SETUSER argument table */
struct COMMAND_ARG ACL_SETUSER_Args[] = {
{MAKE_ARG("username",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("rule",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* ACL_SETUSER_ReplySchema reply schema */
struct jsonObjectElement ACL_SETUSER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject ACL_SETUSER_ReplySchema = {ACL_SETUSER_ReplySchema_elements,.length=1};

/********** ACL USERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL USERS history */
#define ACL_USERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL USERS tips */
#define ACL_USERS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL USERS key specs */
#define ACL_USERS_Keyspecs NULL
#endif

/* ACL_USERS_ReplySchema_items reply schema */
struct jsonObjectElement ACL_USERS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ACL_USERS_ReplySchema_items = {ACL_USERS_ReplySchema_items_elements,.length=1};

/* ACL_USERS_ReplySchema reply schema */
struct jsonObjectElement ACL_USERS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of existing ACL users"},
{JSON_TYPE_OBJECT,"items",.value.object=&ACL_USERS_ReplySchema_items},
};

struct jsonObject ACL_USERS_ReplySchema = {ACL_USERS_ReplySchema_elements,.length=3};

/********** ACL WHOAMI ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL WHOAMI history */
#define ACL_WHOAMI_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL WHOAMI tips */
#define ACL_WHOAMI_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL WHOAMI key specs */
#define ACL_WHOAMI_Keyspecs NULL
#endif

/* ACL_WHOAMI_ReplySchema reply schema */
struct jsonObjectElement ACL_WHOAMI_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The username of the current connection."},
};

struct jsonObject ACL_WHOAMI_ReplySchema = {ACL_WHOAMI_ReplySchema_elements,.length=2};

/* ACL command table */
struct COMMAND_STRUCT ACL_Subcommands[] = {
{MAKE_CMD("cat","Lists the ACL categories, or the commands inside a category.","O(1) since the categories and commands are a fixed set.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_CAT_History,0,ACL_CAT_Tips,0,aclCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_CAT_Keyspecs,0,NULL,1),.args=ACL_CAT_Args,.reply_schema=&ACL_CAT_ReplySchema},
{MAKE_CMD("deluser","Deletes ACL users, and terminates their connections.","O(1) amortized time considering the typical user.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_DELUSER_History,0,ACL_DELUSER_Tips,2,aclCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_DELUSER_Keyspecs,0,NULL,1),.args=ACL_DELUSER_Args,.reply_schema=&ACL_DELUSER_ReplySchema},
{MAKE_CMD("dryrun","Simulates the execution of a command by a user, without executing the command.","O(1).","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_DRYRUN_History,0,ACL_DRYRUN_Tips,0,aclCommand,-4,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_DRYRUN_Keyspecs,0,NULL,3),.args=ACL_DRYRUN_Args,.reply_schema=&ACL_DRYRUN_ReplySchema},
{MAKE_CMD("genpass","Generates a pseudorandom, secure password that can be used to identify ACL users.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_GENPASS_History,0,ACL_GENPASS_Tips,0,aclCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_GENPASS_Keyspecs,0,NULL,1),.args=ACL_GENPASS_Args,.reply_schema=&ACL_GENPASS_ReplySchema},
{MAKE_CMD("getuser","Lists the ACL rules of a user.","O(N). Where N is the number of password, command and pattern rules that the user has.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_GETUSER_History,2,ACL_GETUSER_Tips,0,aclCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_GETUSER_Keyspecs,0,NULL,1),.args=ACL_GETUSER_Args,.reply_schema=&ACL_GETUSER_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_HELP_History,0,ACL_HELP_Tips,0,aclCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_HELP_Keyspecs,0,NULL,0),.reply_schema=&ACL_HELP_ReplySchema},
{MAKE_CMD("list","Dumps the effective rules in ACL file format.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LIST_History,0,ACL_LIST_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LIST_Keyspecs,0,NULL,0),.reply_schema=&ACL_LIST_ReplySchema},
{MAKE_CMD("load","Reloads the rules from the configured ACL file.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LOAD_History,0,ACL_LOAD_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LOAD_Keyspecs,0,NULL,0),.reply_schema=&ACL_LOAD_ReplySchema},
{MAKE_CMD("log","Lists recent security events generated due to ACL rules.","O(N) with N being the number of entries shown.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_LOG_History,1,ACL_LOG_Tips,0,aclCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_LOG_Keyspecs,0,NULL,1),.args=ACL_LOG_Args,.reply_schema=&ACL_LOG_ReplySchema},
{MAKE_CMD("save","Saves the effective ACL rules in the configured ACL file.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_SAVE_History,0,ACL_SAVE_Tips,2,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_SAVE_Keyspecs,0,NULL,0),.reply_schema=&ACL_SAVE_ReplySchema},
{MAKE_CMD("setuser","Creates and modifies an ACL user and its rules.","O(N). Where N is the number of rules provided.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_SETUSER_History,2,ACL_SETUSER_Tips,2,aclCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_SETUSER_Keyspecs,0,NULL,2),.args=ACL_SETUSER_Args,.reply_schema=&ACL_SETUSER_ReplySchema},
{MAKE_CMD("users","Lists all ACL users.","O(N). Where N is the number of configured users.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_USERS_History,0,ACL_USERS_Tips,0,aclCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_USERS_Keyspecs,0,NULL,0),.reply_schema=&ACL_USERS_ReplySchema},
{MAKE_CMD("whoami","Returns the authenticated username of the current connection.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_WHOAMI_History,0,ACL_WHOAMI_Tips,0,aclCommand,2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,ACL_WHOAMI_Keyspecs,0,NULL,0),.reply_schema=&ACL_WHOAMI_ReplySchema},
{0}
};

/********** ACL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ACL history */
#define ACL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ACL tips */
#define ACL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ACL key specs */
#define ACL_Keyspecs NULL
#endif

/********** BGREWRITEAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BGREWRITEAOF history */
#define BGREWRITEAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BGREWRITEAOF tips */
#define BGREWRITEAOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BGREWRITEAOF key specs */
#define BGREWRITEAOF_Keyspecs NULL
#endif

/* BGREWRITEAOF_ReplySchema reply schema */
struct jsonObjectElement BGREWRITEAOF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A simple string reply indicating that the rewriting started or is about to start ASAP"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BGREWRITEAOF_ReplySchema = {BGREWRITEAOF_ReplySchema_elements,.length=2};

/********** BGSAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BGSAVE history */
commandHistory BGSAVE_History[] = {
{"3.2.2","Added the `SCHEDULE` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BGSAVE tips */
#define BGSAVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BGSAVE key specs */
#define BGSAVE_Keyspecs NULL
#endif

/* BGSAVE argument table */
struct COMMAND_ARG BGSAVE_Args[] = {
{MAKE_ARG("schedule",ARG_TYPE_PURE_TOKEN,-1,"SCHEDULE",NULL,"3.2.2",CMD_ARG_OPTIONAL,0,NULL)},
};

/* BGSAVE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BGSAVE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="Background saving started"},
};

struct jsonObject BGSAVE_ReplySchema_oneOf_0 = {BGSAVE_ReplySchema_oneOf_0_elements,.length=1};

/* BGSAVE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BGSAVE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="Background saving scheduled"},
};

struct jsonObject BGSAVE_ReplySchema_oneOf_1 = {BGSAVE_ReplySchema_oneOf_1_elements,.length=1};

/* BGSAVE_ReplySchema_oneOf array reply schema */
struct jsonObject *BGSAVE_ReplySchema_oneOf[] = {
&BGSAVE_ReplySchema_oneOf_0,
&BGSAVE_ReplySchema_oneOf_1,
};

/* BGSAVE_ReplySchema reply schema */
struct jsonObjectElement BGSAVE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BGSAVE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BGSAVE_ReplySchema = {BGSAVE_ReplySchema_elements,.length=1};

/********** COMMAND COUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND COUNT history */
#define COMMAND_COUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND COUNT tips */
#define COMMAND_COUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND COUNT key specs */
#define COMMAND_COUNT_Keyspecs NULL
#endif

/* COMMAND_COUNT_ReplySchema reply schema */
struct jsonObjectElement COMMAND_COUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of total commands in this Redis server."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_COUNT_ReplySchema = {COMMAND_COUNT_ReplySchema_elements,.length=2};

/********** COMMAND DOCS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND DOCS history */
#define COMMAND_DOCS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND DOCS tips */
const char *COMMAND_DOCS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND DOCS key specs */
#define COMMAND_DOCS_Keyspecs NULL
#endif

/* COMMAND DOCS argument table */
struct COMMAND_ARG COMMAND_DOCS_Args[] = {
{MAKE_ARG("command-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_summary reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_summary_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="short command description"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_summary = {COMMAND_DOCS_ReplySchema_patternProperties______properties_summary_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_since reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_since_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the Redis version that added the command (or for module commands, the module version)."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_since = {COMMAND_DOCS_ReplySchema_patternProperties______properties_since_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_0 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="bitmap"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_0 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_0_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_1 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="cluster"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_1 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_1_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_2 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="connection"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_2 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_2_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_3 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="generic"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_3 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_3_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_4 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_4_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="geo"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_4 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_4_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_5 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_5_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="hash"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_5 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_5_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_6 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_6_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="hyperloglog"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_6 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_6_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_7 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_7_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="list"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_7 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_7_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_8 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_8_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="module"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_8 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_8_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_9 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_9_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="pubsub"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_9 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_9_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_10 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_10_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="scripting"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_10 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_10_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_11 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_11_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="sentinel"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_11 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_11_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_12 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_12_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="server"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_12 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_12_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_13 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_13_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="set"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_13 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_13_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_14 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_14_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="sorted-set"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_14 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_14_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_15 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_15_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="stream"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_15 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_15_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_16 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_16_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_16 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_16_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_17 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_17_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="transactions"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_17 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_17_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf array reply schema */
struct jsonObject *COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf[] = {
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_0,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_1,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_2,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_3,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_4,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_5,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_6,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_7,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_8,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_9,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_10,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_11,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_12,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_13,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_14,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_15,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_16,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf_17,
};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_group reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_group_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the functional group to which the command belongs"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=COMMAND_DOCS_ReplySchema_patternProperties______properties_group_oneOf,.length=18}},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_group = {COMMAND_DOCS_ReplySchema_patternProperties______properties_group_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_complexity reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_complexity_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a short explanation about the command's time complexity."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_complexity = {COMMAND_DOCS_ReplySchema_patternProperties______properties_complexity_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_module reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_module_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_module = {COMMAND_DOCS_ReplySchema_patternProperties______properties_module_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_0 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the command is deprecated."},
{JSON_TYPE_STRING,"const",.value.string="deprecated"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_0 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_0_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_1 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="a system command that isn't meant to be called by users."},
{JSON_TYPE_STRING,"const",.value.string="syscmd"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_1 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_1_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf array reply schema */
struct jsonObject *COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf[] = {
&COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_0,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf_1,
};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_oneOf,.length=2}},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items = {COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array of documentation flags"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_items},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags = {COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags_elements,.length=3};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_deprecated_since reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_deprecated_since_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the Redis version that deprecated the command (or for module commands, the module version)"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_deprecated_since = {COMMAND_DOCS_ReplySchema_patternProperties______properties_deprecated_since_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_replaced_by reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_replaced_by_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the alternative for a deprecated command."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_replaced_by = {COMMAND_DOCS_ReplySchema_patternProperties______properties_replaced_by_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_0 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The Redis version that the entry applies to."},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_0 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_0_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_1 reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The description of the change."},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_1 = {COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_1_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items array reply schema */
struct jsonObject *COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items[] = {
&COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_0,
&COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items_1,
};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_items,.length=2}},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items = {COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items_elements,.length=4};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_history reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_history_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array of historical notes describing changes to the command's behavior or arguments."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_history_items},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_history = {COMMAND_DOCS_ReplySchema_patternProperties______properties_history_elements,.length=3};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_name reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_name = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_name_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_type reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_type_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_type = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_type_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_display_text reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_display_text_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_display_text = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_display_text_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_key_spec_index reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_key_spec_index_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_key_spec_index = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_key_spec_index_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_token reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_token_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_token = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_token_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_summary reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_summary_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_summary = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_summary_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_since reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_since_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_since = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_since_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_deprecated_since reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_deprecated_since_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_deprecated_since = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_deprecated_since_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_items reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_items = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_items_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_items},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_arguments reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_arguments_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_arguments = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_arguments_elements,.length=1};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_name},
{JSON_TYPE_OBJECT,"type",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_type},
{JSON_TYPE_OBJECT,"display_text",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_display_text},
{JSON_TYPE_OBJECT,"key_spec_index",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_key_spec_index},
{JSON_TYPE_OBJECT,"token",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_token},
{JSON_TYPE_OBJECT,"summary",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_summary},
{JSON_TYPE_OBJECT,"since",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_since},
{JSON_TYPE_OBJECT,"deprecated_since",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_deprecated_since},
{JSON_TYPE_OBJECT,"flags",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_flags},
{JSON_TYPE_OBJECT,"arguments",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_arguments},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties_elements,.length=10};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_properties},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items_elements,.length=3};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="an array of maps that describe the command's arguments."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_items},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments = {COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments_elements,.length=3};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_reply_schema reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_reply_schema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command reply schema"},
{JSON_TYPE_STRING,"type",.value.string="object"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_reply_schema = {COMMAND_DOCS_ReplySchema_patternProperties______properties_reply_schema_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties_subcommands reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_subcommands_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map where each key is a subcommand, and each value is the documentary information"},
{JSON_TYPE_STRING,"$ref",.value.string="#"},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties_subcommands = {COMMAND_DOCS_ReplySchema_patternProperties______properties_subcommands_elements,.length=2};

/* COMMAND_DOCS_ReplySchema_patternProperties______properties reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______properties_elements[] = {
{JSON_TYPE_OBJECT,"summary",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_summary},
{JSON_TYPE_OBJECT,"since",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_since},
{JSON_TYPE_OBJECT,"group",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_group},
{JSON_TYPE_OBJECT,"complexity",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_complexity},
{JSON_TYPE_OBJECT,"module",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_module},
{JSON_TYPE_OBJECT,"doc_flags",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_doc_flags},
{JSON_TYPE_OBJECT,"deprecated_since",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_deprecated_since},
{JSON_TYPE_OBJECT,"replaced_by",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_replaced_by},
{JSON_TYPE_OBJECT,"history",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_history},
{JSON_TYPE_OBJECT,"arguments",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_arguments},
{JSON_TYPE_OBJECT,"reply_schema",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_reply_schema},
{JSON_TYPE_OBJECT,"subcommands",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties_subcommands},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties______properties = {COMMAND_DOCS_ReplySchema_patternProperties______properties_elements,.length=12};

/* COMMAND_DOCS_ReplySchema_patternProperties_____ reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties______elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties______properties},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties_____ = {COMMAND_DOCS_ReplySchema_patternProperties______elements,.length=3};

/* COMMAND_DOCS_ReplySchema_patternProperties reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_patternProperties_elements[] = {
{JSON_TYPE_OBJECT,"^.*$",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties_____},
};

struct jsonObject COMMAND_DOCS_ReplySchema_patternProperties = {COMMAND_DOCS_ReplySchema_patternProperties_elements,.length=1};

/* COMMAND_DOCS_ReplySchema reply schema */
struct jsonObjectElement COMMAND_DOCS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map where each key is a command name, and each value is the documentary information"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"patternProperties",.value.object=&COMMAND_DOCS_ReplySchema_patternProperties},
};

struct jsonObject COMMAND_DOCS_ReplySchema = {COMMAND_DOCS_ReplySchema_elements,.length=4};

/********** COMMAND GETKEYS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND GETKEYS history */
#define COMMAND_GETKEYS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND GETKEYS tips */
#define COMMAND_GETKEYS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND GETKEYS key specs */
#define COMMAND_GETKEYS_Keyspecs NULL
#endif

/* COMMAND GETKEYS argument table */
struct COMMAND_ARG COMMAND_GETKEYS_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* COMMAND_GETKEYS_ReplySchema_items reply schema */
struct jsonObjectElement COMMAND_GETKEYS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_GETKEYS_ReplySchema_items = {COMMAND_GETKEYS_ReplySchema_items_elements,.length=1};

/* COMMAND_GETKEYS_ReplySchema reply schema */
struct jsonObjectElement COMMAND_GETKEYS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of keys from the given Redis command."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_GETKEYS_ReplySchema_items},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
};

struct jsonObject COMMAND_GETKEYS_ReplySchema = {COMMAND_GETKEYS_ReplySchema_elements,.length=4};

/********** COMMAND GETKEYSANDFLAGS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND GETKEYSANDFLAGS history */
#define COMMAND_GETKEYSANDFLAGS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND GETKEYSANDFLAGS tips */
#define COMMAND_GETKEYSANDFLAGS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND GETKEYSANDFLAGS key specs */
#define COMMAND_GETKEYSANDFLAGS_Keyspecs NULL
#endif

/* COMMAND GETKEYSANDFLAGS argument table */
struct COMMAND_ARG COMMAND_GETKEYSANDFLAGS_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_0 = {COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_0_elements,.length=2};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_items reply schema */
struct jsonObjectElement COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_items = {COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_items_elements,.length=1};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Set of key flags"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_items},
};

struct jsonObject COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1 = {COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1_elements,.length=4};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items array reply schema */
struct jsonObject *COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items[] = {
&COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_0,
&COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items_1,
};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema_items reply schema */
struct jsonObjectElement COMMAND_GETKEYSANDFLAGS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=COMMAND_GETKEYSANDFLAGS_ReplySchema_items_items,.length=2}},
};

struct jsonObject COMMAND_GETKEYSANDFLAGS_ReplySchema_items = {COMMAND_GETKEYSANDFLAGS_ReplySchema_items_elements,.length=4};

/* COMMAND_GETKEYSANDFLAGS_ReplySchema reply schema */
struct jsonObjectElement COMMAND_GETKEYSANDFLAGS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of keys from the given Redis command and their usage flags."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_GETKEYSANDFLAGS_ReplySchema_items},
};

struct jsonObject COMMAND_GETKEYSANDFLAGS_ReplySchema = {COMMAND_GETKEYSANDFLAGS_ReplySchema_elements,.length=4};

/********** COMMAND HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND HELP history */
#define COMMAND_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND HELP tips */
#define COMMAND_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND HELP key specs */
#define COMMAND_HELP_Keyspecs NULL
#endif

/* COMMAND_HELP_ReplySchema_items reply schema */
struct jsonObjectElement COMMAND_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_HELP_ReplySchema_items = {COMMAND_HELP_ReplySchema_items_elements,.length=1};

/* COMMAND_HELP_ReplySchema reply schema */
struct jsonObjectElement COMMAND_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_HELP_ReplySchema_items},
};

struct jsonObject COMMAND_HELP_ReplySchema = {COMMAND_HELP_ReplySchema_elements,.length=3};

/********** COMMAND INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND INFO history */
commandHistory COMMAND_INFO_History[] = {
{"7.0.0","Allowed to be called with no argument to get info on all commands."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND INFO tips */
const char *COMMAND_INFO_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND INFO key specs */
#define COMMAND_INFO_Keyspecs NULL
#endif

/* COMMAND INFO argument table */
struct COMMAND_ARG COMMAND_INFO_Args[] = {
{MAKE_ARG("command-name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* COMMAND_INFO_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command does not exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_0 = {COMMAND_INFO_ReplySchema_items_oneOf_0_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_0 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_0 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_0_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_1 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command arity"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_1 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_1_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command flag"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_items = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_items_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_2 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command flags"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_items},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_2 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_2_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_3 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command first key index"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_3 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_3_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_4 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_4_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command last key index"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_4 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_4_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_5 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_5_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command key step index"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_5 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_5_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command category"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_items = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_items_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_6 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command categories"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_items},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_6 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_6_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command tip"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_items = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_items_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_7 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command tips"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_items},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_7 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_7_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_notes reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_notes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_notes = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_notes_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_items = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_items_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_items},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_type reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_type_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_type = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_type_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_0 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="unknown type, empty map"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_0 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_0_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_index reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_index_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_index = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_index_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_elements[] = {
{JSON_TYPE_OBJECT,"index",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_index},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="index type"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1_elements,.length=4};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_keyword reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_keyword_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_keyword = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_keyword_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_startfrom reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_startfrom_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_startfrom = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_startfrom_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_elements[] = {
{JSON_TYPE_OBJECT,"keyword",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_keyword},
{JSON_TYPE_OBJECT,"startfrom",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_startfrom},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="keyword type"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2_elements,.length=4};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf array reply schema */
struct jsonObject *COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf[] = {
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_0,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_1,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf_2,
};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_anyOf,.length=3}},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_elements[] = {
{JSON_TYPE_OBJECT,"type",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_type},
{JSON_TYPE_OBJECT,"spec",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_spec},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_type reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_type_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_type = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_type_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_0 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="unknown type"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_0 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_0_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_lastkey reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_lastkey_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_lastkey = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_lastkey_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_keystep reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_keystep_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_keystep = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_keystep_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_limit reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_limit_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_limit = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_limit_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_elements[] = {
{JSON_TYPE_OBJECT,"lastkey",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_lastkey},
{JSON_TYPE_OBJECT,"keystep",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_keystep},
{JSON_TYPE_OBJECT,"limit",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_limit},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="range type"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1_elements,.length=4};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keynumidx reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keynumidx_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keynumidx = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keynumidx_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_firstkey reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_firstkey_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_firstkey = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_firstkey_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keystep reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keystep_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keystep = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keystep_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_elements[] = {
{JSON_TYPE_OBJECT,"keynumidx",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keynumidx},
{JSON_TYPE_OBJECT,"firstkey",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_firstkey},
{JSON_TYPE_OBJECT,"keystep",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_keystep},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="keynum type"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2_elements,.length=4};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf array reply schema */
struct jsonObject *COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf[] = {
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_0,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_1,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf_2,
};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_anyOf,.length=3}},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec_elements,.length=1};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_elements[] = {
{JSON_TYPE_OBJECT,"type",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_type},
{JSON_TYPE_OBJECT,"spec",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_spec},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"notes",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_notes},
{JSON_TYPE_OBJECT,"flags",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_flags},
{JSON_TYPE_OBJECT,"begin_search",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_begin_search},
{JSON_TYPE_OBJECT,"find_keys",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_find_keys},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties_elements,.length=4};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_properties},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_8 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command key specs"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_items},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_8 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_8_elements,.length=3};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items_9 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_items_9_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="subcommands"},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1_items_9 = {COMMAND_INFO_ReplySchema_items_oneOf_1_items_9_elements,.length=2};

/* COMMAND_INFO_ReplySchema_items_oneOf_1_items array reply schema */
struct jsonObject *COMMAND_INFO_ReplySchema_items_oneOf_1_items[] = {
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_0,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_1,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_2,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_3,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_4,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_5,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_6,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_7,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_8,
&COMMAND_INFO_ReplySchema_items_oneOf_1_items_9,
};

/* COMMAND_INFO_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command info array output"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=10},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=10},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=COMMAND_INFO_ReplySchema_items_oneOf_1_items,.length=10}},
};

struct jsonObject COMMAND_INFO_ReplySchema_items_oneOf_1 = {COMMAND_INFO_ReplySchema_items_oneOf_1_elements,.length=5};

/* COMMAND_INFO_ReplySchema_items_oneOf array reply schema */
struct jsonObject *COMMAND_INFO_ReplySchema_items_oneOf[] = {
&COMMAND_INFO_ReplySchema_items_oneOf_0,
&COMMAND_INFO_ReplySchema_items_oneOf_1,
};

/* COMMAND_INFO_ReplySchema_items reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=COMMAND_INFO_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject COMMAND_INFO_ReplySchema_items = {COMMAND_INFO_ReplySchema_items_elements,.length=1};

/* COMMAND_INFO_ReplySchema reply schema */
struct jsonObjectElement COMMAND_INFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_INFO_ReplySchema_items},
};

struct jsonObject COMMAND_INFO_ReplySchema = {COMMAND_INFO_ReplySchema_elements,.length=2};

/********** COMMAND LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND LIST history */
#define COMMAND_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND LIST tips */
const char *COMMAND_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND LIST key specs */
#define COMMAND_LIST_Keyspecs NULL
#endif

/* COMMAND LIST filterby argument table */
struct COMMAND_ARG COMMAND_LIST_filterby_Subargs[] = {
{MAKE_ARG("module-name",ARG_TYPE_STRING,-1,"MODULE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("category",ARG_TYPE_STRING,-1,"ACLCAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"PATTERN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* COMMAND LIST argument table */
struct COMMAND_ARG COMMAND_LIST_Args[] = {
{MAKE_ARG("filterby",ARG_TYPE_ONEOF,-1,"FILTERBY",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=COMMAND_LIST_filterby_Subargs},
};

/* COMMAND_LIST_ReplySchema_items reply schema */
struct jsonObjectElement COMMAND_LIST_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="command name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject COMMAND_LIST_ReplySchema_items = {COMMAND_LIST_ReplySchema_items_elements,.length=2};

/* COMMAND_LIST_ReplySchema reply schema */
struct jsonObjectElement COMMAND_LIST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&COMMAND_LIST_ReplySchema_items},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
};

struct jsonObject COMMAND_LIST_ReplySchema = {COMMAND_LIST_ReplySchema_elements,.length=3};

/* COMMAND command table */
struct COMMAND_STRUCT COMMAND_Subcommands[] = {
{MAKE_CMD("count","Returns a count of commands.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_COUNT_History,0,COMMAND_COUNT_Tips,0,commandCountCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_COUNT_Keyspecs,0,NULL,0),.reply_schema=&COMMAND_COUNT_ReplySchema},
{MAKE_CMD("docs","Returns documentary information about one, multiple or all commands.","O(N) where N is the number of commands to look up","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_DOCS_History,0,COMMAND_DOCS_Tips,1,commandDocsCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_DOCS_Keyspecs,0,NULL,1),.args=COMMAND_DOCS_Args,.reply_schema=&COMMAND_DOCS_ReplySchema},
{MAKE_CMD("getkeys","Extracts the key names from an arbitrary command.","O(N) where N is the number of arguments to the command","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_GETKEYS_History,0,COMMAND_GETKEYS_Tips,0,commandGetKeysCommand,-3,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_GETKEYS_Keyspecs,0,NULL,2),.args=COMMAND_GETKEYS_Args,.reply_schema=&COMMAND_GETKEYS_ReplySchema},
{MAKE_CMD("getkeysandflags","Extracts the key names and access flags for an arbitrary command.","O(N) where N is the number of arguments to the command","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_GETKEYSANDFLAGS_History,0,COMMAND_GETKEYSANDFLAGS_Tips,0,commandGetKeysAndFlagsCommand,-3,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_GETKEYSANDFLAGS_Keyspecs,0,NULL,2),.args=COMMAND_GETKEYSANDFLAGS_Args,.reply_schema=&COMMAND_GETKEYSANDFLAGS_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_HELP_History,0,COMMAND_HELP_Tips,0,commandHelpCommand,2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_HELP_Keyspecs,0,NULL,0),.reply_schema=&COMMAND_HELP_ReplySchema},
{MAKE_CMD("info","Returns information about one, multiple or all commands.","O(N) where N is the number of commands to look up","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_INFO_History,1,COMMAND_INFO_Tips,1,commandInfoCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_INFO_Keyspecs,0,NULL,1),.args=COMMAND_INFO_Args,.reply_schema=&COMMAND_INFO_ReplySchema},
{MAKE_CMD("list","Returns a list of command names.","O(N) where N is the total number of Redis commands","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_LIST_History,0,COMMAND_LIST_Tips,1,commandListCommand,-2,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_LIST_Keyspecs,0,NULL,1),.args=COMMAND_LIST_Args,.reply_schema=&COMMAND_LIST_ReplySchema},
{0}
};

/********** COMMAND ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* COMMAND history */
#define COMMAND_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* COMMAND tips */
const char *COMMAND_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* COMMAND key specs */
#define COMMAND_Keyspecs NULL
#endif

/********** CONFIG GET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG GET history */
commandHistory CONFIG_GET_History[] = {
{"7.0.0","Added the ability to pass multiple pattern parameters in one call"},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG GET tips */
#define CONFIG_GET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG GET key specs */
#define CONFIG_GET_Keyspecs NULL
#endif

/* CONFIG GET argument table */
struct COMMAND_ARG CONFIG_GET_Args[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* CONFIG_GET_ReplySchema_additionalProperties reply schema */
struct jsonObjectElement CONFIG_GET_ReplySchema_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CONFIG_GET_ReplySchema_additionalProperties = {CONFIG_GET_ReplySchema_additionalProperties_elements,.length=1};

/* CONFIG_GET_ReplySchema reply schema */
struct jsonObjectElement CONFIG_GET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&CONFIG_GET_ReplySchema_additionalProperties},
};

struct jsonObject CONFIG_GET_ReplySchema = {CONFIG_GET_ReplySchema_elements,.length=2};

/********** CONFIG HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG HELP history */
#define CONFIG_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG HELP tips */
#define CONFIG_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG HELP key specs */
#define CONFIG_HELP_Keyspecs NULL
#endif

/* CONFIG_HELP_ReplySchema_items reply schema */
struct jsonObjectElement CONFIG_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject CONFIG_HELP_ReplySchema_items = {CONFIG_HELP_ReplySchema_items_elements,.length=1};

/* CONFIG_HELP_ReplySchema reply schema */
struct jsonObjectElement CONFIG_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&CONFIG_HELP_ReplySchema_items},
};

struct jsonObject CONFIG_HELP_ReplySchema = {CONFIG_HELP_ReplySchema_elements,.length=3};

/********** CONFIG RESETSTAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG RESETSTAT history */
#define CONFIG_RESETSTAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG RESETSTAT tips */
const char *CONFIG_RESETSTAT_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG RESETSTAT key specs */
#define CONFIG_RESETSTAT_Keyspecs NULL
#endif

/* CONFIG_RESETSTAT_ReplySchema reply schema */
struct jsonObjectElement CONFIG_RESETSTAT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CONFIG_RESETSTAT_ReplySchema = {CONFIG_RESETSTAT_ReplySchema_elements,.length=1};

/********** CONFIG REWRITE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG REWRITE history */
#define CONFIG_REWRITE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG REWRITE tips */
const char *CONFIG_REWRITE_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG REWRITE key specs */
#define CONFIG_REWRITE_Keyspecs NULL
#endif

/* CONFIG_REWRITE_ReplySchema reply schema */
struct jsonObjectElement CONFIG_REWRITE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CONFIG_REWRITE_ReplySchema = {CONFIG_REWRITE_ReplySchema_elements,.length=1};

/********** CONFIG SET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG SET history */
commandHistory CONFIG_SET_History[] = {
{"7.0.0","Added the ability to set multiple parameters in one call."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG SET tips */
const char *CONFIG_SET_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG SET key specs */
#define CONFIG_SET_Keyspecs NULL
#endif

/* CONFIG SET data argument table */
struct COMMAND_ARG CONFIG_SET_data_Subargs[] = {
{MAKE_ARG("parameter",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* CONFIG SET argument table */
struct COMMAND_ARG CONFIG_SET_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=CONFIG_SET_data_Subargs},
};

/* CONFIG_SET_ReplySchema reply schema */
struct jsonObjectElement CONFIG_SET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject CONFIG_SET_ReplySchema = {CONFIG_SET_ReplySchema_elements,.length=1};

/* CONFIG command table */
struct COMMAND_STRUCT CONFIG_Subcommands[] = {
{MAKE_CMD("get","Returns the effective values of configuration parameters.","O(N) when N is the number of configuration parameters provided","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_GET_History,1,CONFIG_GET_Tips,0,configGetCommand,-3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_GET_Keyspecs,0,NULL,1),.args=CONFIG_GET_Args,.reply_schema=&CONFIG_GET_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_HELP_History,0,CONFIG_HELP_Tips,0,configHelpCommand,2,CMD_LOADING|CMD_STALE,0,CONFIG_HELP_Keyspecs,0,NULL,0),.reply_schema=&CONFIG_HELP_ReplySchema},
{MAKE_CMD("resetstat","Resets the server's statistics.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_RESETSTAT_History,0,CONFIG_RESETSTAT_Tips,2,configResetStatCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_RESETSTAT_Keyspecs,0,NULL,0),.reply_schema=&CONFIG_RESETSTAT_ReplySchema},
{MAKE_CMD("rewrite","Persists the effective configuration to file.","O(1)","2.8.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_REWRITE_History,0,CONFIG_REWRITE_Tips,2,configRewriteCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_REWRITE_Keyspecs,0,NULL,0),.reply_schema=&CONFIG_REWRITE_ReplySchema},
{MAKE_CMD("set","Sets configuration parameters in-flight.","O(N) when N is the number of configuration parameters provided","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_SET_History,1,CONFIG_SET_Tips,2,configSetCommand,-4,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,CONFIG_SET_Keyspecs,0,NULL,1),.args=CONFIG_SET_Args,.reply_schema=&CONFIG_SET_ReplySchema},
{0}
};

/********** CONFIG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* CONFIG history */
#define CONFIG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* CONFIG tips */
#define CONFIG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* CONFIG key specs */
#define CONFIG_Keyspecs NULL
#endif

/********** DBSIZE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DBSIZE history */
#define DBSIZE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DBSIZE tips */
const char *DBSIZE_Tips[] = {
"request_policy:all_shards",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DBSIZE key specs */
#define DBSIZE_Keyspecs NULL
#endif

/* DBSIZE_ReplySchema reply schema */
struct jsonObjectElement DBSIZE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The number of keys in the currently-selected database."},
};

struct jsonObject DBSIZE_ReplySchema = {DBSIZE_ReplySchema_elements,.length=2};

/********** DEBUG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DEBUG history */
#define DEBUG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DEBUG tips */
#define DEBUG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DEBUG key specs */
#define DEBUG_Keyspecs NULL
#endif

/********** FAILOVER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FAILOVER history */
#define FAILOVER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FAILOVER tips */
#define FAILOVER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FAILOVER key specs */
#define FAILOVER_Keyspecs NULL
#endif

/* FAILOVER target argument table */
struct COMMAND_ARG FAILOVER_target_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* FAILOVER argument table */
struct COMMAND_ARG FAILOVER_Args[] = {
{MAKE_ARG("target",ARG_TYPE_BLOCK,-1,"TO",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=FAILOVER_target_Subargs},
{MAKE_ARG("abort",ARG_TYPE_PURE_TOKEN,-1,"ABORT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"TIMEOUT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* FAILOVER_ReplySchema reply schema */
struct jsonObjectElement FAILOVER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FAILOVER_ReplySchema = {FAILOVER_ReplySchema_elements,.length=1};

/********** FLUSHALL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FLUSHALL history */
commandHistory FLUSHALL_History[] = {
{"4.0.0","Added the `ASYNC` flushing mode modifier."},
{"6.2.0","Added the `SYNC` flushing mode modifier."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FLUSHALL tips */
const char *FLUSHALL_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FLUSHALL key specs */
#define FLUSHALL_Keyspecs NULL
#endif

/* FLUSHALL flush_type argument table */
struct COMMAND_ARG FLUSHALL_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,"4.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* FLUSHALL argument table */
struct COMMAND_ARG FLUSHALL_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FLUSHALL_flush_type_Subargs},
};

/* FLUSHALL_ReplySchema reply schema */
struct jsonObjectElement FLUSHALL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FLUSHALL_ReplySchema = {FLUSHALL_ReplySchema_elements,.length=1};

/********** FLUSHDB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* FLUSHDB history */
commandHistory FLUSHDB_History[] = {
{"4.0.0","Added the `ASYNC` flushing mode modifier."},
{"6.2.0","Added the `SYNC` flushing mode modifier."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* FLUSHDB tips */
const char *FLUSHDB_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* FLUSHDB key specs */
#define FLUSHDB_Keyspecs NULL
#endif

/* FLUSHDB flush_type argument table */
struct COMMAND_ARG FLUSHDB_flush_type_Subargs[] = {
{MAKE_ARG("async",ARG_TYPE_PURE_TOKEN,-1,"ASYNC",NULL,"4.0.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sync",ARG_TYPE_PURE_TOKEN,-1,"SYNC",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* FLUSHDB argument table */
struct COMMAND_ARG FLUSHDB_Args[] = {
{MAKE_ARG("flush-type",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=FLUSHDB_flush_type_Subargs},
};

/* FLUSHDB_ReplySchema reply schema */
struct jsonObjectElement FLUSHDB_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject FLUSHDB_ReplySchema = {FLUSHDB_ReplySchema_elements,.length=1};

/********** INFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* INFO history */
commandHistory INFO_History[] = {
{"7.0.0","Added support for taking multiple section arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* INFO tips */
const char *INFO_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* INFO key specs */
#define INFO_Keyspecs NULL
#endif

/* INFO argument table */
struct COMMAND_ARG INFO_Args[] = {
{MAKE_ARG("section",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* INFO_ReplySchema reply schema */
struct jsonObjectElement INFO_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map of info fields, one field per line in the form of <field>:<value> where the value can be a comma separated map like <key>=<val>. Also contains section header lines starting with `#` and blank lines."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject INFO_ReplySchema = {INFO_ReplySchema_elements,.length=2};

/********** LASTSAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LASTSAVE history */
#define LASTSAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LASTSAVE tips */
const char *LASTSAVE_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LASTSAVE key specs */
#define LASTSAVE_Keyspecs NULL
#endif

/* LASTSAVE_ReplySchema reply schema */
struct jsonObjectElement LASTSAVE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="UNIX TIME of the last DB save executed with success."},
};

struct jsonObject LASTSAVE_ReplySchema = {LASTSAVE_ReplySchema_elements,.length=2};

/********** LATENCY DOCTOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY DOCTOR history */
#define LATENCY_DOCTOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY DOCTOR tips */
const char *LATENCY_DOCTOR_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY DOCTOR key specs */
#define LATENCY_DOCTOR_Keyspecs NULL
#endif

/* LATENCY_DOCTOR_ReplySchema reply schema */
struct jsonObjectElement LATENCY_DOCTOR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="A human readable latency analysis report."},
};

struct jsonObject LATENCY_DOCTOR_ReplySchema = {LATENCY_DOCTOR_ReplySchema_elements,.length=2};

/********** LATENCY GRAPH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY GRAPH history */
#define LATENCY_GRAPH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY GRAPH tips */
const char *LATENCY_GRAPH_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY GRAPH key specs */
#define LATENCY_GRAPH_Keyspecs NULL
#endif

/* LATENCY GRAPH argument table */
struct COMMAND_ARG LATENCY_GRAPH_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LATENCY_GRAPH_ReplySchema reply schema */
struct jsonObjectElement LATENCY_GRAPH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Latency graph"},
};

struct jsonObject LATENCY_GRAPH_ReplySchema = {LATENCY_GRAPH_ReplySchema_elements,.length=2};

/********** LATENCY HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HELP history */
#define LATENCY_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HELP tips */
#define LATENCY_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HELP key specs */
#define LATENCY_HELP_Keyspecs NULL
#endif

/* LATENCY_HELP_ReplySchema_items reply schema */
struct jsonObjectElement LATENCY_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject LATENCY_HELP_ReplySchema_items = {LATENCY_HELP_ReplySchema_items_elements,.length=1};

/* LATENCY_HELP_ReplySchema reply schema */
struct jsonObjectElement LATENCY_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&LATENCY_HELP_ReplySchema_items},
};

struct jsonObject LATENCY_HELP_ReplySchema = {LATENCY_HELP_ReplySchema_elements,.length=3};

/********** LATENCY HISTOGRAM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HISTOGRAM history */
#define LATENCY_HISTOGRAM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HISTOGRAM tips */
const char *LATENCY_HISTOGRAM_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HISTOGRAM key specs */
#define LATENCY_HISTOGRAM_Keyspecs NULL
#endif

/* LATENCY HISTOGRAM argument table */
struct COMMAND_ARG LATENCY_HISTOGRAM_Args[] = {
{MAKE_ARG("command",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_calls reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_calls_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The total calls for the command."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_calls = {LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_calls_elements,.length=3};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_additionalProperties reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_additionalProperties = {LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_additionalProperties_elements,.length=1};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Histogram map, bucket id to latency"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_additionalProperties},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec = {LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec_elements,.length=3};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_elements[] = {
{JSON_TYPE_OBJECT,"calls",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_calls},
{JSON_TYPE_OBJECT,"histogram_usec",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_histogram_usec},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties = {LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties_elements,.length=2};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties_____ reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties______elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties______properties},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties_____ = {LATENCY_HISTOGRAM_ReplySchema_patternProperties______elements,.length=3};

/* LATENCY_HISTOGRAM_ReplySchema_patternProperties reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_patternProperties_elements[] = {
{JSON_TYPE_OBJECT,"^.*$",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties_____},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema_patternProperties = {LATENCY_HISTOGRAM_ReplySchema_patternProperties_elements,.length=1};

/* LATENCY_HISTOGRAM_ReplySchema reply schema */
struct jsonObjectElement LATENCY_HISTOGRAM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_STRING,"description",.value.string="A map where each key is a command name, and each value is a map with the total calls, and an inner map of the histogram time buckets."},
{JSON_TYPE_OBJECT,"patternProperties",.value.object=&LATENCY_HISTOGRAM_ReplySchema_patternProperties},
};

struct jsonObject LATENCY_HISTOGRAM_ReplySchema = {LATENCY_HISTOGRAM_ReplySchema_elements,.length=3};

/********** LATENCY HISTORY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY HISTORY history */
#define LATENCY_HISTORY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY HISTORY tips */
const char *LATENCY_HISTORY_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY HISTORY key specs */
#define LATENCY_HISTORY_Keyspecs NULL
#endif

/* LATENCY HISTORY argument table */
struct COMMAND_ARG LATENCY_HISTORY_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* LATENCY_HISTORY_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement LATENCY_HISTORY_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="timestamp of the event"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LATENCY_HISTORY_ReplySchema_items_items_0 = {LATENCY_HISTORY_ReplySchema_items_items_0_elements,.length=3};

/* LATENCY_HISTORY_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement LATENCY_HISTORY_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="latency of the event"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject LATENCY_HISTORY_ReplySchema_items_items_1 = {LATENCY_HISTORY_ReplySchema_items_items_1_elements,.length=3};

/* LATENCY_HISTORY_ReplySchema_items_items array reply schema */
struct jsonObject *LATENCY_HISTORY_ReplySchema_items_items[] = {
&LATENCY_HISTORY_ReplySchema_items_items_0,
&LATENCY_HISTORY_ReplySchema_items_items_1,
};

/* LATENCY_HISTORY_ReplySchema_items reply schema */
struct jsonObjectElement LATENCY_HISTORY_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=LATENCY_HISTORY_ReplySchema_items_items,.length=2}},
};

struct jsonObject LATENCY_HISTORY_ReplySchema_items = {LATENCY_HISTORY_ReplySchema_items_elements,.length=4};

/* LATENCY_HISTORY_ReplySchema reply schema */
struct jsonObjectElement LATENCY_HISTORY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="An array where each element is a two elements array representing the timestamp and the latency of the event."},
{JSON_TYPE_OBJECT,"items",.value.object=&LATENCY_HISTORY_ReplySchema_items},
};

struct jsonObject LATENCY_HISTORY_ReplySchema = {LATENCY_HISTORY_ReplySchema_elements,.length=3};

/********** LATENCY LATEST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY LATEST history */
#define LATENCY_LATEST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY LATEST tips */
const char *LATENCY_LATEST_Tips[] = {
"nondeterministic_output",
"request_policy:all_nodes",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY LATEST key specs */
#define LATENCY_LATEST_Keyspecs NULL
#endif

/* LATENCY_LATEST_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Event name."},
};

struct jsonObject LATENCY_LATEST_ReplySchema_items_items_0 = {LATENCY_LATEST_ReplySchema_items_items_0_elements,.length=2};

/* LATENCY_LATEST_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Timestamp."},
};

struct jsonObject LATENCY_LATEST_ReplySchema_items_items_1 = {LATENCY_LATEST_ReplySchema_items_items_1_elements,.length=2};

/* LATENCY_LATEST_ReplySchema_items_items_2 reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_items_items_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Latest latency in milliseconds."},
};

struct jsonObject LATENCY_LATEST_ReplySchema_items_items_2 = {LATENCY_LATEST_ReplySchema_items_items_2_elements,.length=2};

/* LATENCY_LATEST_ReplySchema_items_items_3 reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_items_items_3_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Max latency in milliseconds."},
};

struct jsonObject LATENCY_LATEST_ReplySchema_items_items_3 = {LATENCY_LATEST_ReplySchema_items_items_3_elements,.length=2};

/* LATENCY_LATEST_ReplySchema_items_items array reply schema */
struct jsonObject *LATENCY_LATEST_ReplySchema_items_items[] = {
&LATENCY_LATEST_ReplySchema_items_items_0,
&LATENCY_LATEST_ReplySchema_items_items_1,
&LATENCY_LATEST_ReplySchema_items_items_2,
&LATENCY_LATEST_ReplySchema_items_items_3,
};

/* LATENCY_LATEST_ReplySchema_items reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=LATENCY_LATEST_ReplySchema_items_items,.length=4}},
};

struct jsonObject LATENCY_LATEST_ReplySchema_items = {LATENCY_LATEST_ReplySchema_items_elements,.length=4};

/* LATENCY_LATEST_ReplySchema reply schema */
struct jsonObjectElement LATENCY_LATEST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="An array where each element is a four elements array representing the event's name, timestamp, latest and all-time latency measurements."},
{JSON_TYPE_OBJECT,"items",.value.object=&LATENCY_LATEST_ReplySchema_items},
};

struct jsonObject LATENCY_LATEST_ReplySchema = {LATENCY_LATEST_ReplySchema_elements,.length=3};

/********** LATENCY RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY RESET history */
#define LATENCY_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY RESET tips */
const char *LATENCY_RESET_Tips[] = {
"request_policy:all_nodes",
"response_policy:agg_sum",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY RESET key specs */
#define LATENCY_RESET_Keyspecs NULL
#endif

/* LATENCY RESET argument table */
struct COMMAND_ARG LATENCY_RESET_Args[] = {
{MAKE_ARG("event",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* LATENCY_RESET_ReplySchema reply schema */
struct jsonObjectElement LATENCY_RESET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of event time series that were reset."},
};

struct jsonObject LATENCY_RESET_ReplySchema = {LATENCY_RESET_ReplySchema_elements,.length=2};

/* LATENCY command table */
struct COMMAND_STRUCT LATENCY_Subcommands[] = {
{MAKE_CMD("doctor","Returns a human-readable latency analysis report.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_DOCTOR_History,0,LATENCY_DOCTOR_Tips,3,latencyCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_DOCTOR_Keyspecs,0,NULL,0),.reply_schema=&LATENCY_DOCTOR_ReplySchema},
{MAKE_CMD("graph","Returns a latency graph for an event.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_GRAPH_History,0,LATENCY_GRAPH_Tips,3,latencyCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_GRAPH_Keyspecs,0,NULL,1),.args=LATENCY_GRAPH_Args,.reply_schema=&LATENCY_GRAPH_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HELP_History,0,LATENCY_HELP_Tips,0,latencyCommand,2,CMD_LOADING|CMD_STALE,0,LATENCY_HELP_Keyspecs,0,NULL,0),.reply_schema=&LATENCY_HELP_ReplySchema},
{MAKE_CMD("histogram","Returns the cumulative distribution of latencies of a subset or all commands.","O(N) where N is the number of commands with latency information being retrieved.","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HISTOGRAM_History,0,LATENCY_HISTOGRAM_Tips,3,latencyCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_HISTOGRAM_Keyspecs,0,NULL,1),.args=LATENCY_HISTOGRAM_Args,.reply_schema=&LATENCY_HISTOGRAM_ReplySchema},
{MAKE_CMD("history","Returns timestamp-latency samples for an event.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_HISTORY_History,0,LATENCY_HISTORY_Tips,3,latencyCommand,3,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_HISTORY_Keyspecs,0,NULL,1),.args=LATENCY_HISTORY_Args,.reply_schema=&LATENCY_HISTORY_ReplySchema},
{MAKE_CMD("latest","Returns the latest latency samples for all events.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_LATEST_History,0,LATENCY_LATEST_Tips,3,latencyCommand,2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_LATEST_Keyspecs,0,NULL,0),.reply_schema=&LATENCY_LATEST_ReplySchema},
{MAKE_CMD("reset","Resets the latency data for one or more events.","O(1)","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_RESET_History,0,LATENCY_RESET_Tips,2,latencyCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,LATENCY_RESET_Keyspecs,0,NULL,1),.args=LATENCY_RESET_Args,.reply_schema=&LATENCY_RESET_ReplySchema},
{0}
};

/********** LATENCY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LATENCY history */
#define LATENCY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LATENCY tips */
#define LATENCY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LATENCY key specs */
#define LATENCY_Keyspecs NULL
#endif

/********** LOLWUT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LOLWUT history */
#define LOLWUT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LOLWUT tips */
#define LOLWUT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LOLWUT key specs */
#define LOLWUT_Keyspecs NULL
#endif

/* LOLWUT argument table */
struct COMMAND_ARG LOLWUT_Args[] = {
{MAKE_ARG("version",ARG_TYPE_INTEGER,-1,"VERSION",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* LOLWUT_ReplySchema reply schema */
struct jsonObjectElement LOLWUT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="String containing the generative computer art, and a text with the Redis version."},
};

struct jsonObject LOLWUT_ReplySchema = {LOLWUT_ReplySchema_elements,.length=2};

/********** MEMORY DOCTOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY DOCTOR history */
#define MEMORY_DOCTOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY DOCTOR tips */
const char *MEMORY_DOCTOR_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY DOCTOR key specs */
#define MEMORY_DOCTOR_Keyspecs NULL
#endif

/* MEMORY_DOCTOR_ReplySchema reply schema */
struct jsonObjectElement MEMORY_DOCTOR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="memory problems report"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject MEMORY_DOCTOR_ReplySchema = {MEMORY_DOCTOR_ReplySchema_elements,.length=2};

/********** MEMORY HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY HELP history */
#define MEMORY_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY HELP tips */
#define MEMORY_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY HELP key specs */
#define MEMORY_HELP_Keyspecs NULL
#endif

/* MEMORY_HELP_ReplySchema_items reply schema */
struct jsonObjectElement MEMORY_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject MEMORY_HELP_ReplySchema_items = {MEMORY_HELP_ReplySchema_items_elements,.length=1};

/* MEMORY_HELP_ReplySchema reply schema */
struct jsonObjectElement MEMORY_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&MEMORY_HELP_ReplySchema_items},
};

struct jsonObject MEMORY_HELP_ReplySchema = {MEMORY_HELP_ReplySchema_elements,.length=3};

/********** MEMORY MALLOC_STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY MALLOC_STATS history */
#define MEMORY_MALLOC_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY MALLOC_STATS tips */
const char *MEMORY_MALLOC_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY MALLOC_STATS key specs */
#define MEMORY_MALLOC_STATS_Keyspecs NULL
#endif

/* MEMORY_MALLOC_STATS_ReplySchema reply schema */
struct jsonObjectElement MEMORY_MALLOC_STATS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The memory allocator's internal statistics report."},
};

struct jsonObject MEMORY_MALLOC_STATS_ReplySchema = {MEMORY_MALLOC_STATS_ReplySchema_elements,.length=2};

/********** MEMORY PURGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY PURGE history */
#define MEMORY_PURGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY PURGE tips */
const char *MEMORY_PURGE_Tips[] = {
"request_policy:all_shards",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY PURGE key specs */
#define MEMORY_PURGE_Keyspecs NULL
#endif

/* MEMORY_PURGE_ReplySchema reply schema */
struct jsonObjectElement MEMORY_PURGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MEMORY_PURGE_ReplySchema = {MEMORY_PURGE_ReplySchema_elements,.length=1};

/********** MEMORY STATS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY STATS history */
#define MEMORY_STATS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY STATS tips */
const char *MEMORY_STATS_Tips[] = {
"nondeterministic_output",
"request_policy:all_shards",
"response_policy:special",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY STATS key specs */
#define MEMORY_STATS_Keyspecs NULL
#endif

/* MEMORY_STATS_ReplySchema_properties_peak_allocated reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_peak_allocated_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_peak_allocated = {MEMORY_STATS_ReplySchema_properties_peak_allocated_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_total_allocated reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_total_allocated_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_total_allocated = {MEMORY_STATS_ReplySchema_properties_total_allocated_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_startup_allocated reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_startup_allocated_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_startup_allocated = {MEMORY_STATS_ReplySchema_properties_startup_allocated_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_replication_backlog reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_replication_backlog_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_replication_backlog = {MEMORY_STATS_ReplySchema_properties_replication_backlog_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_clients_slaves reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_clients_slaves_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_clients_slaves = {MEMORY_STATS_ReplySchema_properties_clients_slaves_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_clients_normal reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_clients_normal_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_clients_normal = {MEMORY_STATS_ReplySchema_properties_clients_normal_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_cluster_links reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_cluster_links_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_cluster_links = {MEMORY_STATS_ReplySchema_properties_cluster_links_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_aof_buffer reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_aof_buffer_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_aof_buffer = {MEMORY_STATS_ReplySchema_properties_aof_buffer_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_lua_caches reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_lua_caches_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_lua_caches = {MEMORY_STATS_ReplySchema_properties_lua_caches_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_functions_caches reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_functions_caches_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_functions_caches = {MEMORY_STATS_ReplySchema_properties_functions_caches_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_lut reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_lut_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_lut = {MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_lut_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_rehashing reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_rehashing_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_rehashing = {MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_rehashing_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_overhead_total reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_overhead_total_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_overhead_total = {MEMORY_STATS_ReplySchema_properties_overhead_total_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_db_dict_rehashing_count reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_db_dict_rehashing_count_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_db_dict_rehashing_count = {MEMORY_STATS_ReplySchema_properties_db_dict_rehashing_count_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_keys_count reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_keys_count_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_keys_count = {MEMORY_STATS_ReplySchema_properties_keys_count_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_keys_bytes_per_key reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_keys_bytes_per_key_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_keys_bytes_per_key = {MEMORY_STATS_ReplySchema_properties_keys_bytes_per_key_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_dataset_bytes reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_dataset_bytes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_dataset_bytes = {MEMORY_STATS_ReplySchema_properties_dataset_bytes_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_dataset_percentage reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_dataset_percentage_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_dataset_percentage = {MEMORY_STATS_ReplySchema_properties_dataset_percentage_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_peak_percentage reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_peak_percentage_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_peak_percentage = {MEMORY_STATS_ReplySchema_properties_peak_percentage_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_allocated reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_allocated_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_allocated = {MEMORY_STATS_ReplySchema_properties_allocator_allocated_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_active reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_active_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_active = {MEMORY_STATS_ReplySchema_properties_allocator_active_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_resident reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_resident_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_resident = {MEMORY_STATS_ReplySchema_properties_allocator_resident_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_muzzy reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_muzzy_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_muzzy = {MEMORY_STATS_ReplySchema_properties_allocator_muzzy_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_ratio reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_ratio_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_ratio = {MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_ratio_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_bytes reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_bytes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_bytes = {MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_bytes_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_rss_ratio reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_rss_ratio_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_rss_ratio = {MEMORY_STATS_ReplySchema_properties_allocator_rss_ratio_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_allocator_rss_bytes reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_allocator_rss_bytes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_allocator_rss_bytes = {MEMORY_STATS_ReplySchema_properties_allocator_rss_bytes_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_rss_overhead_ratio reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_rss_overhead_ratio_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_rss_overhead_ratio = {MEMORY_STATS_ReplySchema_properties_rss_overhead_ratio_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_rss_overhead_bytes reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_rss_overhead_bytes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_rss_overhead_bytes = {MEMORY_STATS_ReplySchema_properties_rss_overhead_bytes_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_fragmentation reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_fragmentation_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_fragmentation = {MEMORY_STATS_ReplySchema_properties_fragmentation_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties_fragmentation_bytes reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_fragmentation_bytes_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties_fragmentation_bytes = {MEMORY_STATS_ReplySchema_properties_fragmentation_bytes_elements,.length=1};

/* MEMORY_STATS_ReplySchema_properties reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_properties_elements[] = {
{JSON_TYPE_OBJECT,"peak.allocated",.value.object=&MEMORY_STATS_ReplySchema_properties_peak_allocated},
{JSON_TYPE_OBJECT,"total.allocated",.value.object=&MEMORY_STATS_ReplySchema_properties_total_allocated},
{JSON_TYPE_OBJECT,"startup.allocated",.value.object=&MEMORY_STATS_ReplySchema_properties_startup_allocated},
{JSON_TYPE_OBJECT,"replication.backlog",.value.object=&MEMORY_STATS_ReplySchema_properties_replication_backlog},
{JSON_TYPE_OBJECT,"clients.slaves",.value.object=&MEMORY_STATS_ReplySchema_properties_clients_slaves},
{JSON_TYPE_OBJECT,"clients.normal",.value.object=&MEMORY_STATS_ReplySchema_properties_clients_normal},
{JSON_TYPE_OBJECT,"cluster.links",.value.object=&MEMORY_STATS_ReplySchema_properties_cluster_links},
{JSON_TYPE_OBJECT,"aof.buffer",.value.object=&MEMORY_STATS_ReplySchema_properties_aof_buffer},
{JSON_TYPE_OBJECT,"lua.caches",.value.object=&MEMORY_STATS_ReplySchema_properties_lua_caches},
{JSON_TYPE_OBJECT,"functions.caches",.value.object=&MEMORY_STATS_ReplySchema_properties_functions_caches},
{JSON_TYPE_OBJECT,"overhead.db.hashtable.lut",.value.object=&MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_lut},
{JSON_TYPE_OBJECT,"overhead.db.hashtable.rehashing",.value.object=&MEMORY_STATS_ReplySchema_properties_overhead_db_hashtable_rehashing},
{JSON_TYPE_OBJECT,"overhead.total",.value.object=&MEMORY_STATS_ReplySchema_properties_overhead_total},
{JSON_TYPE_OBJECT,"db.dict.rehashing.count",.value.object=&MEMORY_STATS_ReplySchema_properties_db_dict_rehashing_count},
{JSON_TYPE_OBJECT,"keys.count",.value.object=&MEMORY_STATS_ReplySchema_properties_keys_count},
{JSON_TYPE_OBJECT,"keys.bytes-per-key",.value.object=&MEMORY_STATS_ReplySchema_properties_keys_bytes_per_key},
{JSON_TYPE_OBJECT,"dataset.bytes",.value.object=&MEMORY_STATS_ReplySchema_properties_dataset_bytes},
{JSON_TYPE_OBJECT,"dataset.percentage",.value.object=&MEMORY_STATS_ReplySchema_properties_dataset_percentage},
{JSON_TYPE_OBJECT,"peak.percentage",.value.object=&MEMORY_STATS_ReplySchema_properties_peak_percentage},
{JSON_TYPE_OBJECT,"allocator.allocated",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_allocated},
{JSON_TYPE_OBJECT,"allocator.active",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_active},
{JSON_TYPE_OBJECT,"allocator.resident",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_resident},
{JSON_TYPE_OBJECT,"allocator.muzzy",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_muzzy},
{JSON_TYPE_OBJECT,"allocator-fragmentation.ratio",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_ratio},
{JSON_TYPE_OBJECT,"allocator-fragmentation.bytes",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_fragmentation_bytes},
{JSON_TYPE_OBJECT,"allocator-rss.ratio",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_rss_ratio},
{JSON_TYPE_OBJECT,"allocator-rss.bytes",.value.object=&MEMORY_STATS_ReplySchema_properties_allocator_rss_bytes},
{JSON_TYPE_OBJECT,"rss-overhead.ratio",.value.object=&MEMORY_STATS_ReplySchema_properties_rss_overhead_ratio},
{JSON_TYPE_OBJECT,"rss-overhead.bytes",.value.object=&MEMORY_STATS_ReplySchema_properties_rss_overhead_bytes},
{JSON_TYPE_OBJECT,"fragmentation",.value.object=&MEMORY_STATS_ReplySchema_properties_fragmentation},
{JSON_TYPE_OBJECT,"fragmentation.bytes",.value.object=&MEMORY_STATS_ReplySchema_properties_fragmentation_bytes},
};

struct jsonObject MEMORY_STATS_ReplySchema_properties = {MEMORY_STATS_ReplySchema_properties_elements,.length=31};

/* MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_main reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_main_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_main = {MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_main_elements,.length=1};

/* MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_expires reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_expires_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_expires = {MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_expires_elements,.length=1};

/* MEMORY_STATS_ReplySchema_patternProperties__db___d___properties reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_elements[] = {
{JSON_TYPE_OBJECT,"overhead.hashtable.main",.value.object=&MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_main},
{JSON_TYPE_OBJECT,"overhead.hashtable.expires",.value.object=&MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_overhead_hashtable_expires},
};

struct jsonObject MEMORY_STATS_ReplySchema_patternProperties__db___d___properties = {MEMORY_STATS_ReplySchema_patternProperties__db___d___properties_elements,.length=2};

/* MEMORY_STATS_ReplySchema_patternProperties__db___d__ reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_patternProperties__db___d___elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"properties",.value.object=&MEMORY_STATS_ReplySchema_patternProperties__db___d___properties},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
};

struct jsonObject MEMORY_STATS_ReplySchema_patternProperties__db___d__ = {MEMORY_STATS_ReplySchema_patternProperties__db___d___elements,.length=3};

/* MEMORY_STATS_ReplySchema_patternProperties reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_patternProperties_elements[] = {
{JSON_TYPE_OBJECT,"^db\\.\\d+$",.value.object=&MEMORY_STATS_ReplySchema_patternProperties__db___d__},
};

struct jsonObject MEMORY_STATS_ReplySchema_patternProperties = {MEMORY_STATS_ReplySchema_patternProperties_elements,.length=1};

/* MEMORY_STATS_ReplySchema reply schema */
struct jsonObjectElement MEMORY_STATS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="memory usage details"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&MEMORY_STATS_ReplySchema_properties},
{JSON_TYPE_OBJECT,"patternProperties",.value.object=&MEMORY_STATS_ReplySchema_patternProperties},
};

struct jsonObject MEMORY_STATS_ReplySchema = {MEMORY_STATS_ReplySchema_elements,.length=5};

/********** MEMORY USAGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY USAGE history */
#define MEMORY_USAGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY USAGE tips */
#define MEMORY_USAGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY USAGE key specs */
keySpec MEMORY_USAGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* MEMORY USAGE argument table */
struct COMMAND_ARG MEMORY_USAGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"SAMPLES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* MEMORY_USAGE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement MEMORY_USAGE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of bytes that a key and its value require to be stored in RAM."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject MEMORY_USAGE_ReplySchema_oneOf_0 = {MEMORY_USAGE_ReplySchema_oneOf_0_elements,.length=2};

/* MEMORY_USAGE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement MEMORY_USAGE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject MEMORY_USAGE_ReplySchema_oneOf_1 = {MEMORY_USAGE_ReplySchema_oneOf_1_elements,.length=2};

/* MEMORY_USAGE_ReplySchema_oneOf array reply schema */
struct jsonObject *MEMORY_USAGE_ReplySchema_oneOf[] = {
&MEMORY_USAGE_ReplySchema_oneOf_0,
&MEMORY_USAGE_ReplySchema_oneOf_1,
};

/* MEMORY_USAGE_ReplySchema reply schema */
struct jsonObjectElement MEMORY_USAGE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=MEMORY_USAGE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject MEMORY_USAGE_ReplySchema = {MEMORY_USAGE_ReplySchema_elements,.length=1};

/* MEMORY command table */
struct COMMAND_STRUCT MEMORY_Subcommands[] = {
{MAKE_CMD("doctor","Outputs a memory problems report.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_DOCTOR_History,0,MEMORY_DOCTOR_Tips,3,memoryCommand,2,0,0,MEMORY_DOCTOR_Keyspecs,0,NULL,0),.reply_schema=&MEMORY_DOCTOR_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_HELP_History,0,MEMORY_HELP_Tips,0,memoryCommand,2,CMD_LOADING|CMD_STALE,0,MEMORY_HELP_Keyspecs,0,NULL,0),.reply_schema=&MEMORY_HELP_ReplySchema},
{MAKE_CMD("malloc-stats","Returns the allocator statistics.","Depends on how much memory is allocated, could be slow","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_MALLOC_STATS_History,0,MEMORY_MALLOC_STATS_Tips,3,memoryCommand,2,0,0,MEMORY_MALLOC_STATS_Keyspecs,0,NULL,0),.reply_schema=&MEMORY_MALLOC_STATS_ReplySchema},
{MAKE_CMD("purge","Asks the allocator to release memory.","Depends on how much memory is allocated, could be slow","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_PURGE_History,0,MEMORY_PURGE_Tips,2,memoryCommand,2,0,0,MEMORY_PURGE_Keyspecs,0,NULL,0),.reply_schema=&MEMORY_PURGE_ReplySchema},
{MAKE_CMD("stats","Returns details about memory usage.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_STATS_History,0,MEMORY_STATS_Tips,3,memoryCommand,2,0,0,MEMORY_STATS_Keyspecs,0,NULL,0),.reply_schema=&MEMORY_STATS_ReplySchema},
{MAKE_CMD("usage","Estimates the memory usage of a key.","O(N) where N is the number of samples.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_USAGE_History,0,MEMORY_USAGE_Tips,0,memoryCommand,-3,CMD_READONLY,0,MEMORY_USAGE_Keyspecs,1,NULL,2),.args=MEMORY_USAGE_Args,.reply_schema=&MEMORY_USAGE_ReplySchema},
{0}
};

/********** MEMORY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MEMORY history */
#define MEMORY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MEMORY tips */
#define MEMORY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MEMORY key specs */
#define MEMORY_Keyspecs NULL
#endif

/********** MODULE HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE HELP history */
#define MODULE_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE HELP tips */
#define MODULE_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE HELP key specs */
#define MODULE_HELP_Keyspecs NULL
#endif

/* MODULE_HELP_ReplySchema_items reply schema */
struct jsonObjectElement MODULE_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject MODULE_HELP_ReplySchema_items = {MODULE_HELP_ReplySchema_items_elements,.length=1};

/* MODULE_HELP_ReplySchema reply schema */
struct jsonObjectElement MODULE_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&MODULE_HELP_ReplySchema_items},
};

struct jsonObject MODULE_HELP_ReplySchema = {MODULE_HELP_ReplySchema_elements,.length=3};

/********** MODULE LIST ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LIST history */
#define MODULE_LIST_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LIST tips */
const char *MODULE_LIST_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LIST key specs */
#define MODULE_LIST_Keyspecs NULL
#endif

/* MODULE_LIST_ReplySchema_items_properties_name reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Name of the module."},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties_name = {MODULE_LIST_ReplySchema_items_properties_name_elements,.length=2};

/* MODULE_LIST_ReplySchema_items_properties_ver reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_ver_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Version of the module."},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties_ver = {MODULE_LIST_ReplySchema_items_properties_ver_elements,.length=2};

/* MODULE_LIST_ReplySchema_items_properties_path reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_path_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Module path."},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties_path = {MODULE_LIST_ReplySchema_items_properties_path_elements,.length=2};

/* MODULE_LIST_ReplySchema_items_properties_args_items reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_args_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties_args_items = {MODULE_LIST_ReplySchema_items_properties_args_items_elements,.length=1};

/* MODULE_LIST_ReplySchema_items_properties_args reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_args_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Module arguments."},
{JSON_TYPE_OBJECT,"items",.value.object=&MODULE_LIST_ReplySchema_items_properties_args_items},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties_args = {MODULE_LIST_ReplySchema_items_properties_args_elements,.length=3};

/* MODULE_LIST_ReplySchema_items_properties reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&MODULE_LIST_ReplySchema_items_properties_name},
{JSON_TYPE_OBJECT,"ver",.value.object=&MODULE_LIST_ReplySchema_items_properties_ver},
{JSON_TYPE_OBJECT,"path",.value.object=&MODULE_LIST_ReplySchema_items_properties_path},
{JSON_TYPE_OBJECT,"args",.value.object=&MODULE_LIST_ReplySchema_items_properties_args},
};

struct jsonObject MODULE_LIST_ReplySchema_items_properties = {MODULE_LIST_ReplySchema_items_properties_elements,.length=4};

/* MODULE_LIST_ReplySchema_items reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&MODULE_LIST_ReplySchema_items_properties},
};

struct jsonObject MODULE_LIST_ReplySchema_items = {MODULE_LIST_ReplySchema_items_elements,.length=3};

/* MODULE_LIST_ReplySchema reply schema */
struct jsonObjectElement MODULE_LIST_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Returns information about the modules loaded to the server."},
{JSON_TYPE_OBJECT,"items",.value.object=&MODULE_LIST_ReplySchema_items},
};

struct jsonObject MODULE_LIST_ReplySchema = {MODULE_LIST_ReplySchema_elements,.length=3};

/********** MODULE LOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LOAD history */
#define MODULE_LOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LOAD tips */
#define MODULE_LOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LOAD key specs */
#define MODULE_LOAD_Keyspecs NULL
#endif

/* MODULE LOAD argument table */
struct COMMAND_ARG MODULE_LOAD_Args[] = {
{MAKE_ARG("path",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("arg",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* MODULE_LOAD_ReplySchema reply schema */
struct jsonObjectElement MODULE_LOAD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MODULE_LOAD_ReplySchema = {MODULE_LOAD_ReplySchema_elements,.length=1};

/********** MODULE LOADEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE LOADEX history */
#define MODULE_LOADEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE LOADEX tips */
#define MODULE_LOADEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE LOADEX key specs */
#define MODULE_LOADEX_Keyspecs NULL
#endif

/* MODULE LOADEX configs argument table */
struct COMMAND_ARG MODULE_LOADEX_configs_Subargs[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MODULE LOADEX argument table */
struct COMMAND_ARG MODULE_LOADEX_Args[] = {
{MAKE_ARG("path",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("configs",ARG_TYPE_BLOCK,-1,"CONFIG",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE|CMD_ARG_MULTIPLE_TOKEN,2,NULL),.subargs=MODULE_LOADEX_configs_Subargs},
{MAKE_ARG("args",ARG_TYPE_STRING,-1,"ARGS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
};

/* MODULE_LOADEX_ReplySchema reply schema */
struct jsonObjectElement MODULE_LOADEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MODULE_LOADEX_ReplySchema = {MODULE_LOADEX_ReplySchema_elements,.length=1};

/********** MODULE UNLOAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE UNLOAD history */
#define MODULE_UNLOAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE UNLOAD tips */
#define MODULE_UNLOAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE UNLOAD key specs */
#define MODULE_UNLOAD_Keyspecs NULL
#endif

/* MODULE UNLOAD argument table */
struct COMMAND_ARG MODULE_UNLOAD_Args[] = {
{MAKE_ARG("name",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MODULE_UNLOAD_ReplySchema reply schema */
struct jsonObjectElement MODULE_UNLOAD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MODULE_UNLOAD_ReplySchema = {MODULE_UNLOAD_ReplySchema_elements,.length=1};

/* MODULE command table */
struct COMMAND_STRUCT MODULE_Subcommands[] = {
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_HELP_History,0,MODULE_HELP_Tips,0,moduleCommand,2,CMD_LOADING|CMD_STALE,0,MODULE_HELP_Keyspecs,0,NULL,0),.reply_schema=&MODULE_HELP_ReplySchema},
{MAKE_CMD("list","Returns all loaded modules.","O(N) where N is the number of loaded modules.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LIST_History,0,MODULE_LIST_Tips,1,moduleCommand,2,CMD_ADMIN|CMD_NOSCRIPT,0,MODULE_LIST_Keyspecs,0,NULL,0),.reply_schema=&MODULE_LIST_ReplySchema},
{MAKE_CMD("load","Loads a module.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LOAD_History,0,MODULE_LOAD_Tips,0,moduleCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_LOAD_Keyspecs,0,NULL,2),.args=MODULE_LOAD_Args,.reply_schema=&MODULE_LOAD_ReplySchema},
{MAKE_CMD("loadex","Loads a module using extended parameters.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_LOADEX_History,0,MODULE_LOADEX_Tips,0,moduleCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_LOADEX_Keyspecs,0,NULL,3),.args=MODULE_LOADEX_Args,.reply_schema=&MODULE_LOADEX_ReplySchema},
{MAKE_CMD("unload","Unloads a module.","O(1)","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_UNLOAD_History,0,MODULE_UNLOAD_Tips,0,moduleCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_PROTECTED,0,MODULE_UNLOAD_Keyspecs,0,NULL,1),.args=MODULE_UNLOAD_Args,.reply_schema=&MODULE_UNLOAD_ReplySchema},
{0}
};

/********** MODULE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MODULE history */
#define MODULE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MODULE tips */
#define MODULE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MODULE key specs */
#define MODULE_Keyspecs NULL
#endif

/********** MONITOR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MONITOR history */
#define MONITOR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MONITOR tips */
#define MONITOR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MONITOR key specs */
#define MONITOR_Keyspecs NULL
#endif

/********** PSYNC ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PSYNC history */
#define PSYNC_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PSYNC tips */
#define PSYNC_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PSYNC key specs */
#define PSYNC_Keyspecs NULL
#endif

/* PSYNC argument table */
struct COMMAND_ARG PSYNC_Args[] = {
{MAKE_ARG("replicationid",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/********** REPLCONF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* REPLCONF history */
#define REPLCONF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* REPLCONF tips */
#define REPLCONF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* REPLCONF key specs */
#define REPLCONF_Keyspecs NULL
#endif

/* REPLCONF_ReplySchema reply schema */
struct jsonObjectElement REPLCONF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject REPLCONF_ReplySchema = {REPLCONF_ReplySchema_elements,.length=1};

/********** REPLICAOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* REPLICAOF history */
#define REPLICAOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* REPLICAOF tips */
#define REPLICAOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* REPLICAOF key specs */
#define REPLICAOF_Keyspecs NULL
#endif

/* REPLICAOF args host_port argument table */
struct COMMAND_ARG REPLICAOF_args_host_port_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* REPLICAOF args no_one argument table */
struct COMMAND_ARG REPLICAOF_args_no_one_Subargs[] = {
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("one",ARG_TYPE_PURE_TOKEN,-1,"ONE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* REPLICAOF args argument table */
struct COMMAND_ARG REPLICAOF_args_Subargs[] = {
{MAKE_ARG("host-port",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_host_port_Subargs},
{MAKE_ARG("no-one",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_no_one_Subargs},
};

/* REPLICAOF argument table */
struct COMMAND_ARG REPLICAOF_Args[] = {
{MAKE_ARG("args",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=REPLICAOF_args_Subargs},
};

/* REPLICAOF_ReplySchema reply schema */
struct jsonObjectElement REPLICAOF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="replicaOf status"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="OK*"},
};

struct jsonObject REPLICAOF_ReplySchema = {REPLICAOF_ReplySchema_elements,.length=3};

/********** RESTORE_ASKING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* RESTORE_ASKING history */
commandHistory RESTORE_ASKING_History[] = {
{"3.0.0","Added the `REPLACE` modifier."},
{"5.0.0","Added the `ABSTTL` modifier."},
{"5.0.0","Added the `IDLETIME` and `FREQ` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* RESTORE_ASKING tips */
#define RESTORE_ASKING_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* RESTORE_ASKING key specs */
keySpec RESTORE_ASKING_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* RESTORE_ASKING argument table */
struct COMMAND_ARG RESTORE_ASKING_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("ttl",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("serialized-value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("replace",ARG_TYPE_PURE_TOKEN,-1,"REPLACE",NULL,"3.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("absttl",ARG_TYPE_PURE_TOKEN,-1,"ABSTTL",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"IDLETIME",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("frequency",ARG_TYPE_INTEGER,-1,"FREQ",NULL,"5.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* RESTORE_ASKING_ReplySchema reply schema */
struct jsonObjectElement RESTORE_ASKING_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject RESTORE_ASKING_ReplySchema = {RESTORE_ASKING_ReplySchema_elements,.length=1};

/********** ROLE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ROLE history */
#define ROLE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ROLE tips */
#define ROLE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ROLE key specs */
#define ROLE_Keyspecs NULL
#endif

/* ROLE_ReplySchema_oneOf_0_items_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="master"},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_0 = {ROLE_ReplySchema_oneOf_0_items_0_elements,.length=1};

/* ROLE_ReplySchema_oneOf_0_items_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="current replication master offset"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_1 = {ROLE_ReplySchema_oneOf_0_items_1_elements,.length=2};

/* ROLE_ReplySchema_oneOf_0_items_2_items_items_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_2_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="replica ip"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_2_items_items_0 = {ROLE_ReplySchema_oneOf_0_items_2_items_items_0_elements,.length=2};

/* ROLE_ReplySchema_oneOf_0_items_2_items_items_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_2_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="replica port"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_2_items_items_1 = {ROLE_ReplySchema_oneOf_0_items_2_items_items_1_elements,.length=2};

/* ROLE_ReplySchema_oneOf_0_items_2_items_items_2 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_2_items_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="last acknowledged replication offset"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_2_items_items_2 = {ROLE_ReplySchema_oneOf_0_items_2_items_items_2_elements,.length=2};

/* ROLE_ReplySchema_oneOf_0_items_2_items_items array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf_0_items_2_items_items[] = {
&ROLE_ReplySchema_oneOf_0_items_2_items_items_0,
&ROLE_ReplySchema_oneOf_0_items_2_items_items_1,
&ROLE_ReplySchema_oneOf_0_items_2_items_items_2,
};

/* ROLE_ReplySchema_oneOf_0_items_2_items reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ROLE_ReplySchema_oneOf_0_items_2_items_items,.length=3}},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_2_items = {ROLE_ReplySchema_oneOf_0_items_2_items_elements,.length=4};

/* ROLE_ReplySchema_oneOf_0_items_2 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="connected replicas"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ROLE_ReplySchema_oneOf_0_items_2_items},
};

struct jsonObject ROLE_ReplySchema_oneOf_0_items_2 = {ROLE_ReplySchema_oneOf_0_items_2_elements,.length=3};

/* ROLE_ReplySchema_oneOf_0_items array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf_0_items[] = {
&ROLE_ReplySchema_oneOf_0_items_0,
&ROLE_ReplySchema_oneOf_0_items_1,
&ROLE_ReplySchema_oneOf_0_items_2,
};

/* ROLE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ROLE_ReplySchema_oneOf_0_items,.length=3}},
};

struct jsonObject ROLE_ReplySchema_oneOf_0 = {ROLE_ReplySchema_oneOf_0_elements,.length=4};

/* ROLE_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="slave"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_0 = {ROLE_ReplySchema_oneOf_1_items_0_elements,.length=1};

/* ROLE_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="ip of master"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_1 = {ROLE_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_2 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="port number of master"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_2 = {ROLE_ReplySchema_oneOf_1_items_2_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the instance is in handshake with its master"},
{JSON_TYPE_STRING,"const",.value.string="handshake"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_0 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_0_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the instance in not active"},
{JSON_TYPE_STRING,"const",.value.string="none"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_1 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_1_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_2 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the instance needs to connect to its master"},
{JSON_TYPE_STRING,"const",.value.string="connect"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_2 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_2_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_3 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the master-replica connection is in progress"},
{JSON_TYPE_STRING,"const",.value.string="connecting"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_3 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_3_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_4 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_4_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the master and replica are trying to perform the synchronization"},
{JSON_TYPE_STRING,"const",.value.string="sync"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_4 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_4_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_5 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_5_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the replica is online"},
{JSON_TYPE_STRING,"const",.value.string="connected"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_5 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_5_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf_6 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_oneOf_6_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="instance state is unknown"},
{JSON_TYPE_STRING,"const",.value.string="unknown"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3_oneOf_6 = {ROLE_ReplySchema_oneOf_1_items_3_oneOf_6_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_3_oneOf array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf_1_items_3_oneOf[] = {
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_0,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_1,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_2,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_3,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_4,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_5,
&ROLE_ReplySchema_oneOf_1_items_3_oneOf_6,
};

/* ROLE_ReplySchema_oneOf_1_items_3 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="state of the replication from the point of view of the master"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ROLE_ReplySchema_oneOf_1_items_3_oneOf,.length=7}},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_3 = {ROLE_ReplySchema_oneOf_1_items_3_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items_4 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_items_4_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the amount of data received from the replica so far in terms of master replication offset"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ROLE_ReplySchema_oneOf_1_items_4 = {ROLE_ReplySchema_oneOf_1_items_4_elements,.length=2};

/* ROLE_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf_1_items[] = {
&ROLE_ReplySchema_oneOf_1_items_0,
&ROLE_ReplySchema_oneOf_1_items_1,
&ROLE_ReplySchema_oneOf_1_items_2,
&ROLE_ReplySchema_oneOf_1_items_3,
&ROLE_ReplySchema_oneOf_1_items_4,
};

/* ROLE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=5},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=5},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ROLE_ReplySchema_oneOf_1_items,.length=5}},
};

struct jsonObject ROLE_ReplySchema_oneOf_1 = {ROLE_ReplySchema_oneOf_1_elements,.length=4};

/* ROLE_ReplySchema_oneOf_2_items_0 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="sentinel"},
};

struct jsonObject ROLE_ReplySchema_oneOf_2_items_0 = {ROLE_ReplySchema_oneOf_2_items_0_elements,.length=1};

/* ROLE_ReplySchema_oneOf_2_items_1_items reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_2_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ROLE_ReplySchema_oneOf_2_items_1_items = {ROLE_ReplySchema_oneOf_2_items_1_items_elements,.length=1};

/* ROLE_ReplySchema_oneOf_2_items_1 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of master names monitored by this sentinel instance"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ROLE_ReplySchema_oneOf_2_items_1_items},
};

struct jsonObject ROLE_ReplySchema_oneOf_2_items_1 = {ROLE_ReplySchema_oneOf_2_items_1_elements,.length=3};

/* ROLE_ReplySchema_oneOf_2_items array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf_2_items[] = {
&ROLE_ReplySchema_oneOf_2_items_0,
&ROLE_ReplySchema_oneOf_2_items_1,
};

/* ROLE_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement ROLE_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ROLE_ReplySchema_oneOf_2_items,.length=2}},
};

struct jsonObject ROLE_ReplySchema_oneOf_2 = {ROLE_ReplySchema_oneOf_2_elements,.length=4};

/* ROLE_ReplySchema_oneOf array reply schema */
struct jsonObject *ROLE_ReplySchema_oneOf[] = {
&ROLE_ReplySchema_oneOf_0,
&ROLE_ReplySchema_oneOf_1,
&ROLE_ReplySchema_oneOf_2,
};

/* ROLE_ReplySchema reply schema */
struct jsonObjectElement ROLE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ROLE_ReplySchema_oneOf,.length=3}},
};

struct jsonObject ROLE_ReplySchema = {ROLE_ReplySchema_elements,.length=1};

/********** SAVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SAVE history */
#define SAVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SAVE tips */
#define SAVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SAVE key specs */
#define SAVE_Keyspecs NULL
#endif

/* SAVE_ReplySchema reply schema */
struct jsonObjectElement SAVE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SAVE_ReplySchema = {SAVE_ReplySchema_elements,.length=1};

/********** SHUTDOWN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SHUTDOWN history */
commandHistory SHUTDOWN_History[] = {
{"7.0.0","Added the `NOW`, `FORCE` and `ABORT` modifiers."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SHUTDOWN tips */
#define SHUTDOWN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SHUTDOWN key specs */
#define SHUTDOWN_Keyspecs NULL
#endif

/* SHUTDOWN save_selector argument table */
struct COMMAND_ARG SHUTDOWN_save_selector_Subargs[] = {
{MAKE_ARG("nosave",ARG_TYPE_PURE_TOKEN,-1,"NOSAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("save",ARG_TYPE_PURE_TOKEN,-1,"SAVE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SHUTDOWN argument table */
struct COMMAND_ARG SHUTDOWN_Args[] = {
{MAKE_ARG("save-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=SHUTDOWN_save_selector_Subargs},
{MAKE_ARG("now",ARG_TYPE_PURE_TOKEN,-1,"NOW",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("abort",ARG_TYPE_PURE_TOKEN,-1,"ABORT",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* SHUTDOWN_ReplySchema reply schema */
struct jsonObjectElement SHUTDOWN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="OK if ABORT was specified and shutdown was aborted. On successful shutdown, nothing is returned since the server quits and the connection is closed. On failure, an error is returned."},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SHUTDOWN_ReplySchema = {SHUTDOWN_ReplySchema_elements,.length=2};

/********** SLAVEOF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLAVEOF history */
#define SLAVEOF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLAVEOF tips */
#define SLAVEOF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLAVEOF key specs */
#define SLAVEOF_Keyspecs NULL
#endif

/* SLAVEOF args host_port argument table */
struct COMMAND_ARG SLAVEOF_args_host_port_Subargs[] = {
{MAKE_ARG("host",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("port",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SLAVEOF args no_one argument table */
struct COMMAND_ARG SLAVEOF_args_no_one_Subargs[] = {
{MAKE_ARG("no",ARG_TYPE_PURE_TOKEN,-1,"NO",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("one",ARG_TYPE_PURE_TOKEN,-1,"ONE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SLAVEOF args argument table */
struct COMMAND_ARG SLAVEOF_args_Subargs[] = {
{MAKE_ARG("host-port",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_host_port_Subargs},
{MAKE_ARG("no-one",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_no_one_Subargs},
};

/* SLAVEOF argument table */
struct COMMAND_ARG SLAVEOF_Args[] = {
{MAKE_ARG("args",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=SLAVEOF_args_Subargs},
};

/* SLAVEOF_ReplySchema reply schema */
struct jsonObjectElement SLAVEOF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="slaveOf status"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="OK*"},
};

struct jsonObject SLAVEOF_ReplySchema = {SLAVEOF_ReplySchema_elements,.length=3};

/********** SLOWLOG GET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG GET history */
commandHistory SLOWLOG_GET_History[] = {
{"4.0.0","Added client IP address, port and name to the reply."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG GET tips */
const char *SLOWLOG_GET_Tips[] = {
"request_policy:all_nodes",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG GET key specs */
#define SLOWLOG_GET_Keyspecs NULL
#endif

/* SLOWLOG GET argument table */
struct COMMAND_ARG SLOWLOG_GET_Args[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* SLOWLOG_GET_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Slow log entry ID."},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_0 = {SLOWLOG_GET_ReplySchema_items_items_0_elements,.length=2};

/* SLOWLOG_GET_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The unix timestamp at which the logged command was processed."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_1 = {SLOWLOG_GET_ReplySchema_items_items_1_elements,.length=3};

/* SLOWLOG_GET_ReplySchema_items_items_2 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The amount of time needed for its execution, in microseconds."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_2 = {SLOWLOG_GET_ReplySchema_items_items_2_elements,.length=3};

/* SLOWLOG_GET_ReplySchema_items_items_3_items reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_3_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_3_items = {SLOWLOG_GET_ReplySchema_items_items_3_items_elements,.length=1};

/* SLOWLOG_GET_ReplySchema_items_items_3 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_3_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="The arguments of the command."},
{JSON_TYPE_OBJECT,"items",.value.object=&SLOWLOG_GET_ReplySchema_items_items_3_items},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_3 = {SLOWLOG_GET_ReplySchema_items_items_3_elements,.length=3};

/* SLOWLOG_GET_ReplySchema_items_items_4 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_4_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Client IP address and port."},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_4 = {SLOWLOG_GET_ReplySchema_items_items_4_elements,.length=2};

/* SLOWLOG_GET_ReplySchema_items_items_5 reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_items_5_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Client name if set via the CLIENT SETNAME command."},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items_items_5 = {SLOWLOG_GET_ReplySchema_items_items_5_elements,.length=2};

/* SLOWLOG_GET_ReplySchema_items_items array reply schema */
struct jsonObject *SLOWLOG_GET_ReplySchema_items_items[] = {
&SLOWLOG_GET_ReplySchema_items_items_0,
&SLOWLOG_GET_ReplySchema_items_items_1,
&SLOWLOG_GET_ReplySchema_items_items_2,
&SLOWLOG_GET_ReplySchema_items_items_3,
&SLOWLOG_GET_ReplySchema_items_items_4,
&SLOWLOG_GET_ReplySchema_items_items_5,
};

/* SLOWLOG_GET_ReplySchema_items reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=6},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=6},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SLOWLOG_GET_ReplySchema_items_items,.length=6}},
};

struct jsonObject SLOWLOG_GET_ReplySchema_items = {SLOWLOG_GET_ReplySchema_items_elements,.length=4};

/* SLOWLOG_GET_ReplySchema reply schema */
struct jsonObjectElement SLOWLOG_GET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Entries from the slow log in chronological order."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SLOWLOG_GET_ReplySchema_items},
};

struct jsonObject SLOWLOG_GET_ReplySchema = {SLOWLOG_GET_ReplySchema_elements,.length=4};

/********** SLOWLOG HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG HELP history */
#define SLOWLOG_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG HELP tips */
#define SLOWLOG_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG HELP key specs */
#define SLOWLOG_HELP_Keyspecs NULL
#endif

/* SLOWLOG_HELP_ReplySchema_items reply schema */
struct jsonObjectElement SLOWLOG_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SLOWLOG_HELP_ReplySchema_items = {SLOWLOG_HELP_ReplySchema_items_elements,.length=1};

/* SLOWLOG_HELP_ReplySchema reply schema */
struct jsonObjectElement SLOWLOG_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&SLOWLOG_HELP_ReplySchema_items},
};

struct jsonObject SLOWLOG_HELP_ReplySchema = {SLOWLOG_HELP_ReplySchema_elements,.length=3};

/********** SLOWLOG LEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG LEN history */
#define SLOWLOG_LEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG LEN tips */
const char *SLOWLOG_LEN_Tips[] = {
"request_policy:all_nodes",
"response_policy:agg_sum",
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG LEN key specs */
#define SLOWLOG_LEN_Keyspecs NULL
#endif

/* SLOWLOG_LEN_ReplySchema reply schema */
struct jsonObjectElement SLOWLOG_LEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of entries in the slow log."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SLOWLOG_LEN_ReplySchema = {SLOWLOG_LEN_ReplySchema_elements,.length=3};

/********** SLOWLOG RESET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG RESET history */
#define SLOWLOG_RESET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG RESET tips */
const char *SLOWLOG_RESET_Tips[] = {
"request_policy:all_nodes",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG RESET key specs */
#define SLOWLOG_RESET_Keyspecs NULL
#endif

/* SLOWLOG_RESET_ReplySchema reply schema */
struct jsonObjectElement SLOWLOG_RESET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SLOWLOG_RESET_ReplySchema = {SLOWLOG_RESET_ReplySchema_elements,.length=1};

/* SLOWLOG command table */
struct COMMAND_STRUCT SLOWLOG_Subcommands[] = {
{MAKE_CMD("get","Returns the slow log's entries.","O(N) where N is the number of entries returned","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_GET_History,1,SLOWLOG_GET_Tips,2,slowlogCommand,-2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_GET_Keyspecs,0,NULL,1),.args=SLOWLOG_GET_Args,.reply_schema=&SLOWLOG_GET_ReplySchema},
{MAKE_CMD("help","Show helpful text about the different subcommands","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_HELP_History,0,SLOWLOG_HELP_Tips,0,slowlogCommand,2,CMD_LOADING|CMD_STALE,0,SLOWLOG_HELP_Keyspecs,0,NULL,0),.reply_schema=&SLOWLOG_HELP_ReplySchema},
{MAKE_CMD("len","Returns the number of entries in the slow log.","O(1)","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_LEN_History,0,SLOWLOG_LEN_Tips,3,slowlogCommand,2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_LEN_Keyspecs,0,NULL,0),.reply_schema=&SLOWLOG_LEN_ReplySchema},
{MAKE_CMD("reset","Clears all entries from the slow log.","O(N) where N is the number of entries in the slowlog","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_RESET_History,0,SLOWLOG_RESET_Tips,2,slowlogCommand,2,CMD_ADMIN|CMD_LOADING|CMD_STALE,0,SLOWLOG_RESET_Keyspecs,0,NULL,0),.reply_schema=&SLOWLOG_RESET_ReplySchema},
{0}
};

/********** SLOWLOG ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SLOWLOG history */
#define SLOWLOG_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SLOWLOG tips */
#define SLOWLOG_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SLOWLOG key specs */
#define SLOWLOG_Keyspecs NULL
#endif

/********** SWAPDB ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SWAPDB history */
#define SWAPDB_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SWAPDB tips */
#define SWAPDB_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SWAPDB key specs */
#define SWAPDB_Keyspecs NULL
#endif

/* SWAPDB argument table */
struct COMMAND_ARG SWAPDB_Args[] = {
{MAKE_ARG("index1",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("index2",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SWAPDB_ReplySchema reply schema */
struct jsonObjectElement SWAPDB_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SWAPDB_ReplySchema = {SWAPDB_ReplySchema_elements,.length=1};

/********** SYNC ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SYNC history */
#define SYNC_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SYNC tips */
#define SYNC_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SYNC key specs */
#define SYNC_Keyspecs NULL
#endif

/********** TIME ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* TIME history */
#define TIME_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* TIME tips */
const char *TIME_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* TIME key specs */
#define TIME_Keyspecs NULL
#endif

/* TIME_ReplySchema_items reply schema */
struct jsonObjectElement TIME_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+"},
};

struct jsonObject TIME_ReplySchema_items = {TIME_ReplySchema_items_elements,.length=2};

/* TIME_ReplySchema reply schema */
struct jsonObjectElement TIME_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Array containing two elements: Unix time in seconds and microseconds."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_OBJECT,"items",.value.object=&TIME_ReplySchema_items},
};

struct jsonObject TIME_ReplySchema = {TIME_ReplySchema_elements,.length=5};

/********** SADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SADD history */
commandHistory SADD_History[] = {
{"2.4.0","Accepts multiple `member` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SADD tips */
#define SADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SADD key specs */
keySpec SADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SADD argument table */
struct COMMAND_ARG SADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SADD_ReplySchema reply schema */
struct jsonObjectElement SADD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of elements that were added to the set, not including all the elements already present in the set."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject SADD_ReplySchema = {SADD_ReplySchema_elements,.length=2};

/********** SCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SCARD history */
#define SCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SCARD tips */
#define SCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SCARD key specs */
keySpec SCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SCARD argument table */
struct COMMAND_ARG SCARD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SCARD_ReplySchema reply schema */
struct jsonObjectElement SCARD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The cardinality (number of elements) of the set, or 0 if key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SCARD_ReplySchema = {SCARD_ReplySchema_elements,.length=3};

/********** SDIFF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SDIFF history */
#define SDIFF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SDIFF tips */
const char *SDIFF_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SDIFF key specs */
keySpec SDIFF_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SDIFF argument table */
struct COMMAND_ARG SDIFF_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SDIFF_ReplySchema_items reply schema */
struct jsonObjectElement SDIFF_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SDIFF_ReplySchema_items = {SDIFF_ReplySchema_items_elements,.length=1};

/* SDIFF_ReplySchema reply schema */
struct jsonObjectElement SDIFF_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List with the members of the resulting set."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SDIFF_ReplySchema_items},
};

struct jsonObject SDIFF_ReplySchema = {SDIFF_ReplySchema_elements,.length=4};

/********** SDIFFSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SDIFFSTORE history */
#define SDIFFSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SDIFFSTORE tips */
#define SDIFFSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SDIFFSTORE key specs */
keySpec SDIFFSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SDIFFSTORE argument table */
struct COMMAND_ARG SDIFFSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SDIFFSTORE_ReplySchema reply schema */
struct jsonObjectElement SDIFFSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of the elements in the resulting set."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SDIFFSTORE_ReplySchema = {SDIFFSTORE_ReplySchema_elements,.length=3};

/********** SINTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTER history */
#define SINTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTER tips */
const char *SINTER_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTER key specs */
keySpec SINTER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SINTER argument table */
struct COMMAND_ARG SINTER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SINTER_ReplySchema_items reply schema */
struct jsonObjectElement SINTER_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SINTER_ReplySchema_items = {SINTER_ReplySchema_items_elements,.length=1};

/* SINTER_ReplySchema reply schema */
struct jsonObjectElement SINTER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List with the members of the resulting set."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SINTER_ReplySchema_items},
};

struct jsonObject SINTER_ReplySchema = {SINTER_ReplySchema_elements,.length=4};

/********** SINTERCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTERCARD history */
#define SINTERCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTERCARD tips */
#define SINTERCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTERCARD key specs */
keySpec SINTERCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* SINTERCARD argument table */
struct COMMAND_ARG SINTERCARD_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_INTEGER,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* SINTERCARD_ReplySchema reply schema */
struct jsonObjectElement SINTERCARD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of the elements in the resulting intersection."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SINTERCARD_ReplySchema = {SINTERCARD_ReplySchema_elements,.length=3};

/********** SINTERSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SINTERSTORE history */
#define SINTERSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SINTERSTORE tips */
#define SINTERSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SINTERSTORE key specs */
keySpec SINTERSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SINTERSTORE argument table */
struct COMMAND_ARG SINTERSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SINTERSTORE_ReplySchema reply schema */
struct jsonObjectElement SINTERSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of the elements in the result set."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SINTERSTORE_ReplySchema = {SINTERSTORE_ReplySchema_elements,.length=3};

/********** SISMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SISMEMBER history */
#define SISMEMBER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SISMEMBER tips */
#define SISMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SISMEMBER key specs */
keySpec SISMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SISMEMBER argument table */
struct COMMAND_ARG SISMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SISMEMBER_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SISMEMBER_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="The element is not a member of the set, or the key does not exist."},
};

struct jsonObject SISMEMBER_ReplySchema_oneOf_0 = {SISMEMBER_ReplySchema_oneOf_0_elements,.length=2};

/* SISMEMBER_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SISMEMBER_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="The element is a member of the set."},
};

struct jsonObject SISMEMBER_ReplySchema_oneOf_1 = {SISMEMBER_ReplySchema_oneOf_1_elements,.length=2};

/* SISMEMBER_ReplySchema_oneOf array reply schema */
struct jsonObject *SISMEMBER_ReplySchema_oneOf[] = {
&SISMEMBER_ReplySchema_oneOf_0,
&SISMEMBER_ReplySchema_oneOf_1,
};

/* SISMEMBER_ReplySchema reply schema */
struct jsonObjectElement SISMEMBER_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SISMEMBER_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SISMEMBER_ReplySchema = {SISMEMBER_ReplySchema_elements,.length=1};

/********** SMEMBERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMEMBERS history */
#define SMEMBERS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMEMBERS tips */
const char *SMEMBERS_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMEMBERS key specs */
keySpec SMEMBERS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMEMBERS argument table */
struct COMMAND_ARG SMEMBERS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SMEMBERS_ReplySchema_items reply schema */
struct jsonObjectElement SMEMBERS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SMEMBERS_ReplySchema_items = {SMEMBERS_ReplySchema_items_elements,.length=1};

/* SMEMBERS_ReplySchema reply schema */
struct jsonObjectElement SMEMBERS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="All elements of the set."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SMEMBERS_ReplySchema_items},
};

struct jsonObject SMEMBERS_ReplySchema = {SMEMBERS_ReplySchema_elements,.length=4};

/********** SMISMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMISMEMBER history */
#define SMISMEMBER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMISMEMBER tips */
#define SMISMEMBER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMISMEMBER key specs */
keySpec SMISMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMISMEMBER argument table */
struct COMMAND_ARG SMISMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SMISMEMBER_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement SMISMEMBER_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="Not a member of the set or the key does not exist."},
};

struct jsonObject SMISMEMBER_ReplySchema_items_oneOf_0 = {SMISMEMBER_ReplySchema_items_oneOf_0_elements,.length=2};

/* SMISMEMBER_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement SMISMEMBER_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="A member of the set."},
};

struct jsonObject SMISMEMBER_ReplySchema_items_oneOf_1 = {SMISMEMBER_ReplySchema_items_oneOf_1_elements,.length=2};

/* SMISMEMBER_ReplySchema_items_oneOf array reply schema */
struct jsonObject *SMISMEMBER_ReplySchema_items_oneOf[] = {
&SMISMEMBER_ReplySchema_items_oneOf_0,
&SMISMEMBER_ReplySchema_items_oneOf_1,
};

/* SMISMEMBER_ReplySchema_items reply schema */
struct jsonObjectElement SMISMEMBER_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SMISMEMBER_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject SMISMEMBER_ReplySchema_items = {SMISMEMBER_ReplySchema_items_elements,.length=1};

/* SMISMEMBER_ReplySchema reply schema */
struct jsonObjectElement SMISMEMBER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List representing the membership of the given elements, in the same order as they are requested."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SMISMEMBER_ReplySchema_items},
};

struct jsonObject SMISMEMBER_ReplySchema = {SMISMEMBER_ReplySchema_elements,.length=4};

/********** SMOVE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SMOVE history */
#define SMOVE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SMOVE tips */
#define SMOVE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SMOVE key specs */
keySpec SMOVE_Keyspecs[2] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SMOVE argument table */
struct COMMAND_ARG SMOVE_Args[] = {
{MAKE_ARG("source",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("destination",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SMOVE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SMOVE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
{JSON_TYPE_STRING,"description",.value.string="Element is moved."},
};

struct jsonObject SMOVE_ReplySchema_oneOf_0 = {SMOVE_ReplySchema_oneOf_0_elements,.length=2};

/* SMOVE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SMOVE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
{JSON_TYPE_STRING,"description",.value.string="The element is not a member of source and no operation was performed."},
};

struct jsonObject SMOVE_ReplySchema_oneOf_1 = {SMOVE_ReplySchema_oneOf_1_elements,.length=2};

/* SMOVE_ReplySchema_oneOf array reply schema */
struct jsonObject *SMOVE_ReplySchema_oneOf[] = {
&SMOVE_ReplySchema_oneOf_0,
&SMOVE_ReplySchema_oneOf_1,
};

/* SMOVE_ReplySchema reply schema */
struct jsonObjectElement SMOVE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SMOVE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SMOVE_ReplySchema = {SMOVE_ReplySchema_elements,.length=1};

/********** SPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SPOP history */
commandHistory SPOP_History[] = {
{"3.2.0","Added the `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SPOP tips */
const char *SPOP_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SPOP key specs */
keySpec SPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SPOP argument table */
struct COMMAND_ARG SPOP_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"3.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* SPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
};

struct jsonObject SPOP_ReplySchema_oneOf_0 = {SPOP_ReplySchema_oneOf_0_elements,.length=2};

/* SPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The removed member when 'COUNT' is not given."},
};

struct jsonObject SPOP_ReplySchema_oneOf_1 = {SPOP_ReplySchema_oneOf_1_elements,.length=2};

/* SPOP_ReplySchema_oneOf_2_items reply schema */
struct jsonObjectElement SPOP_ReplySchema_oneOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SPOP_ReplySchema_oneOf_2_items = {SPOP_ReplySchema_oneOf_2_items_elements,.length=1};

/* SPOP_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement SPOP_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List to the removed members when 'COUNT' is given."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SPOP_ReplySchema_oneOf_2_items},
};

struct jsonObject SPOP_ReplySchema_oneOf_2 = {SPOP_ReplySchema_oneOf_2_elements,.length=4};

/* SPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *SPOP_ReplySchema_oneOf[] = {
&SPOP_ReplySchema_oneOf_0,
&SPOP_ReplySchema_oneOf_1,
&SPOP_ReplySchema_oneOf_2,
};

/* SPOP_ReplySchema reply schema */
struct jsonObjectElement SPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SPOP_ReplySchema_oneOf,.length=3}},
};

struct jsonObject SPOP_ReplySchema = {SPOP_ReplySchema_elements,.length=1};

/********** SRANDMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SRANDMEMBER history */
commandHistory SRANDMEMBER_History[] = {
{"2.6.0","Added the optional `count` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SRANDMEMBER tips */
const char *SRANDMEMBER_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SRANDMEMBER key specs */
keySpec SRANDMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SRANDMEMBER argument table */
struct COMMAND_ARG SRANDMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,"2.6.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* SRANDMEMBER_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` is not given and key doesn't exist"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SRANDMEMBER_ReplySchema_oneOf_0 = {SRANDMEMBER_ReplySchema_oneOf_0_elements,.length=2};

/* SRANDMEMBER_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` is not given, randomly selected element"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SRANDMEMBER_ReplySchema_oneOf_1 = {SRANDMEMBER_ReplySchema_oneOf_1_elements,.length=2};

/* SRANDMEMBER_ReplySchema_oneOf_2_items reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_oneOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SRANDMEMBER_ReplySchema_oneOf_2_items = {SRANDMEMBER_ReplySchema_oneOf_2_items_elements,.length=1};

/* SRANDMEMBER_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` is given, an array of elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SRANDMEMBER_ReplySchema_oneOf_2_items},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
};

struct jsonObject SRANDMEMBER_ReplySchema_oneOf_2 = {SRANDMEMBER_ReplySchema_oneOf_2_elements,.length=4};

/* SRANDMEMBER_ReplySchema_oneOf_3 reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_oneOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="In case `count` is given and key doesn't exist"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=0},
};

struct jsonObject SRANDMEMBER_ReplySchema_oneOf_3 = {SRANDMEMBER_ReplySchema_oneOf_3_elements,.length=3};

/* SRANDMEMBER_ReplySchema_oneOf array reply schema */
struct jsonObject *SRANDMEMBER_ReplySchema_oneOf[] = {
&SRANDMEMBER_ReplySchema_oneOf_0,
&SRANDMEMBER_ReplySchema_oneOf_1,
&SRANDMEMBER_ReplySchema_oneOf_2,
&SRANDMEMBER_ReplySchema_oneOf_3,
};

/* SRANDMEMBER_ReplySchema reply schema */
struct jsonObjectElement SRANDMEMBER_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SRANDMEMBER_ReplySchema_oneOf,.length=4}},
};

struct jsonObject SRANDMEMBER_ReplySchema = {SRANDMEMBER_ReplySchema_elements,.length=1};

/********** SREM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SREM history */
commandHistory SREM_History[] = {
{"2.4.0","Accepts multiple `member` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SREM tips */
#define SREM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SREM key specs */
keySpec SREM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SREM argument table */
struct COMMAND_ARG SREM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SREM_ReplySchema reply schema */
struct jsonObjectElement SREM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of members that were removed from the set, not including non existing members."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SREM_ReplySchema = {SREM_ReplySchema_elements,.length=3};

/********** SSCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SSCAN history */
#define SSCAN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SSCAN tips */
const char *SSCAN_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SSCAN key specs */
keySpec SSCAN_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SSCAN argument table */
struct COMMAND_ARG SSCAN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* SSCAN_ReplySchema_items_0 reply schema */
struct jsonObjectElement SSCAN_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SSCAN_ReplySchema_items_0 = {SSCAN_ReplySchema_items_0_elements,.length=2};

/* SSCAN_ReplySchema_items_1_items reply schema */
struct jsonObjectElement SSCAN_ReplySchema_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SSCAN_ReplySchema_items_1_items = {SSCAN_ReplySchema_items_1_items_elements,.length=1};

/* SSCAN_ReplySchema_items_1 reply schema */
struct jsonObjectElement SSCAN_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of set members"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&SSCAN_ReplySchema_items_1_items},
};

struct jsonObject SSCAN_ReplySchema_items_1 = {SSCAN_ReplySchema_items_1_elements,.length=3};

/* SSCAN_ReplySchema_items array reply schema */
struct jsonObject *SSCAN_ReplySchema_items[] = {
&SSCAN_ReplySchema_items_0,
&SSCAN_ReplySchema_items_1,
};

/* SSCAN_ReplySchema reply schema */
struct jsonObjectElement SSCAN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor and scan response in array form"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=SSCAN_ReplySchema_items,.length=2}},
};

struct jsonObject SSCAN_ReplySchema = {SSCAN_ReplySchema_elements,.length=5};

/********** SUNION ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUNION history */
#define SUNION_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUNION tips */
const char *SUNION_Tips[] = {
"nondeterministic_output_order",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUNION key specs */
keySpec SUNION_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SUNION argument table */
struct COMMAND_ARG SUNION_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SUNION_ReplySchema_items reply schema */
struct jsonObjectElement SUNION_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SUNION_ReplySchema_items = {SUNION_ReplySchema_items_elements,.length=1};

/* SUNION_ReplySchema reply schema */
struct jsonObjectElement SUNION_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List with the members of the resulting set."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&SUNION_ReplySchema_items},
};

struct jsonObject SUNION_ReplySchema = {SUNION_ReplySchema_elements,.length=4};

/********** SUNIONSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUNIONSTORE history */
#define SUNIONSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUNIONSTORE tips */
#define SUNIONSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUNIONSTORE key specs */
keySpec SUNIONSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* SUNIONSTORE argument table */
struct COMMAND_ARG SUNIONSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* SUNIONSTORE_ReplySchema reply schema */
struct jsonObjectElement SUNIONSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of the elements in the resulting set."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SUNIONSTORE_ReplySchema = {SUNIONSTORE_ReplySchema_elements,.length=3};

/********** BZMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BZMPOP history */
#define BZMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BZMPOP tips */
#define BZMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BZMPOP key specs */
keySpec BZMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* BZMPOP where argument table */
struct COMMAND_ARG BZMPOP_where_Subargs[] = {
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BZMPOP argument table */
struct COMMAND_ARG BZMPOP_Args[] = {
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=BZMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* BZMPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Timeout reached and no elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_0 = {BZMPOP_ReplySchema_oneOf_0_elements,.length=2};

/* BZMPOP_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Keyname"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1_items_0 = {BZMPOP_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BZMPOP_ReplySchema_oneOf_1_items_1_items_items_0 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_items_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1_items_1_items_items_0 = {BZMPOP_ReplySchema_oneOf_1_items_1_items_items_0_elements,.length=2};

/* BZMPOP_ReplySchema_oneOf_1_items_1_items_items_1 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_items_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1_items_1_items_items_1 = {BZMPOP_ReplySchema_oneOf_1_items_1_items_items_1_elements,.length=2};

/* BZMPOP_ReplySchema_oneOf_1_items_1_items_items array reply schema */
struct jsonObject *BZMPOP_ReplySchema_oneOf_1_items_1_items_items[] = {
&BZMPOP_ReplySchema_oneOf_1_items_1_items_items_0,
&BZMPOP_ReplySchema_oneOf_1_items_1_items_items_1,
};

/* BZMPOP_ReplySchema_oneOf_1_items_1_items reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BZMPOP_ReplySchema_oneOf_1_items_1_items_items,.length=2}},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1_items_1_items = {BZMPOP_ReplySchema_oneOf_1_items_1_items_elements,.length=4};

/* BZMPOP_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Popped members and their scores."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&BZMPOP_ReplySchema_oneOf_1_items_1_items},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1_items_1 = {BZMPOP_ReplySchema_oneOf_1_items_1_elements,.length=4};

/* BZMPOP_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BZMPOP_ReplySchema_oneOf_1_items[] = {
&BZMPOP_ReplySchema_oneOf_1_items_0,
&BZMPOP_ReplySchema_oneOf_1_items_1,
};

/* BZMPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The keyname and the popped members."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BZMPOP_ReplySchema_oneOf_1_items,.length=2}},
};

struct jsonObject BZMPOP_ReplySchema_oneOf_1 = {BZMPOP_ReplySchema_oneOf_1_elements,.length=5};

/* BZMPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *BZMPOP_ReplySchema_oneOf[] = {
&BZMPOP_ReplySchema_oneOf_0,
&BZMPOP_ReplySchema_oneOf_1,
};

/* BZMPOP_ReplySchema reply schema */
struct jsonObjectElement BZMPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BZMPOP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BZMPOP_ReplySchema = {BZMPOP_ReplySchema_elements,.length=1};

/********** BZPOPMAX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BZPOPMAX history */
commandHistory BZPOPMAX_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BZPOPMAX tips */
#define BZPOPMAX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BZPOPMAX key specs */
keySpec BZPOPMAX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BZPOPMAX argument table */
struct COMMAND_ARG BZPOPMAX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BZPOPMAX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Timeout reached and no elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BZPOPMAX_ReplySchema_oneOf_0 = {BZPOPMAX_ReplySchema_oneOf_0_elements,.length=2};

/* BZPOPMAX_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Keyname"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZPOPMAX_ReplySchema_oneOf_1_items_0 = {BZPOPMAX_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BZPOPMAX_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZPOPMAX_ReplySchema_oneOf_1_items_1 = {BZPOPMAX_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* BZPOPMAX_ReplySchema_oneOf_1_items_2 reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject BZPOPMAX_ReplySchema_oneOf_1_items_2 = {BZPOPMAX_ReplySchema_oneOf_1_items_2_elements,.length=2};

/* BZPOPMAX_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BZPOPMAX_ReplySchema_oneOf_1_items[] = {
&BZPOPMAX_ReplySchema_oneOf_1_items_0,
&BZPOPMAX_ReplySchema_oneOf_1_items_1,
&BZPOPMAX_ReplySchema_oneOf_1_items_2,
};

/* BZPOPMAX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The keyname, popped member, and its score."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BZPOPMAX_ReplySchema_oneOf_1_items,.length=3}},
};

struct jsonObject BZPOPMAX_ReplySchema_oneOf_1 = {BZPOPMAX_ReplySchema_oneOf_1_elements,.length=5};

/* BZPOPMAX_ReplySchema_oneOf array reply schema */
struct jsonObject *BZPOPMAX_ReplySchema_oneOf[] = {
&BZPOPMAX_ReplySchema_oneOf_0,
&BZPOPMAX_ReplySchema_oneOf_1,
};

/* BZPOPMAX_ReplySchema reply schema */
struct jsonObjectElement BZPOPMAX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BZPOPMAX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BZPOPMAX_ReplySchema = {BZPOPMAX_ReplySchema_elements,.length=1};

/********** BZPOPMIN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* BZPOPMIN history */
commandHistory BZPOPMIN_History[] = {
{"6.0.0","`timeout` is interpreted as a double instead of an integer."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* BZPOPMIN tips */
#define BZPOPMIN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* BZPOPMIN key specs */
keySpec BZPOPMIN_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-2,1,0}}
};
#endif

/* BZPOPMIN argument table */
struct COMMAND_ARG BZPOPMIN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("timeout",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* BZPOPMIN_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Timeout reached and no elements were popped."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject BZPOPMIN_ReplySchema_oneOf_0 = {BZPOPMIN_ReplySchema_oneOf_0_elements,.length=2};

/* BZPOPMIN_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Keyname"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZPOPMIN_ReplySchema_oneOf_1_items_0 = {BZPOPMIN_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* BZPOPMIN_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject BZPOPMIN_ReplySchema_oneOf_1_items_1 = {BZPOPMIN_ReplySchema_oneOf_1_items_1_elements,.length=2};

/* BZPOPMIN_ReplySchema_oneOf_1_items_2 reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject BZPOPMIN_ReplySchema_oneOf_1_items_2 = {BZPOPMIN_ReplySchema_oneOf_1_items_2_elements,.length=2};

/* BZPOPMIN_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *BZPOPMIN_ReplySchema_oneOf_1_items[] = {
&BZPOPMIN_ReplySchema_oneOf_1_items_0,
&BZPOPMIN_ReplySchema_oneOf_1_items_1,
&BZPOPMIN_ReplySchema_oneOf_1_items_2,
};

/* BZPOPMIN_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The keyname, popped member, and its score."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=BZPOPMIN_ReplySchema_oneOf_1_items,.length=3}},
};

struct jsonObject BZPOPMIN_ReplySchema_oneOf_1 = {BZPOPMIN_ReplySchema_oneOf_1_elements,.length=5};

/* BZPOPMIN_ReplySchema_oneOf array reply schema */
struct jsonObject *BZPOPMIN_ReplySchema_oneOf[] = {
&BZPOPMIN_ReplySchema_oneOf_0,
&BZPOPMIN_ReplySchema_oneOf_1,
};

/* BZPOPMIN_ReplySchema reply schema */
struct jsonObjectElement BZPOPMIN_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=BZPOPMIN_ReplySchema_oneOf,.length=2}},
};

struct jsonObject BZPOPMIN_ReplySchema = {BZPOPMIN_ReplySchema_elements,.length=1};

/********** ZADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZADD history */
commandHistory ZADD_History[] = {
{"2.4.0","Accepts multiple elements."},
{"3.0.2","Added the `XX`, `NX`, `CH` and `INCR` options."},
{"6.2.0","Added the `GT` and `LT` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZADD tips */
#define ZADD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZADD key specs */
keySpec ZADD_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZADD condition argument table */
struct COMMAND_ARG ZADD_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZADD comparison argument table */
struct COMMAND_ARG ZADD_comparison_Subargs[] = {
{MAKE_ARG("gt",ARG_TYPE_PURE_TOKEN,-1,"GT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("lt",ARG_TYPE_PURE_TOKEN,-1,"LT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZADD data argument table */
struct COMMAND_ARG ZADD_data_Subargs[] = {
{MAKE_ARG("score",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZADD argument table */
struct COMMAND_ARG ZADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"3.0.2",CMD_ARG_OPTIONAL,2,NULL),.subargs=ZADD_condition_Subargs},
{MAKE_ARG("comparison",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=ZADD_comparison_Subargs},
{MAKE_ARG("change",ARG_TYPE_PURE_TOKEN,-1,"CH",NULL,"3.0.2",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_PURE_TOKEN,-1,"INCR",NULL,"3.0.2",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=ZADD_data_Subargs},
};

/* ZADD_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZADD_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Operation was aborted (conflict with one of the `XX`/`NX`/`LT`/`GT` options)."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject ZADD_ReplySchema_anyOf_0 = {ZADD_ReplySchema_anyOf_0_elements,.length=2};

/* ZADD_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZADD_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of new members (when the `CH` option is not used)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZADD_ReplySchema_anyOf_1 = {ZADD_ReplySchema_anyOf_1_elements,.length=2};

/* ZADD_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement ZADD_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of new or updated members (when the `CH` option is used)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZADD_ReplySchema_anyOf_2 = {ZADD_ReplySchema_anyOf_2_elements,.length=2};

/* ZADD_ReplySchema_anyOf_3 reply schema */
struct jsonObjectElement ZADD_ReplySchema_anyOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The updated score of the member (when the `INCR` option is used)"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZADD_ReplySchema_anyOf_3 = {ZADD_ReplySchema_anyOf_3_elements,.length=2};

/* ZADD_ReplySchema_anyOf array reply schema */
struct jsonObject *ZADD_ReplySchema_anyOf[] = {
&ZADD_ReplySchema_anyOf_0,
&ZADD_ReplySchema_anyOf_1,
&ZADD_ReplySchema_anyOf_2,
&ZADD_ReplySchema_anyOf_3,
};

/* ZADD_ReplySchema reply schema */
struct jsonObjectElement ZADD_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZADD_ReplySchema_anyOf,.length=4}},
};

struct jsonObject ZADD_ReplySchema = {ZADD_ReplySchema_elements,.length=1};

/********** ZCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZCARD history */
#define ZCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZCARD tips */
#define ZCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZCARD key specs */
keySpec ZCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZCARD argument table */
struct COMMAND_ARG ZCARD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZCARD_ReplySchema reply schema */
struct jsonObjectElement ZCARD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The cardinality (number of elements) of the sorted set, or 0 if key does not exist"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZCARD_ReplySchema = {ZCARD_ReplySchema_elements,.length=2};

/********** ZCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZCOUNT history */
#define ZCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZCOUNT tips */
#define ZCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZCOUNT key specs */
keySpec ZCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZCOUNT argument table */
struct COMMAND_ARG ZCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZCOUNT_ReplySchema reply schema */
struct jsonObjectElement ZCOUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of elements in the specified score range"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZCOUNT_ReplySchema = {ZCOUNT_ReplySchema_elements,.length=2};

/********** ZDIFF ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZDIFF history */
#define ZDIFF_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZDIFF tips */
#define ZDIFF_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZDIFF key specs */
keySpec ZDIFF_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZDIFF argument table */
struct COMMAND_ARG ZDIFF_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZDIFF_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_0_items = {ZDIFF_ReplySchema_anyOf_0_items_elements,.length=1};

/* ZDIFF_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A list of members. Returned in case `WITHSCORES` was not used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ZDIFF_ReplySchema_anyOf_0_items},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_0 = {ZDIFF_ReplySchema_anyOf_0_elements,.length=3};

/* ZDIFF_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_1_items_items_0 = {ZDIFF_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZDIFF_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_1_items_items_1 = {ZDIFF_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZDIFF_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZDIFF_ReplySchema_anyOf_1_items_items[] = {
&ZDIFF_ReplySchema_anyOf_1_items_items_0,
&ZDIFF_ReplySchema_anyOf_1_items_items_1,
};

/* ZDIFF_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZDIFF_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_1_items = {ZDIFF_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZDIFF_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ZDIFF_ReplySchema_anyOf_1_items},
};

struct jsonObject ZDIFF_ReplySchema_anyOf_1 = {ZDIFF_ReplySchema_anyOf_1_elements,.length=3};

/* ZDIFF_ReplySchema_anyOf array reply schema */
struct jsonObject *ZDIFF_ReplySchema_anyOf[] = {
&ZDIFF_ReplySchema_anyOf_0,
&ZDIFF_ReplySchema_anyOf_1,
};

/* ZDIFF_ReplySchema reply schema */
struct jsonObjectElement ZDIFF_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZDIFF_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZDIFF_ReplySchema = {ZDIFF_ReplySchema_elements,.length=1};

/********** ZDIFFSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZDIFFSTORE history */
#define ZDIFFSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZDIFFSTORE tips */
#define ZDIFFSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZDIFFSTORE key specs */
keySpec ZDIFFSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZDIFFSTORE argument table */
struct COMMAND_ARG ZDIFFSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* ZDIFFSTORE_ReplySchema reply schema */
struct jsonObjectElement ZDIFFSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of elements in the resulting sorted set at `destination`"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZDIFFSTORE_ReplySchema = {ZDIFFSTORE_ReplySchema_elements,.length=2};

/********** ZINCRBY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZINCRBY history */
#define ZINCRBY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZINCRBY tips */
#define ZINCRBY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZINCRBY key specs */
keySpec ZINCRBY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZINCRBY argument table */
struct COMMAND_ARG ZINCRBY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZINCRBY_ReplySchema reply schema */
struct jsonObjectElement ZINCRBY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The new score of `member`"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZINCRBY_ReplySchema = {ZINCRBY_ReplySchema_elements,.length=2};

/********** ZINTER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZINTER history */
#define ZINTER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZINTER tips */
#define ZINTER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZINTER key specs */
keySpec ZINTER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZINTER aggregate argument table */
struct COMMAND_ARG ZINTER_aggregate_Subargs[] = {
{MAKE_ARG("sum",ARG_TYPE_PURE_TOKEN,-1,"SUM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZINTER argument table */
struct COMMAND_ARG ZINTER_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("weight",ARG_TYPE_INTEGER,-1,"WEIGHTS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("aggregate",ARG_TYPE_ONEOF,-1,"AGGREGATE",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=ZINTER_aggregate_Subargs},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZINTER_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZINTER_ReplySchema_anyOf_0_items = {ZINTER_ReplySchema_anyOf_0_items_elements,.length=1};

/* ZINTER_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Result of intersection, containing only the member names. Returned in case `WITHSCORES` was not used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ZINTER_ReplySchema_anyOf_0_items},
};

struct jsonObject ZINTER_ReplySchema_anyOf_0 = {ZINTER_ReplySchema_anyOf_0_elements,.length=3};

/* ZINTER_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZINTER_ReplySchema_anyOf_1_items_items_0 = {ZINTER_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZINTER_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZINTER_ReplySchema_anyOf_1_items_items_1 = {ZINTER_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZINTER_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZINTER_ReplySchema_anyOf_1_items_items[] = {
&ZINTER_ReplySchema_anyOf_1_items_items_0,
&ZINTER_ReplySchema_anyOf_1_items_items_1,
};

/* ZINTER_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZINTER_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZINTER_ReplySchema_anyOf_1_items = {ZINTER_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZINTER_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZINTER_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Result of intersection, containing members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ZINTER_ReplySchema_anyOf_1_items},
};

struct jsonObject ZINTER_ReplySchema_anyOf_1 = {ZINTER_ReplySchema_anyOf_1_elements,.length=3};

/* ZINTER_ReplySchema_anyOf array reply schema */
struct jsonObject *ZINTER_ReplySchema_anyOf[] = {
&ZINTER_ReplySchema_anyOf_0,
&ZINTER_ReplySchema_anyOf_1,
};

/* ZINTER_ReplySchema reply schema */
struct jsonObjectElement ZINTER_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZINTER_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZINTER_ReplySchema = {ZINTER_ReplySchema_elements,.length=1};

/********** ZINTERCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZINTERCARD history */
#define ZINTERCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZINTERCARD tips */
#define ZINTERCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZINTERCARD key specs */
keySpec ZINTERCARD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZINTERCARD argument table */
struct COMMAND_ARG ZINTERCARD_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_INTEGER,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZINTERCARD_ReplySchema reply schema */
struct jsonObjectElement ZINTERCARD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of elements in the resulting intersection."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject ZINTERCARD_ReplySchema = {ZINTERCARD_ReplySchema_elements,.length=3};

/********** ZINTERSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZINTERSTORE history */
#define ZINTERSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZINTERSTORE tips */
#define ZINTERSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZINTERSTORE key specs */
keySpec ZINTERSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZINTERSTORE aggregate argument table */
struct COMMAND_ARG ZINTERSTORE_aggregate_Subargs[] = {
{MAKE_ARG("sum",ARG_TYPE_PURE_TOKEN,-1,"SUM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZINTERSTORE argument table */
struct COMMAND_ARG ZINTERSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("weight",ARG_TYPE_INTEGER,-1,"WEIGHTS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("aggregate",ARG_TYPE_ONEOF,-1,"AGGREGATE",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=ZINTERSTORE_aggregate_Subargs},
};

/* ZINTERSTORE_ReplySchema reply schema */
struct jsonObjectElement ZINTERSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of elements in the resulting sorted set."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject ZINTERSTORE_ReplySchema = {ZINTERSTORE_ReplySchema_elements,.length=3};

/********** ZLEXCOUNT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZLEXCOUNT history */
#define ZLEXCOUNT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZLEXCOUNT tips */
#define ZLEXCOUNT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZLEXCOUNT key specs */
keySpec ZLEXCOUNT_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZLEXCOUNT argument table */
struct COMMAND_ARG ZLEXCOUNT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZLEXCOUNT_ReplySchema reply schema */
struct jsonObjectElement ZLEXCOUNT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of elements in the specified score range."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject ZLEXCOUNT_ReplySchema = {ZLEXCOUNT_ReplySchema_elements,.length=3};

/********** ZMPOP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZMPOP history */
#define ZMPOP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZMPOP tips */
#define ZMPOP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZMPOP key specs */
keySpec ZMPOP_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZMPOP where argument table */
struct COMMAND_ARG ZMPOP_where_Subargs[] = {
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZMPOP argument table */
struct COMMAND_ARG ZMPOP_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("where",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=ZMPOP_where_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZMPOP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="No element could be popped."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_0 = {ZMPOP_ReplySchema_oneOf_0_elements,.length=2};

/* ZMPOP_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Name of the key that elements were popped."},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1_items_0 = {ZMPOP_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* ZMPOP_ReplySchema_oneOf_1_items_1_items_items_0 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_items_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Name of the member."},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1_items_1_items_items_0 = {ZMPOP_ReplySchema_oneOf_1_items_1_items_items_0_elements,.length=2};

/* ZMPOP_ReplySchema_oneOf_1_items_1_items_items_1 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_items_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1_items_1_items_items_1 = {ZMPOP_ReplySchema_oneOf_1_items_1_items_items_1_elements,.length=2};

/* ZMPOP_ReplySchema_oneOf_1_items_1_items_items array reply schema */
struct jsonObject *ZMPOP_ReplySchema_oneOf_1_items_1_items_items[] = {
&ZMPOP_ReplySchema_oneOf_1_items_1_items_items_0,
&ZMPOP_ReplySchema_oneOf_1_items_1_items_items_1,
};

/* ZMPOP_ReplySchema_oneOf_1_items_1_items reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZMPOP_ReplySchema_oneOf_1_items_1_items_items,.length=2}},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1_items_1_items = {ZMPOP_ReplySchema_oneOf_1_items_1_items_elements,.length=5};

/* ZMPOP_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Popped elements."},
{JSON_TYPE_OBJECT,"items",.value.object=&ZMPOP_ReplySchema_oneOf_1_items_1_items},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1_items_1 = {ZMPOP_ReplySchema_oneOf_1_items_1_elements,.length=3};

/* ZMPOP_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *ZMPOP_ReplySchema_oneOf_1_items[] = {
&ZMPOP_ReplySchema_oneOf_1_items_0,
&ZMPOP_ReplySchema_oneOf_1_items_1,
};

/* ZMPOP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZMPOP_ReplySchema_oneOf_1_items,.length=2}},
};

struct jsonObject ZMPOP_ReplySchema_oneOf_1 = {ZMPOP_ReplySchema_oneOf_1_elements,.length=4};

/* ZMPOP_ReplySchema_oneOf array reply schema */
struct jsonObject *ZMPOP_ReplySchema_oneOf[] = {
&ZMPOP_ReplySchema_oneOf_0,
&ZMPOP_ReplySchema_oneOf_1,
};

/* ZMPOP_ReplySchema reply schema */
struct jsonObjectElement ZMPOP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ZMPOP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject ZMPOP_ReplySchema = {ZMPOP_ReplySchema_elements,.length=1};

/********** ZMSCORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZMSCORE history */
#define ZMSCORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZMSCORE tips */
#define ZMSCORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZMSCORE key specs */
keySpec ZMSCORE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZMSCORE argument table */
struct COMMAND_ARG ZMSCORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* ZMSCORE_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement ZMSCORE_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="The score of the member (a double precision floating point number). In RESP2, this is returned as string."},
};

struct jsonObject ZMSCORE_ReplySchema_items_oneOf_0 = {ZMSCORE_ReplySchema_items_oneOf_0_elements,.length=2};

/* ZMSCORE_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement ZMSCORE_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Member does not exist in the sorted set."},
};

struct jsonObject ZMSCORE_ReplySchema_items_oneOf_1 = {ZMSCORE_ReplySchema_items_oneOf_1_elements,.length=2};

/* ZMSCORE_ReplySchema_items_oneOf array reply schema */
struct jsonObject *ZMSCORE_ReplySchema_items_oneOf[] = {
&ZMSCORE_ReplySchema_items_oneOf_0,
&ZMSCORE_ReplySchema_items_oneOf_1,
};

/* ZMSCORE_ReplySchema_items reply schema */
struct jsonObjectElement ZMSCORE_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ZMSCORE_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject ZMSCORE_ReplySchema_items = {ZMSCORE_ReplySchema_items_elements,.length=1};

/* ZMSCORE_ReplySchema reply schema */
struct jsonObjectElement ZMSCORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZMSCORE_ReplySchema_items},
};

struct jsonObject ZMSCORE_ReplySchema = {ZMSCORE_ReplySchema_elements,.length=3};

/********** ZPOPMAX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZPOPMAX history */
#define ZPOPMAX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZPOPMAX tips */
#define ZPOPMAX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZPOPMAX key specs */
keySpec ZPOPMAX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZPOPMAX argument table */
struct COMMAND_ARG ZPOPMAX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZPOPMAX_ReplySchema_anyOf_0_items_0 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_0_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Popped element."},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_0_items_0 = {ZPOPMAX_ReplySchema_anyOf_0_items_0_elements,.length=2};

/* ZPOPMAX_ReplySchema_anyOf_0_items_1 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_0_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_0_items_1 = {ZPOPMAX_ReplySchema_anyOf_0_items_1_elements,.length=2};

/* ZPOPMAX_ReplySchema_anyOf_0_items array reply schema */
struct jsonObject *ZPOPMAX_ReplySchema_anyOf_0_items[] = {
&ZPOPMAX_ReplySchema_anyOf_0_items_0,
&ZPOPMAX_ReplySchema_anyOf_0_items_1,
};

/* ZPOPMAX_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of popped elements and scores when 'COUNT' isn't specified."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZPOPMAX_ReplySchema_anyOf_0_items,.length=2}},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_0 = {ZPOPMAX_ReplySchema_anyOf_0_elements,.length=5};

/* ZPOPMAX_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Popped element."},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_1_items_items_0 = {ZPOPMAX_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZPOPMAX_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_1_items_items_1 = {ZPOPMAX_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZPOPMAX_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZPOPMAX_ReplySchema_anyOf_1_items_items[] = {
&ZPOPMAX_ReplySchema_anyOf_1_items_items_0,
&ZPOPMAX_ReplySchema_anyOf_1_items_items_1,
};

/* ZPOPMAX_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZPOPMAX_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_1_items = {ZPOPMAX_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZPOPMAX_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of popped elements and scores when 'COUNT' is specified."},
{JSON_TYPE_OBJECT,"items",.value.object=&ZPOPMAX_ReplySchema_anyOf_1_items},
};

struct jsonObject ZPOPMAX_ReplySchema_anyOf_1 = {ZPOPMAX_ReplySchema_anyOf_1_elements,.length=3};

/* ZPOPMAX_ReplySchema_anyOf array reply schema */
struct jsonObject *ZPOPMAX_ReplySchema_anyOf[] = {
&ZPOPMAX_ReplySchema_anyOf_0,
&ZPOPMAX_ReplySchema_anyOf_1,
};

/* ZPOPMAX_ReplySchema reply schema */
struct jsonObjectElement ZPOPMAX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZPOPMAX_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZPOPMAX_ReplySchema = {ZPOPMAX_ReplySchema_elements,.length=1};

/********** ZPOPMIN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZPOPMIN history */
#define ZPOPMIN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZPOPMIN tips */
#define ZPOPMIN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZPOPMIN key specs */
keySpec ZPOPMIN_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZPOPMIN argument table */
struct COMMAND_ARG ZPOPMIN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZPOPMIN_ReplySchema_anyOf_0_items_0 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_0_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Popped element."},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_0_items_0 = {ZPOPMIN_ReplySchema_anyOf_0_items_0_elements,.length=2};

/* ZPOPMIN_ReplySchema_anyOf_0_items_1 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_0_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_0_items_1 = {ZPOPMIN_ReplySchema_anyOf_0_items_1_elements,.length=2};

/* ZPOPMIN_ReplySchema_anyOf_0_items array reply schema */
struct jsonObject *ZPOPMIN_ReplySchema_anyOf_0_items[] = {
&ZPOPMIN_ReplySchema_anyOf_0_items_0,
&ZPOPMIN_ReplySchema_anyOf_0_items_1,
};

/* ZPOPMIN_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of popped elements and scores when 'COUNT' isn't specified."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZPOPMIN_ReplySchema_anyOf_0_items,.length=2}},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_0 = {ZPOPMIN_ReplySchema_anyOf_0_elements,.length=5};

/* ZPOPMIN_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Popped element."},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_1_items_items_0 = {ZPOPMIN_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZPOPMIN_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_1_items_items_1 = {ZPOPMIN_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZPOPMIN_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZPOPMIN_ReplySchema_anyOf_1_items_items[] = {
&ZPOPMIN_ReplySchema_anyOf_1_items_items_0,
&ZPOPMIN_ReplySchema_anyOf_1_items_items_1,
};

/* ZPOPMIN_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZPOPMIN_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_1_items = {ZPOPMIN_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZPOPMIN_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of popped elements and scores when 'COUNT' is specified."},
{JSON_TYPE_OBJECT,"items",.value.object=&ZPOPMIN_ReplySchema_anyOf_1_items},
};

struct jsonObject ZPOPMIN_ReplySchema_anyOf_1 = {ZPOPMIN_ReplySchema_anyOf_1_elements,.length=3};

/* ZPOPMIN_ReplySchema_anyOf array reply schema */
struct jsonObject *ZPOPMIN_ReplySchema_anyOf[] = {
&ZPOPMIN_ReplySchema_anyOf_0,
&ZPOPMIN_ReplySchema_anyOf_1,
};

/* ZPOPMIN_ReplySchema reply schema */
struct jsonObjectElement ZPOPMIN_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZPOPMIN_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZPOPMIN_ReplySchema = {ZPOPMIN_ReplySchema_elements,.length=1};

/********** ZRANDMEMBER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANDMEMBER history */
#define ZRANDMEMBER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANDMEMBER tips */
const char *ZRANDMEMBER_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANDMEMBER key specs */
keySpec ZRANDMEMBER_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANDMEMBER options argument table */
struct COMMAND_ARG ZRANDMEMBER_options_Subargs[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZRANDMEMBER argument table */
struct COMMAND_ARG ZRANDMEMBER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("options",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANDMEMBER_options_Subargs},
};

/* ZRANDMEMBER_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_0 = {ZRANDMEMBER_ReplySchema_anyOf_0_elements,.length=2};

/* ZRANDMEMBER_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Randomly selected element when 'COUNT' is not used."},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_1 = {ZRANDMEMBER_ReplySchema_anyOf_1_elements,.length=2};

/* ZRANDMEMBER_ReplySchema_anyOf_2_items reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_2_items = {ZRANDMEMBER_ReplySchema_anyOf_2_items_elements,.length=1};

/* ZRANDMEMBER_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Randomly selected elements when 'COUNT' is used."},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANDMEMBER_ReplySchema_anyOf_2_items},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_2 = {ZRANDMEMBER_ReplySchema_anyOf_2_elements,.length=3};

/* ZRANDMEMBER_ReplySchema_anyOf_3_items_items_0 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_3_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Element."},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_3_items_items_0 = {ZRANDMEMBER_ReplySchema_anyOf_3_items_items_0_elements,.length=2};

/* ZRANDMEMBER_ReplySchema_anyOf_3_items_items_1 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_3_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="Score."},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_3_items_items_1 = {ZRANDMEMBER_ReplySchema_anyOf_3_items_items_1_elements,.length=2};

/* ZRANDMEMBER_ReplySchema_anyOf_3_items_items array reply schema */
struct jsonObject *ZRANDMEMBER_ReplySchema_anyOf_3_items_items[] = {
&ZRANDMEMBER_ReplySchema_anyOf_3_items_items_0,
&ZRANDMEMBER_ReplySchema_anyOf_3_items_items_1,
};

/* ZRANDMEMBER_ReplySchema_anyOf_3_items reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_3_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZRANDMEMBER_ReplySchema_anyOf_3_items_items,.length=2}},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_3_items = {ZRANDMEMBER_ReplySchema_anyOf_3_items_elements,.length=4};

/* ZRANDMEMBER_ReplySchema_anyOf_3 reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_anyOf_3_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Randomly selected elements when 'COUNT' and 'WITHSCORES' modifiers are used."},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANDMEMBER_ReplySchema_anyOf_3_items},
};

struct jsonObject ZRANDMEMBER_ReplySchema_anyOf_3 = {ZRANDMEMBER_ReplySchema_anyOf_3_elements,.length=3};

/* ZRANDMEMBER_ReplySchema_anyOf array reply schema */
struct jsonObject *ZRANDMEMBER_ReplySchema_anyOf[] = {
&ZRANDMEMBER_ReplySchema_anyOf_0,
&ZRANDMEMBER_ReplySchema_anyOf_1,
&ZRANDMEMBER_ReplySchema_anyOf_2,
&ZRANDMEMBER_ReplySchema_anyOf_3,
};

/* ZRANDMEMBER_ReplySchema reply schema */
struct jsonObjectElement ZRANDMEMBER_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZRANDMEMBER_ReplySchema_anyOf,.length=4}},
};

struct jsonObject ZRANDMEMBER_ReplySchema = {ZRANDMEMBER_ReplySchema_elements,.length=1};

/********** ZRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANGE history */
commandHistory ZRANGE_History[] = {
{"6.2.0","Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANGE tips */
#define ZRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANGE key specs */
keySpec ZRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANGE sortby argument table */
struct COMMAND_ARG ZRANGE_sortby_Subargs[] = {
{MAKE_ARG("byscore",ARG_TYPE_PURE_TOKEN,-1,"BYSCORE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bylex",ARG_TYPE_PURE_TOKEN,-1,"BYLEX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGE limit argument table */
struct COMMAND_ARG ZRANGE_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGE argument table */
struct COMMAND_ARG ZRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sortby",ARG_TYPE_ONEOF,-1,NULL,NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGE_sortby_Subargs},
{MAKE_ARG("rev",ARG_TYPE_PURE_TOKEN,-1,"REV",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,"6.2.0",CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGE_limit_Subargs},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZRANGE_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_0_items = {ZRANGE_ReplySchema_anyOf_0_items_elements,.length=1};

/* ZRANGE_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A list of member elements"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANGE_ReplySchema_anyOf_0_items},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_0 = {ZRANGE_ReplySchema_anyOf_0_elements,.length=4};

/* ZRANGE_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_1_items_items_0 = {ZRANGE_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZRANGE_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_1_items_items_1 = {ZRANGE_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZRANGE_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZRANGE_ReplySchema_anyOf_1_items_items[] = {
&ZRANGE_ReplySchema_anyOf_1_items_items_0,
&ZRANGE_ReplySchema_anyOf_1_items_items_1,
};

/* ZRANGE_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZRANGE_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_1_items = {ZRANGE_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZRANGE_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANGE_ReplySchema_anyOf_1_items},
};

struct jsonObject ZRANGE_ReplySchema_anyOf_1 = {ZRANGE_ReplySchema_anyOf_1_elements,.length=4};

/* ZRANGE_ReplySchema_anyOf array reply schema */
struct jsonObject *ZRANGE_ReplySchema_anyOf[] = {
&ZRANGE_ReplySchema_anyOf_0,
&ZRANGE_ReplySchema_anyOf_1,
};

/* ZRANGE_ReplySchema reply schema */
struct jsonObjectElement ZRANGE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZRANGE_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZRANGE_ReplySchema = {ZRANGE_ReplySchema_elements,.length=1};

/********** ZRANGEBYLEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANGEBYLEX history */
#define ZRANGEBYLEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANGEBYLEX tips */
#define ZRANGEBYLEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANGEBYLEX key specs */
keySpec ZRANGEBYLEX_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANGEBYLEX limit argument table */
struct COMMAND_ARG ZRANGEBYLEX_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGEBYLEX argument table */
struct COMMAND_ARG ZRANGEBYLEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGEBYLEX_limit_Subargs},
};

/* ZRANGEBYLEX_ReplySchema_items reply schema */
struct jsonObjectElement ZRANGEBYLEX_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZRANGEBYLEX_ReplySchema_items = {ZRANGEBYLEX_ReplySchema_items_elements,.length=1};

/* ZRANGEBYLEX_ReplySchema reply schema */
struct jsonObjectElement ZRANGEBYLEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of elements in the specified score range."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANGEBYLEX_ReplySchema_items},
};

struct jsonObject ZRANGEBYLEX_ReplySchema = {ZRANGEBYLEX_ReplySchema_elements,.length=4};

/********** ZRANGEBYSCORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANGEBYSCORE history */
commandHistory ZRANGEBYSCORE_History[] = {
{"2.0.0","Added the `WITHSCORES` modifier."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANGEBYSCORE tips */
#define ZRANGEBYSCORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANGEBYSCORE key specs */
keySpec ZRANGEBYSCORE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANGEBYSCORE limit argument table */
struct COMMAND_ARG ZRANGEBYSCORE_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGEBYSCORE argument table */
struct COMMAND_ARG ZRANGEBYSCORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,"2.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGEBYSCORE_limit_Subargs},
};

/* ZRANGEBYSCORE_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Element"},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_0_items = {ZRANGEBYSCORE_ReplySchema_anyOf_0_items_elements,.length=2};

/* ZRANGEBYSCORE_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of the elements in the specified score range, as not WITHSCORES"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANGEBYSCORE_ReplySchema_anyOf_0_items},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_0 = {ZRANGEBYSCORE_ReplySchema_anyOf_0_elements,.length=4};

/* ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="element"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0 = {ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1 = {ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items[] = {
&ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0,
&ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1,
};

/* ZRANGEBYSCORE_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Tuple of element and its score"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZRANGEBYSCORE_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_1_items = {ZRANGEBYSCORE_ReplySchema_anyOf_1_items_elements,.length=5};

/* ZRANGEBYSCORE_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of the elements and their scores in the specified score range, as WITHSCORES used"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZRANGEBYSCORE_ReplySchema_anyOf_1_items},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema_anyOf_1 = {ZRANGEBYSCORE_ReplySchema_anyOf_1_elements,.length=4};

/* ZRANGEBYSCORE_ReplySchema_anyOf array reply schema */
struct jsonObject *ZRANGEBYSCORE_ReplySchema_anyOf[] = {
&ZRANGEBYSCORE_ReplySchema_anyOf_0,
&ZRANGEBYSCORE_ReplySchema_anyOf_1,
};

/* ZRANGEBYSCORE_ReplySchema reply schema */
struct jsonObjectElement ZRANGEBYSCORE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZRANGEBYSCORE_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZRANGEBYSCORE_ReplySchema = {ZRANGEBYSCORE_ReplySchema_elements,.length=1};

/********** ZRANGESTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANGESTORE history */
#define ZRANGESTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANGESTORE tips */
#define ZRANGESTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANGESTORE key specs */
keySpec ZRANGESTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANGESTORE sortby argument table */
struct COMMAND_ARG ZRANGESTORE_sortby_Subargs[] = {
{MAKE_ARG("byscore",ARG_TYPE_PURE_TOKEN,-1,"BYSCORE",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("bylex",ARG_TYPE_PURE_TOKEN,-1,"BYLEX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGESTORE limit argument table */
struct COMMAND_ARG ZRANGESTORE_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZRANGESTORE argument table */
struct COMMAND_ARG ZRANGESTORE_Args[] = {
{MAKE_ARG("dst",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("src",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("sortby",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGESTORE_sortby_Subargs},
{MAKE_ARG("rev",ARG_TYPE_PURE_TOKEN,-1,"REV",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZRANGESTORE_limit_Subargs},
};

/* ZRANGESTORE_ReplySchema reply schema */
struct jsonObjectElement ZRANGESTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of elements in the resulting sorted set."},
};

struct jsonObject ZRANGESTORE_ReplySchema = {ZRANGESTORE_ReplySchema_elements,.length=2};

/********** ZRANK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZRANK history */
commandHistory ZRANK_History[] = {
{"7.2.0","Added the optional `WITHSCORE` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZRANK tips */
#define ZRANK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZRANK key specs */
keySpec ZRANK_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZRANK argument table */
struct COMMAND_ARG ZRANK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscore",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZRANK_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ZRANK_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Key does not exist or the member does not exist in the sorted set."},
};

struct jsonObject ZRANK_ReplySchema_oneOf_0 = {ZRANK_ReplySchema_oneOf_0_elements,.length=2};

/* ZRANK_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ZRANK_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The rank of the member when 'WITHSCORE' is not used."},
};

struct jsonObject ZRANK_ReplySchema_oneOf_1 = {ZRANK_ReplySchema_oneOf_1_elements,.length=2};

/* ZRANK_ReplySchema_oneOf_2_items_0 reply schema */
struct jsonObjectElement ZRANK_ReplySchema_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZRANK_ReplySchema_oneOf_2_items_0 = {ZRANK_ReplySchema_oneOf_2_items_0_elements,.length=1};

/* ZRANK_ReplySchema_oneOf_2_items_1 reply schema */
struct jsonObjectElement ZRANK_ReplySchema_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZRANK_ReplySchema_oneOf_2_items_1 = {ZRANK_ReplySchema_oneOf_2_items_1_elements,.length=1};

/* ZRANK_ReplySchema_oneOf_2_items array reply schema */
struct jsonObject *ZRANK_ReplySchema_oneOf_2_items[] = {
&ZRANK_ReplySchema_oneOf_2_items_0,
&ZRANK_ReplySchema_oneOf_2_items_1,
};

/* ZRANK_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement ZRANK_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="The rank and score of the member when 'WITHSCORE' is used."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZRANK_ReplySchema_oneOf_2_items,.length=2}},
};

struct jsonObject ZRANK_ReplySchema_oneOf_2 = {ZRANK_ReplySchema_oneOf_2_elements,.length=5};

/* ZRANK_ReplySchema_oneOf array reply schema */
struct jsonObject *ZRANK_ReplySchema_oneOf[] = {
&ZRANK_ReplySchema_oneOf_0,
&ZRANK_ReplySchema_oneOf_1,
&ZRANK_ReplySchema_oneOf_2,
};

/* ZRANK_ReplySchema reply schema */
struct jsonObjectElement ZRANK_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ZRANK_ReplySchema_oneOf,.length=3}},
};

struct jsonObject ZRANK_ReplySchema = {ZRANK_ReplySchema_elements,.length=1};

/********** ZREM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREM history */
commandHistory ZREM_History[] = {
{"2.4.0","Accepts multiple elements."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREM tips */
#define ZREM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREM key specs */
keySpec ZREM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREM argument table */
struct COMMAND_ARG ZREM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* ZREM_ReplySchema reply schema */
struct jsonObjectElement ZREM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of members removed from the sorted set, not including non existing members."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject ZREM_ReplySchema = {ZREM_ReplySchema_elements,.length=3};

/********** ZREMRANGEBYLEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREMRANGEBYLEX history */
#define ZREMRANGEBYLEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREMRANGEBYLEX tips */
#define ZREMRANGEBYLEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREMRANGEBYLEX key specs */
keySpec ZREMRANGEBYLEX_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREMRANGEBYLEX argument table */
struct COMMAND_ARG ZREMRANGEBYLEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZREMRANGEBYLEX_ReplySchema reply schema */
struct jsonObjectElement ZREMRANGEBYLEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of elements removed."},
};

struct jsonObject ZREMRANGEBYLEX_ReplySchema = {ZREMRANGEBYLEX_ReplySchema_elements,.length=2};

/********** ZREMRANGEBYRANK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREMRANGEBYRANK history */
#define ZREMRANGEBYRANK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREMRANGEBYRANK tips */
#define ZREMRANGEBYRANK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREMRANGEBYRANK key specs */
keySpec ZREMRANGEBYRANK_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREMRANGEBYRANK argument table */
struct COMMAND_ARG ZREMRANGEBYRANK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZREMRANGEBYRANK_ReplySchema reply schema */
struct jsonObjectElement ZREMRANGEBYRANK_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of elements removed."},
};

struct jsonObject ZREMRANGEBYRANK_ReplySchema = {ZREMRANGEBYRANK_ReplySchema_elements,.length=2};

/********** ZREMRANGEBYSCORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREMRANGEBYSCORE history */
#define ZREMRANGEBYSCORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREMRANGEBYSCORE tips */
#define ZREMRANGEBYSCORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREMRANGEBYSCORE key specs */
keySpec ZREMRANGEBYSCORE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREMRANGEBYSCORE argument table */
struct COMMAND_ARG ZREMRANGEBYSCORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZREMRANGEBYSCORE_ReplySchema reply schema */
struct jsonObjectElement ZREMRANGEBYSCORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Number of elements removed."},
};

struct jsonObject ZREMRANGEBYSCORE_ReplySchema = {ZREMRANGEBYSCORE_ReplySchema_elements,.length=2};

/********** ZREVRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREVRANGE history */
#define ZREVRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREVRANGE tips */
#define ZREVRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREVRANGE key specs */
keySpec ZREVRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREVRANGE argument table */
struct COMMAND_ARG ZREVRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("stop",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZREVRANGE_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_0_items = {ZREVRANGE_ReplySchema_anyOf_0_items_elements,.length=1};

/* ZREVRANGE_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of member elements."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZREVRANGE_ReplySchema_anyOf_0_items},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_0 = {ZREVRANGE_ReplySchema_anyOf_0_elements,.length=4};

/* ZREVRANGE_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="member"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_1_items_items_0 = {ZREVRANGE_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZREVRANGE_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="score"},
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_1_items_items_1 = {ZREVRANGE_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZREVRANGE_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZREVRANGE_ReplySchema_anyOf_1_items_items[] = {
&ZREVRANGE_ReplySchema_anyOf_1_items_items_0,
&ZREVRANGE_ReplySchema_anyOf_1_items_items_1,
};

/* ZREVRANGE_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZREVRANGE_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_1_items = {ZREVRANGE_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZREVRANGE_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of the members and their scores. Returned in case `WITHSCORES` was used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZREVRANGE_ReplySchema_anyOf_1_items},
};

struct jsonObject ZREVRANGE_ReplySchema_anyOf_1 = {ZREVRANGE_ReplySchema_anyOf_1_elements,.length=4};

/* ZREVRANGE_ReplySchema_anyOf array reply schema */
struct jsonObject *ZREVRANGE_ReplySchema_anyOf[] = {
&ZREVRANGE_ReplySchema_anyOf_0,
&ZREVRANGE_ReplySchema_anyOf_1,
};

/* ZREVRANGE_ReplySchema reply schema */
struct jsonObjectElement ZREVRANGE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZREVRANGE_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZREVRANGE_ReplySchema = {ZREVRANGE_ReplySchema_elements,.length=1};

/********** ZREVRANGEBYLEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREVRANGEBYLEX history */
#define ZREVRANGEBYLEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREVRANGEBYLEX tips */
#define ZREVRANGEBYLEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREVRANGEBYLEX key specs */
keySpec ZREVRANGEBYLEX_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREVRANGEBYLEX limit argument table */
struct COMMAND_ARG ZREVRANGEBYLEX_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZREVRANGEBYLEX argument table */
struct COMMAND_ARG ZREVRANGEBYLEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZREVRANGEBYLEX_limit_Subargs},
};

/* ZREVRANGEBYLEX_ReplySchema_items reply schema */
struct jsonObjectElement ZREVRANGEBYLEX_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZREVRANGEBYLEX_ReplySchema_items = {ZREVRANGEBYLEX_ReplySchema_items_elements,.length=1};

/* ZREVRANGEBYLEX_ReplySchema reply schema */
struct jsonObjectElement ZREVRANGEBYLEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of the elements in the specified score range."},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZREVRANGEBYLEX_ReplySchema_items},
};

struct jsonObject ZREVRANGEBYLEX_ReplySchema = {ZREVRANGEBYLEX_ReplySchema_elements,.length=4};

/********** ZREVRANGEBYSCORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREVRANGEBYSCORE history */
commandHistory ZREVRANGEBYSCORE_History[] = {
{"2.1.6","`min` and `max` can be exclusive."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREVRANGEBYSCORE tips */
#define ZREVRANGEBYSCORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREVRANGEBYSCORE key specs */
keySpec ZREVRANGEBYSCORE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREVRANGEBYSCORE limit argument table */
struct COMMAND_ARG ZREVRANGEBYSCORE_limit_Subargs[] = {
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZREVRANGEBYSCORE argument table */
struct COMMAND_ARG ZREVRANGEBYSCORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("limit",ARG_TYPE_BLOCK,-1,"LIMIT",NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=ZREVRANGEBYSCORE_limit_Subargs},
};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="Element"},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_0_items = {ZREVRANGEBYSCORE_ReplySchema_anyOf_0_items_elements,.length=2};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of the elements in the specified score range, as not WITHSCORES"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZREVRANGEBYSCORE_ReplySchema_anyOf_0_items},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_0 = {ZREVRANGEBYSCORE_ReplySchema_anyOf_0_elements,.length=4};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="element"},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0 = {ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0_elements,.length=2};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="score"},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1 = {ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1_elements,.length=2};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items[] = {
&ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_0,
&ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items_1,
};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Tuple of element and its score"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items = {ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items_elements,.length=5};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="List of the elements and their scores in the specified score range, as WITHSCORES used"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZREVRANGEBYSCORE_ReplySchema_anyOf_1_items},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema_anyOf_1 = {ZREVRANGEBYSCORE_ReplySchema_anyOf_1_elements,.length=4};

/* ZREVRANGEBYSCORE_ReplySchema_anyOf array reply schema */
struct jsonObject *ZREVRANGEBYSCORE_ReplySchema_anyOf[] = {
&ZREVRANGEBYSCORE_ReplySchema_anyOf_0,
&ZREVRANGEBYSCORE_ReplySchema_anyOf_1,
};

/* ZREVRANGEBYSCORE_ReplySchema reply schema */
struct jsonObjectElement ZREVRANGEBYSCORE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZREVRANGEBYSCORE_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZREVRANGEBYSCORE_ReplySchema = {ZREVRANGEBYSCORE_ReplySchema_elements,.length=1};

/********** ZREVRANK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZREVRANK history */
commandHistory ZREVRANK_History[] = {
{"7.2.0","Added the optional `WITHSCORE` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZREVRANK tips */
#define ZREVRANK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZREVRANK key specs */
keySpec ZREVRANK_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZREVRANK argument table */
struct COMMAND_ARG ZREVRANK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("withscore",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZREVRANK_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Key does not exist or the member does not exist in the sorted set."},
};

struct jsonObject ZREVRANK_ReplySchema_oneOf_0 = {ZREVRANK_ReplySchema_oneOf_0_elements,.length=2};

/* ZREVRANK_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The rank of the member when 'WITHSCORE' is not used."},
};

struct jsonObject ZREVRANK_ReplySchema_oneOf_1 = {ZREVRANK_ReplySchema_oneOf_1_elements,.length=2};

/* ZREVRANK_ReplySchema_oneOf_2_items_0 reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_oneOf_2_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZREVRANK_ReplySchema_oneOf_2_items_0 = {ZREVRANK_ReplySchema_oneOf_2_items_0_elements,.length=1};

/* ZREVRANK_ReplySchema_oneOf_2_items_1 reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_oneOf_2_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZREVRANK_ReplySchema_oneOf_2_items_1 = {ZREVRANK_ReplySchema_oneOf_2_items_1_elements,.length=1};

/* ZREVRANK_ReplySchema_oneOf_2_items array reply schema */
struct jsonObject *ZREVRANK_ReplySchema_oneOf_2_items[] = {
&ZREVRANK_ReplySchema_oneOf_2_items_0,
&ZREVRANK_ReplySchema_oneOf_2_items_1,
};

/* ZREVRANK_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="The rank and score of the member when 'WITHSCORE' is used."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZREVRANK_ReplySchema_oneOf_2_items,.length=2}},
};

struct jsonObject ZREVRANK_ReplySchema_oneOf_2 = {ZREVRANK_ReplySchema_oneOf_2_elements,.length=5};

/* ZREVRANK_ReplySchema_oneOf array reply schema */
struct jsonObject *ZREVRANK_ReplySchema_oneOf[] = {
&ZREVRANK_ReplySchema_oneOf_0,
&ZREVRANK_ReplySchema_oneOf_1,
&ZREVRANK_ReplySchema_oneOf_2,
};

/* ZREVRANK_ReplySchema reply schema */
struct jsonObjectElement ZREVRANK_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ZREVRANK_ReplySchema_oneOf,.length=3}},
};

struct jsonObject ZREVRANK_ReplySchema = {ZREVRANK_ReplySchema_elements,.length=1};

/********** ZSCAN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZSCAN history */
#define ZSCAN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZSCAN tips */
const char *ZSCAN_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZSCAN key specs */
keySpec ZSCAN_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZSCAN argument table */
struct COMMAND_ARG ZSCAN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("cursor",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("pattern",ARG_TYPE_PATTERN,-1,"MATCH",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZSCAN_ReplySchema_items_0 reply schema */
struct jsonObjectElement ZSCAN_ReplySchema_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZSCAN_ReplySchema_items_0 = {ZSCAN_ReplySchema_items_0_elements,.length=2};

/* ZSCAN_ReplySchema_items_1_items reply schema */
struct jsonObjectElement ZSCAN_ReplySchema_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZSCAN_ReplySchema_items_1_items = {ZSCAN_ReplySchema_items_1_items_elements,.length=1};

/* ZSCAN_ReplySchema_items_1 reply schema */
struct jsonObjectElement ZSCAN_ReplySchema_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="list of elements of the sorted set, where each even element is the member, and each odd value is its associated score"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&ZSCAN_ReplySchema_items_1_items},
};

struct jsonObject ZSCAN_ReplySchema_items_1 = {ZSCAN_ReplySchema_items_1_elements,.length=3};

/* ZSCAN_ReplySchema_items array reply schema */
struct jsonObject *ZSCAN_ReplySchema_items[] = {
&ZSCAN_ReplySchema_items_0,
&ZSCAN_ReplySchema_items_1,
};

/* ZSCAN_ReplySchema reply schema */
struct jsonObjectElement ZSCAN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cursor and scan response in array form"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZSCAN_ReplySchema_items,.length=2}},
};

struct jsonObject ZSCAN_ReplySchema = {ZSCAN_ReplySchema_elements,.length=5};

/********** ZSCORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZSCORE history */
#define ZSCORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZSCORE tips */
#define ZSCORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZSCORE key specs */
keySpec ZSCORE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* ZSCORE argument table */
struct COMMAND_ARG ZSCORE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("member",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZSCORE_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement ZSCORE_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
{JSON_TYPE_STRING,"description",.value.string="The score of the member (a double precision floating point number). In RESP2, this is returned as string."},
};

struct jsonObject ZSCORE_ReplySchema_oneOf_0 = {ZSCORE_ReplySchema_oneOf_0_elements,.length=2};

/* ZSCORE_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement ZSCORE_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
{JSON_TYPE_STRING,"description",.value.string="Member does not exist in the sorted set, or key does not exist."},
};

struct jsonObject ZSCORE_ReplySchema_oneOf_1 = {ZSCORE_ReplySchema_oneOf_1_elements,.length=2};

/* ZSCORE_ReplySchema_oneOf array reply schema */
struct jsonObject *ZSCORE_ReplySchema_oneOf[] = {
&ZSCORE_ReplySchema_oneOf_0,
&ZSCORE_ReplySchema_oneOf_1,
};

/* ZSCORE_ReplySchema reply schema */
struct jsonObjectElement ZSCORE_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=ZSCORE_ReplySchema_oneOf,.length=2}},
};

struct jsonObject ZSCORE_ReplySchema = {ZSCORE_ReplySchema_elements,.length=1};

/********** ZUNION ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZUNION history */
#define ZUNION_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZUNION tips */
#define ZUNION_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZUNION key specs */
keySpec ZUNION_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZUNION aggregate argument table */
struct COMMAND_ARG ZUNION_aggregate_Subargs[] = {
{MAKE_ARG("sum",ARG_TYPE_PURE_TOKEN,-1,"SUM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZUNION argument table */
struct COMMAND_ARG ZUNION_Args[] = {
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("weight",ARG_TYPE_INTEGER,-1,"WEIGHTS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("aggregate",ARG_TYPE_ONEOF,-1,"AGGREGATE",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=ZUNION_aggregate_Subargs},
{MAKE_ARG("withscores",ARG_TYPE_PURE_TOKEN,-1,"WITHSCORES",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* ZUNION_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZUNION_ReplySchema_anyOf_0_items = {ZUNION_ReplySchema_anyOf_0_items_elements,.length=1};

/* ZUNION_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The result of union when 'WITHSCORES' is not used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZUNION_ReplySchema_anyOf_0_items},
};

struct jsonObject ZUNION_ReplySchema_anyOf_0 = {ZUNION_ReplySchema_anyOf_0_elements,.length=4};

/* ZUNION_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject ZUNION_ReplySchema_anyOf_1_items_items_0 = {ZUNION_ReplySchema_anyOf_1_items_items_0_elements,.length=1};

/* ZUNION_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="number"},
};

struct jsonObject ZUNION_ReplySchema_anyOf_1_items_items_1 = {ZUNION_ReplySchema_anyOf_1_items_items_1_elements,.length=1};

/* ZUNION_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *ZUNION_ReplySchema_anyOf_1_items_items[] = {
&ZUNION_ReplySchema_anyOf_1_items_items_0,
&ZUNION_ReplySchema_anyOf_1_items_items_1,
};

/* ZUNION_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=ZUNION_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject ZUNION_ReplySchema_anyOf_1_items = {ZUNION_ReplySchema_anyOf_1_items_elements,.length=4};

/* ZUNION_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement ZUNION_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The result of union when 'WITHSCORES' is used."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&ZUNION_ReplySchema_anyOf_1_items},
};

struct jsonObject ZUNION_ReplySchema_anyOf_1 = {ZUNION_ReplySchema_anyOf_1_elements,.length=4};

/* ZUNION_ReplySchema_anyOf array reply schema */
struct jsonObject *ZUNION_ReplySchema_anyOf[] = {
&ZUNION_ReplySchema_anyOf_0,
&ZUNION_ReplySchema_anyOf_1,
};

/* ZUNION_ReplySchema reply schema */
struct jsonObjectElement ZUNION_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=ZUNION_ReplySchema_anyOf,.length=2}},
};

struct jsonObject ZUNION_ReplySchema = {ZUNION_ReplySchema_elements,.length=1};

/********** ZUNIONSTORE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* ZUNIONSTORE history */
#define ZUNIONSTORE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* ZUNIONSTORE tips */
#define ZUNIONSTORE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* ZUNIONSTORE key specs */
keySpec ZUNIONSTORE_Keyspecs[2] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}},{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_KEYNUM,.fk.keynum={0,1,1}}
};
#endif

/* ZUNIONSTORE aggregate argument table */
struct COMMAND_ARG ZUNIONSTORE_aggregate_Subargs[] = {
{MAKE_ARG("sum",ARG_TYPE_PURE_TOKEN,-1,"SUM",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min",ARG_TYPE_PURE_TOKEN,-1,"MIN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("max",ARG_TYPE_PURE_TOKEN,-1,"MAX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* ZUNIONSTORE argument table */
struct COMMAND_ARG ZUNIONSTORE_Args[] = {
{MAKE_ARG("destination",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("numkeys",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key",ARG_TYPE_KEY,1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("weight",ARG_TYPE_INTEGER,-1,"WEIGHTS",NULL,NULL,CMD_ARG_OPTIONAL|CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("aggregate",ARG_TYPE_ONEOF,-1,"AGGREGATE",NULL,NULL,CMD_ARG_OPTIONAL,3,NULL),.subargs=ZUNIONSTORE_aggregate_Subargs},
};

/* ZUNIONSTORE_ReplySchema reply schema */
struct jsonObjectElement ZUNIONSTORE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of elements in the resulting sorted set."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject ZUNIONSTORE_ReplySchema = {ZUNIONSTORE_ReplySchema_elements,.length=2};

/********** XACK ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XACK history */
#define XACK_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XACK tips */
#define XACK_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XACK key specs */
keySpec XACK_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XACK argument table */
struct COMMAND_ARG XACK_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* XACK_ReplySchema reply schema */
struct jsonObjectElement XACK_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The command returns the number of messages successfully acknowledged. Certain message IDs may no longer be part of the PEL (for example because they have already been acknowledged), and XACK will not count them as successfully acknowledged."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XACK_ReplySchema = {XACK_ReplySchema_elements,.length=3};

/********** XADD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XADD history */
commandHistory XADD_History[] = {
{"6.2.0","Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option."},
{"7.0.0","Added support for the `<ms>-*` explicit ID form."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XADD tips */
const char *XADD_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XADD key specs */
keySpec XADD_Keyspecs[1] = {
{"UPDATE instead of INSERT because of the optional trimming feature",CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XADD trim strategy argument table */
struct COMMAND_ARG XADD_trim_strategy_Subargs[] = {
{MAKE_ARG("maxlen",ARG_TYPE_PURE_TOKEN,-1,"MAXLEN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("minid",ARG_TYPE_PURE_TOKEN,-1,"MINID",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* XADD trim operator argument table */
struct COMMAND_ARG XADD_trim_operator_Subargs[] = {
{MAKE_ARG("equal",ARG_TYPE_PURE_TOKEN,-1,"=",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("approximately",ARG_TYPE_PURE_TOKEN,-1,"~",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XADD trim argument table */
struct COMMAND_ARG XADD_trim_Subargs[] = {
{MAKE_ARG("strategy",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XADD_trim_strategy_Subargs},
{MAKE_ARG("operator",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=XADD_trim_operator_Subargs},
{MAKE_ARG("threshold",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"LIMIT",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* XADD id_selector argument table */
struct COMMAND_ARG XADD_id_selector_Subargs[] = {
{MAKE_ARG("auto-id",ARG_TYPE_PURE_TOKEN,-1,"*",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XADD data argument table */
struct COMMAND_ARG XADD_data_Subargs[] = {
{MAKE_ARG("field",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XADD argument table */
struct COMMAND_ARG XADD_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("nomkstream",ARG_TYPE_PURE_TOKEN,-1,"NOMKSTREAM",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("trim",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,4,NULL),.subargs=XADD_trim_Subargs},
{MAKE_ARG("id-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XADD_id_selector_Subargs},
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=XADD_data_Subargs},
};

/* XADD_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XADD_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The ID of the added entry. The ID is the one auto-generated if * is passed as ID argument, otherwise the command just returns the same ID specified by the user during insertion."},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XADD_ReplySchema_oneOf_0 = {XADD_ReplySchema_oneOf_0_elements,.length=3};

/* XADD_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XADD_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The NOMKSTREAM option is given and the key doesn't exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XADD_ReplySchema_oneOf_1 = {XADD_ReplySchema_oneOf_1_elements,.length=2};

/* XADD_ReplySchema_oneOf array reply schema */
struct jsonObject *XADD_ReplySchema_oneOf[] = {
&XADD_ReplySchema_oneOf_0,
&XADD_ReplySchema_oneOf_1,
};

/* XADD_ReplySchema reply schema */
struct jsonObjectElement XADD_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XADD_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XADD_ReplySchema = {XADD_ReplySchema_elements,.length=1};

/********** XAUTOCLAIM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XAUTOCLAIM history */
commandHistory XAUTOCLAIM_History[] = {
{"7.0.0","Added an element to the reply array, containing deleted entries the command cleared from the PEL"},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XAUTOCLAIM tips */
const char *XAUTOCLAIM_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XAUTOCLAIM key specs */
keySpec XAUTOCLAIM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XAUTOCLAIM argument table */
struct COMMAND_ARG XAUTOCLAIM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min-idle-time",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("justid",ARG_TYPE_PURE_TOKEN,-1,"JUSTID",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_0 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Cursor for next call."},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_0 = {XAUTOCLAIM_ReplySchema_anyOf_0_items_0_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_0 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_0 = {XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_0_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_items reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_items = {XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_items_elements,.length=1};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_items},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1 = {XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items array reply schema */
struct jsonObject *XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items[] = {
&XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_0,
&XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items_1,
};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_items,.length=2}},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items = {XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items_elements,.length=4};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_1 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XAUTOCLAIM_ReplySchema_anyOf_0_items_1_items},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_1 = {XAUTOCLAIM_ReplySchema_anyOf_0_items_1_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_2_items reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_2_items = {XAUTOCLAIM_ReplySchema_anyOf_0_items_2_items_elements,.length=2};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items_2 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry IDs which no longer exist in the stream, and were deleted from the PEL in which they were found."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XAUTOCLAIM_ReplySchema_anyOf_0_items_2_items},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0_items_2 = {XAUTOCLAIM_ReplySchema_anyOf_0_items_2_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_0_items array reply schema */
struct jsonObject *XAUTOCLAIM_ReplySchema_anyOf_0_items[] = {
&XAUTOCLAIM_ReplySchema_anyOf_0_items_0,
&XAUTOCLAIM_ReplySchema_anyOf_0_items_1,
&XAUTOCLAIM_ReplySchema_anyOf_0_items_2,
};

/* XAUTOCLAIM_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Claimed stream entries (with data, if `JUSTID` was not given)."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XAUTOCLAIM_ReplySchema_anyOf_0_items,.length=3}},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_0 = {XAUTOCLAIM_ReplySchema_anyOf_0_elements,.length=5};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items_0 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Cursor for next call."},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1_items_0 = {XAUTOCLAIM_ReplySchema_anyOf_1_items_0_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items_1_items reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1_items_1_items = {XAUTOCLAIM_ReplySchema_anyOf_1_items_1_items_elements,.length=2};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items_1 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XAUTOCLAIM_ReplySchema_anyOf_1_items_1_items},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1_items_1 = {XAUTOCLAIM_ReplySchema_anyOf_1_items_1_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items_2_items reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_items_2_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1_items_2_items = {XAUTOCLAIM_ReplySchema_anyOf_1_items_2_items_elements,.length=2};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items_2 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry IDs which no longer exist in the stream, and were deleted from the PEL in which they were found."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XAUTOCLAIM_ReplySchema_anyOf_1_items_2_items},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1_items_2 = {XAUTOCLAIM_ReplySchema_anyOf_1_items_2_elements,.length=3};

/* XAUTOCLAIM_ReplySchema_anyOf_1_items array reply schema */
struct jsonObject *XAUTOCLAIM_ReplySchema_anyOf_1_items[] = {
&XAUTOCLAIM_ReplySchema_anyOf_1_items_0,
&XAUTOCLAIM_ReplySchema_anyOf_1_items_1,
&XAUTOCLAIM_ReplySchema_anyOf_1_items_2,
};

/* XAUTOCLAIM_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Claimed stream entries (without data, if `JUSTID` was given)."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XAUTOCLAIM_ReplySchema_anyOf_1_items,.length=3}},
};

struct jsonObject XAUTOCLAIM_ReplySchema_anyOf_1 = {XAUTOCLAIM_ReplySchema_anyOf_1_elements,.length=5};

/* XAUTOCLAIM_ReplySchema_anyOf array reply schema */
struct jsonObject *XAUTOCLAIM_ReplySchema_anyOf[] = {
&XAUTOCLAIM_ReplySchema_anyOf_0,
&XAUTOCLAIM_ReplySchema_anyOf_1,
};

/* XAUTOCLAIM_ReplySchema reply schema */
struct jsonObjectElement XAUTOCLAIM_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=XAUTOCLAIM_ReplySchema_anyOf,.length=2}},
};

struct jsonObject XAUTOCLAIM_ReplySchema = {XAUTOCLAIM_ReplySchema_elements,.length=1};

/********** XCLAIM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XCLAIM history */
#define XCLAIM_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XCLAIM tips */
const char *XCLAIM_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XCLAIM key specs */
keySpec XCLAIM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XCLAIM argument table */
struct COMMAND_ARG XCLAIM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("min-idle-time",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("ms",ARG_TYPE_INTEGER,-1,"IDLE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,"TIME",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"RETRYCOUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("force",ARG_TYPE_PURE_TOKEN,-1,"FORCE",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("justid",ARG_TYPE_PURE_TOKEN,-1,"JUSTID",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("lastid",ARG_TYPE_STRING,-1,"LASTID",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XCLAIM_ReplySchema_anyOf_0_items reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_0_items_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_0_items = {XCLAIM_ReplySchema_anyOf_0_items_elements,.length=3};

/* XCLAIM_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If JUSTID option is specified, return just an array of IDs of messages successfully claimed"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XCLAIM_ReplySchema_anyOf_0_items},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_0 = {XCLAIM_ReplySchema_anyOf_0_elements,.length=3};

/* XCLAIM_ReplySchema_anyOf_1_items_items_0 reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_1_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_1_items_items_0 = {XCLAIM_ReplySchema_anyOf_1_items_items_0_elements,.length=3};

/* XCLAIM_ReplySchema_anyOf_1_items_items_1_items reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_1_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_1_items_items_1_items = {XCLAIM_ReplySchema_anyOf_1_items_items_1_items_elements,.length=1};

/* XCLAIM_ReplySchema_anyOf_1_items_items_1 reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_1_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XCLAIM_ReplySchema_anyOf_1_items_items_1_items},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_1_items_items_1 = {XCLAIM_ReplySchema_anyOf_1_items_items_1_elements,.length=3};

/* XCLAIM_ReplySchema_anyOf_1_items_items array reply schema */
struct jsonObject *XCLAIM_ReplySchema_anyOf_1_items_items[] = {
&XCLAIM_ReplySchema_anyOf_1_items_items_0,
&XCLAIM_ReplySchema_anyOf_1_items_items_1,
};

/* XCLAIM_ReplySchema_anyOf_1_items reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XCLAIM_ReplySchema_anyOf_1_items_items,.length=2}},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_1_items = {XCLAIM_ReplySchema_anyOf_1_items_elements,.length=4};

/* XCLAIM_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="array of stream entries that contains each entry as an array of 2 elements, the Entry ID and the entry data itself"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XCLAIM_ReplySchema_anyOf_1_items},
};

struct jsonObject XCLAIM_ReplySchema_anyOf_1 = {XCLAIM_ReplySchema_anyOf_1_elements,.length=4};

/* XCLAIM_ReplySchema_anyOf array reply schema */
struct jsonObject *XCLAIM_ReplySchema_anyOf[] = {
&XCLAIM_ReplySchema_anyOf_0,
&XCLAIM_ReplySchema_anyOf_1,
};

/* XCLAIM_ReplySchema reply schema */
struct jsonObjectElement XCLAIM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Stream entries with IDs matching the specified range."},
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=XCLAIM_ReplySchema_anyOf,.length=2}},
};

struct jsonObject XCLAIM_ReplySchema = {XCLAIM_ReplySchema_elements,.length=2};

/********** XDEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XDEL history */
#define XDEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XDEL tips */
#define XDEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XDEL key specs */
keySpec XDEL_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XDEL argument table */
struct COMMAND_ARG XDEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* XDEL_ReplySchema reply schema */
struct jsonObjectElement XDEL_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of entries actually deleted"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XDEL_ReplySchema = {XDEL_ReplySchema_elements,.length=3};

/********** XGROUP CREATE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP CREATE history */
commandHistory XGROUP_CREATE_History[] = {
{"7.0.0","Added the `entries_read` named argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP CREATE tips */
#define XGROUP_CREATE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP CREATE key specs */
keySpec XGROUP_CREATE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XGROUP CREATE id_selector argument table */
struct COMMAND_ARG XGROUP_CREATE_id_selector_Subargs[] = {
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("new-id",ARG_TYPE_PURE_TOKEN,-1,"$",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XGROUP CREATE argument table */
struct COMMAND_ARG XGROUP_CREATE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XGROUP_CREATE_id_selector_Subargs},
{MAKE_ARG("mkstream",ARG_TYPE_PURE_TOKEN,-1,"MKSTREAM",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("entriesread",ARG_TYPE_INTEGER,-1,"ENTRIESREAD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="entries-read"},
};

/* XGROUP_CREATE_ReplySchema reply schema */
struct jsonObjectElement XGROUP_CREATE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject XGROUP_CREATE_ReplySchema = {XGROUP_CREATE_ReplySchema_elements,.length=1};

/********** XGROUP CREATECONSUMER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP CREATECONSUMER history */
#define XGROUP_CREATECONSUMER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP CREATECONSUMER tips */
#define XGROUP_CREATECONSUMER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP CREATECONSUMER key specs */
keySpec XGROUP_CREATECONSUMER_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XGROUP CREATECONSUMER argument table */
struct COMMAND_ARG XGROUP_CREATECONSUMER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XGROUP_CREATECONSUMER_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XGROUP_CREATECONSUMER_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject XGROUP_CREATECONSUMER_ReplySchema_oneOf_0 = {XGROUP_CREATECONSUMER_ReplySchema_oneOf_0_elements,.length=1};

/* XGROUP_CREATECONSUMER_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XGROUP_CREATECONSUMER_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject XGROUP_CREATECONSUMER_ReplySchema_oneOf_1 = {XGROUP_CREATECONSUMER_ReplySchema_oneOf_1_elements,.length=1};

/* XGROUP_CREATECONSUMER_ReplySchema_oneOf array reply schema */
struct jsonObject *XGROUP_CREATECONSUMER_ReplySchema_oneOf[] = {
&XGROUP_CREATECONSUMER_ReplySchema_oneOf_0,
&XGROUP_CREATECONSUMER_ReplySchema_oneOf_1,
};

/* XGROUP_CREATECONSUMER_ReplySchema reply schema */
struct jsonObjectElement XGROUP_CREATECONSUMER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of created consumers (0 or 1)"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XGROUP_CREATECONSUMER_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XGROUP_CREATECONSUMER_ReplySchema = {XGROUP_CREATECONSUMER_ReplySchema_elements,.length=2};

/********** XGROUP DELCONSUMER ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP DELCONSUMER history */
#define XGROUP_DELCONSUMER_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP DELCONSUMER tips */
#define XGROUP_DELCONSUMER_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP DELCONSUMER key specs */
keySpec XGROUP_DELCONSUMER_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XGROUP DELCONSUMER argument table */
struct COMMAND_ARG XGROUP_DELCONSUMER_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XGROUP_DELCONSUMER_ReplySchema reply schema */
struct jsonObjectElement XGROUP_DELCONSUMER_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of pending messages that were yet associated with such a consumer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XGROUP_DELCONSUMER_ReplySchema = {XGROUP_DELCONSUMER_ReplySchema_elements,.length=3};

/********** XGROUP DESTROY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP DESTROY history */
#define XGROUP_DESTROY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP DESTROY tips */
#define XGROUP_DESTROY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP DESTROY key specs */
keySpec XGROUP_DESTROY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XGROUP DESTROY argument table */
struct COMMAND_ARG XGROUP_DESTROY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XGROUP_DESTROY_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XGROUP_DESTROY_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject XGROUP_DESTROY_ReplySchema_oneOf_0 = {XGROUP_DESTROY_ReplySchema_oneOf_0_elements,.length=1};

/* XGROUP_DESTROY_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XGROUP_DESTROY_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject XGROUP_DESTROY_ReplySchema_oneOf_1 = {XGROUP_DESTROY_ReplySchema_oneOf_1_elements,.length=1};

/* XGROUP_DESTROY_ReplySchema_oneOf array reply schema */
struct jsonObject *XGROUP_DESTROY_ReplySchema_oneOf[] = {
&XGROUP_DESTROY_ReplySchema_oneOf_0,
&XGROUP_DESTROY_ReplySchema_oneOf_1,
};

/* XGROUP_DESTROY_ReplySchema reply schema */
struct jsonObjectElement XGROUP_DESTROY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of destroyed consumer groups (0 or 1)"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XGROUP_DESTROY_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XGROUP_DESTROY_ReplySchema = {XGROUP_DESTROY_ReplySchema_elements,.length=2};

/********** XGROUP HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP HELP history */
#define XGROUP_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP HELP tips */
#define XGROUP_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP HELP key specs */
#define XGROUP_HELP_Keyspecs NULL
#endif

/* XGROUP_HELP_ReplySchema_items reply schema */
struct jsonObjectElement XGROUP_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XGROUP_HELP_ReplySchema_items = {XGROUP_HELP_ReplySchema_items_elements,.length=1};

/* XGROUP_HELP_ReplySchema reply schema */
struct jsonObjectElement XGROUP_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&XGROUP_HELP_ReplySchema_items},
};

struct jsonObject XGROUP_HELP_ReplySchema = {XGROUP_HELP_ReplySchema_elements,.length=3};

/********** XGROUP SETID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP SETID history */
commandHistory XGROUP_SETID_History[] = {
{"7.0.0","Added the optional `entries_read` argument."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP SETID tips */
#define XGROUP_SETID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP SETID key specs */
keySpec XGROUP_SETID_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XGROUP SETID id_selector argument table */
struct COMMAND_ARG XGROUP_SETID_id_selector_Subargs[] = {
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("new-id",ARG_TYPE_PURE_TOKEN,-1,"$",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XGROUP SETID argument table */
struct COMMAND_ARG XGROUP_SETID_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("id-selector",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XGROUP_SETID_id_selector_Subargs},
{MAKE_ARG("entriesread",ARG_TYPE_INTEGER,-1,"ENTRIESREAD",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL),.display_text="entries-read"},
};

/* XGROUP_SETID_ReplySchema reply schema */
struct jsonObjectElement XGROUP_SETID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject XGROUP_SETID_ReplySchema = {XGROUP_SETID_ReplySchema_elements,.length=1};

/* XGROUP command table */
struct COMMAND_STRUCT XGROUP_Subcommands[] = {
{MAKE_CMD("create","Creates a consumer group.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_CREATE_History,1,XGROUP_CREATE_Tips,0,xgroupCommand,-5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STREAM,XGROUP_CREATE_Keyspecs,1,NULL,5),.args=XGROUP_CREATE_Args,.reply_schema=&XGROUP_CREATE_ReplySchema},
{MAKE_CMD("createconsumer","Creates a consumer in a consumer group.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_CREATECONSUMER_History,0,XGROUP_CREATECONSUMER_Tips,0,xgroupCommand,5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STREAM,XGROUP_CREATECONSUMER_Keyspecs,1,NULL,3),.args=XGROUP_CREATECONSUMER_Args,.reply_schema=&XGROUP_CREATECONSUMER_ReplySchema},
{MAKE_CMD("delconsumer","Deletes a consumer from a consumer group.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_DELCONSUMER_History,0,XGROUP_DELCONSUMER_Tips,0,xgroupCommand,5,CMD_WRITE,ACL_CATEGORY_STREAM,XGROUP_DELCONSUMER_Keyspecs,1,NULL,3),.args=XGROUP_DELCONSUMER_Args,.reply_schema=&XGROUP_DELCONSUMER_ReplySchema},
{MAKE_CMD("destroy","Destroys a consumer group.","O(N) where N is the number of entries in the group's pending entries list (PEL).","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_DESTROY_History,0,XGROUP_DESTROY_Tips,0,xgroupCommand,4,CMD_WRITE,ACL_CATEGORY_STREAM,XGROUP_DESTROY_Keyspecs,1,NULL,2),.args=XGROUP_DESTROY_Args,.reply_schema=&XGROUP_DESTROY_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_HELP_History,0,XGROUP_HELP_Tips,0,xgroupCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_STREAM,XGROUP_HELP_Keyspecs,0,NULL,0),.reply_schema=&XGROUP_HELP_ReplySchema},
{MAKE_CMD("setid","Sets the last-delivered ID of a consumer group.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_SETID_History,1,XGROUP_SETID_Tips,0,xgroupCommand,-5,CMD_WRITE,ACL_CATEGORY_STREAM,XGROUP_SETID_Keyspecs,1,NULL,4),.args=XGROUP_SETID_Args,.reply_schema=&XGROUP_SETID_ReplySchema},
{0}
};

/********** XGROUP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XGROUP history */
#define XGROUP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XGROUP tips */
#define XGROUP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XGROUP key specs */
#define XGROUP_Keyspecs NULL
#endif

/********** XINFO CONSUMERS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XINFO CONSUMERS history */
commandHistory XINFO_CONSUMERS_History[] = {
{"7.2.0","Added the `inactive` field, and changed the meaning of `idle`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XINFO CONSUMERS tips */
const char *XINFO_CONSUMERS_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XINFO CONSUMERS key specs */
keySpec XINFO_CONSUMERS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XINFO CONSUMERS argument table */
struct COMMAND_ARG XINFO_CONSUMERS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XINFO_CONSUMERS_ReplySchema_items_properties_name reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items_properties_name = {XINFO_CONSUMERS_ReplySchema_items_properties_name_elements,.length=1};

/* XINFO_CONSUMERS_ReplySchema_items_properties_pending reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_properties_pending_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items_properties_pending = {XINFO_CONSUMERS_ReplySchema_items_properties_pending_elements,.length=1};

/* XINFO_CONSUMERS_ReplySchema_items_properties_idle reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_properties_idle_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items_properties_idle = {XINFO_CONSUMERS_ReplySchema_items_properties_idle_elements,.length=1};

/* XINFO_CONSUMERS_ReplySchema_items_properties_inactive reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_properties_inactive_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items_properties_inactive = {XINFO_CONSUMERS_ReplySchema_items_properties_inactive_elements,.length=1};

/* XINFO_CONSUMERS_ReplySchema_items_properties reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&XINFO_CONSUMERS_ReplySchema_items_properties_name},
{JSON_TYPE_OBJECT,"pending",.value.object=&XINFO_CONSUMERS_ReplySchema_items_properties_pending},
{JSON_TYPE_OBJECT,"idle",.value.object=&XINFO_CONSUMERS_ReplySchema_items_properties_idle},
{JSON_TYPE_OBJECT,"inactive",.value.object=&XINFO_CONSUMERS_ReplySchema_items_properties_inactive},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items_properties = {XINFO_CONSUMERS_ReplySchema_items_properties_elements,.length=4};

/* XINFO_CONSUMERS_ReplySchema_items reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_CONSUMERS_ReplySchema_items_properties},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema_items = {XINFO_CONSUMERS_ReplySchema_items_elements,.length=3};

/* XINFO_CONSUMERS_ReplySchema reply schema */
struct jsonObjectElement XINFO_CONSUMERS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array list of consumers"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_CONSUMERS_ReplySchema_items},
};

struct jsonObject XINFO_CONSUMERS_ReplySchema = {XINFO_CONSUMERS_ReplySchema_elements,.length=4};

/********** XINFO GROUPS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XINFO GROUPS history */
commandHistory XINFO_GROUPS_History[] = {
{"7.0.0","Added the `entries-read` and `lag` fields"},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XINFO GROUPS tips */
#define XINFO_GROUPS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XINFO GROUPS key specs */
keySpec XINFO_GROUPS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XINFO GROUPS argument table */
struct COMMAND_ARG XINFO_GROUPS_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XINFO_GROUPS_ReplySchema_items_properties_name reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_name = {XINFO_GROUPS_ReplySchema_items_properties_name_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_consumers reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_consumers_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_consumers = {XINFO_GROUPS_ReplySchema_items_properties_consumers_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_pending reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_pending_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_pending = {XINFO_GROUPS_ReplySchema_items_properties_pending_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_last_delivered_id reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_last_delivered_id_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_last_delivered_id = {XINFO_GROUPS_ReplySchema_items_properties_last_delivered_id_elements,.length=2};

/* XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_0 reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_0 = {XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_0_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_1 reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_1 = {XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_1_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf array reply schema */
struct jsonObject *XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf[] = {
&XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_0,
&XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf_1,
};

/* XINFO_GROUPS_ReplySchema_items_properties_entries_read reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_entries_read_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_GROUPS_ReplySchema_items_properties_entries_read_oneOf,.length=2}},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_entries_read = {XINFO_GROUPS_ReplySchema_items_properties_entries_read_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_0 reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_0 = {XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_0_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_1 reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_1 = {XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_1_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf array reply schema */
struct jsonObject *XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf[] = {
&XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_0,
&XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf_1,
};

/* XINFO_GROUPS_ReplySchema_items_properties_lag reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_lag_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_GROUPS_ReplySchema_items_properties_lag_oneOf,.length=2}},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties_lag = {XINFO_GROUPS_ReplySchema_items_properties_lag_elements,.length=1};

/* XINFO_GROUPS_ReplySchema_items_properties reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_name},
{JSON_TYPE_OBJECT,"consumers",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_consumers},
{JSON_TYPE_OBJECT,"pending",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_pending},
{JSON_TYPE_OBJECT,"last-delivered-id",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_last_delivered_id},
{JSON_TYPE_OBJECT,"entries-read",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_entries_read},
{JSON_TYPE_OBJECT,"lag",.value.object=&XINFO_GROUPS_ReplySchema_items_properties_lag},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items_properties = {XINFO_GROUPS_ReplySchema_items_properties_elements,.length=6};

/* XINFO_GROUPS_ReplySchema_items reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_GROUPS_ReplySchema_items_properties},
};

struct jsonObject XINFO_GROUPS_ReplySchema_items = {XINFO_GROUPS_ReplySchema_items_elements,.length=3};

/* XINFO_GROUPS_ReplySchema reply schema */
struct jsonObjectElement XINFO_GROUPS_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_GROUPS_ReplySchema_items},
};

struct jsonObject XINFO_GROUPS_ReplySchema = {XINFO_GROUPS_ReplySchema_elements,.length=2};

/********** XINFO HELP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XINFO HELP history */
#define XINFO_HELP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XINFO HELP tips */
#define XINFO_HELP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XINFO HELP key specs */
#define XINFO_HELP_Keyspecs NULL
#endif

/* XINFO_HELP_ReplySchema_items reply schema */
struct jsonObjectElement XINFO_HELP_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_HELP_ReplySchema_items = {XINFO_HELP_ReplySchema_items_elements,.length=1};

/* XINFO_HELP_ReplySchema reply schema */
struct jsonObjectElement XINFO_HELP_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Helpful text about subcommands."},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_HELP_ReplySchema_items},
};

struct jsonObject XINFO_HELP_ReplySchema = {XINFO_HELP_ReplySchema_elements,.length=3};

/********** XINFO STREAM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XINFO STREAM history */
commandHistory XINFO_STREAM_History[] = {
{"6.0.0","Added the `FULL` modifier."},
{"7.0.0","Added the `max-deleted-entry-id`, `entries-added`, `recorded-first-entry-id`, `entries-read` and `lag` fields"},
{"7.2.0","Added the `active-time` field, and changed the meaning of `seen-time`."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XINFO STREAM tips */
#define XINFO_STREAM_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XINFO STREAM key specs */
keySpec XINFO_STREAM_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={2},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XINFO STREAM full_block argument table */
struct COMMAND_ARG XINFO_STREAM_full_block_Subargs[] = {
{MAKE_ARG("full",ARG_TYPE_PURE_TOKEN,-1,"FULL",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XINFO STREAM argument table */
struct COMMAND_ARG XINFO_STREAM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("full-block",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=XINFO_STREAM_full_block_Subargs},
};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_length reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_length_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of entries in the stream (see `XLEN`)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_length = {XINFO_STREAM_ReplySchema_oneOf_0_properties_length_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_keys reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_keys_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of keys in the underlying radix data structure"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_keys = {XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_keys_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_nodes reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_nodes_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of nodes in the underlying radix data structure"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_nodes = {XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_nodes_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_generated_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_generated_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the ID of the least-recently entry that was added to the stream"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_generated_id = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_generated_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_max_deleted_entry_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_max_deleted_entry_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the maximal entry ID that was deleted from the stream"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_max_deleted_entry_id = {XINFO_STREAM_ReplySchema_oneOf_0_properties_max_deleted_entry_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_recorded_first_entry_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_recorded_first_entry_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cached copy of the first entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_recorded_first_entry_id = {XINFO_STREAM_ReplySchema_oneOf_0_properties_recorded_first_entry_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_entries_added reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_entries_added_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the count of all entries added to the stream during its lifetime"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_entries_added = {XINFO_STREAM_ReplySchema_oneOf_0_properties_entries_added_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_groups reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_groups_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of consumer groups defined for the stream"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_groups = {XINFO_STREAM_ReplySchema_oneOf_0_properties_groups_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_0 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_0_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_0 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_0_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_items = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_items_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items[] = {
&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_0,
&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_items,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf[] = {
&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_0,
&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the first entry of the stream"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_oneOf,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry = {XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_0 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_0_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_0 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_0_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_items = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_items_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items[] = {
&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_0,
&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_items,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1 = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf[] = {
&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_0,
&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the last entry of the stream"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_oneOf,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry = {XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_0_properties reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_properties_elements[] = {
{JSON_TYPE_OBJECT,"length",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_length},
{JSON_TYPE_OBJECT,"radix-tree-keys",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_keys},
{JSON_TYPE_OBJECT,"radix-tree-nodes",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_radix_tree_nodes},
{JSON_TYPE_OBJECT,"last-generated-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_generated_id},
{JSON_TYPE_OBJECT,"max-deleted-entry-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_max_deleted_entry_id},
{JSON_TYPE_OBJECT,"recorded-first-entry-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_recorded_first_entry_id},
{JSON_TYPE_OBJECT,"entries-added",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_entries_added},
{JSON_TYPE_OBJECT,"groups",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_groups},
{JSON_TYPE_OBJECT,"first-entry",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_first_entry},
{JSON_TYPE_OBJECT,"last-entry",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties_last_entry},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0_properties = {XINFO_STREAM_ReplySchema_oneOf_0_properties_elements,.length=10};

/* XINFO_STREAM_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Summary form, in case `FULL` was not given."},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_STREAM_ReplySchema_oneOf_0_properties},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_0 = {XINFO_STREAM_ReplySchema_oneOf_0_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_length reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_length_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of entries in the stream (see `XLEN`)"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_length = {XINFO_STREAM_ReplySchema_oneOf_1_properties_length_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_keys reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_keys_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of keys in the underlying radix data structure"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_keys = {XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_keys_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_nodes reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_nodes_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the number of nodes in the underlying radix data structure"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_nodes = {XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_nodes_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_last_generated_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_last_generated_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the ID of the least-recently entry that was added to the stream"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_last_generated_id = {XINFO_STREAM_ReplySchema_oneOf_1_properties_last_generated_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_max_deleted_entry_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_max_deleted_entry_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the maximal entry ID that was deleted from the stream"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_max_deleted_entry_id = {XINFO_STREAM_ReplySchema_oneOf_1_properties_max_deleted_entry_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_recorded_first_entry_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_recorded_first_entry_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="cached copy of the first entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_recorded_first_entry_id = {XINFO_STREAM_ReplySchema_oneOf_1_properties_recorded_first_entry_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_added reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_added_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="the count of all entries added to the stream during its lifetime"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_added = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_added_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_0 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_0_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_items_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items[] = {
&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_0,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_items,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_entries reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="all the entries of the stream"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_entries = {XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_name reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="group name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_name = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_name_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_last_delivered_id reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_last_delivered_id_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="last entry ID that was delivered to a consumer"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_last_delivered_id = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_last_delivered_id_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_0 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_0_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_1 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_1_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf[] = {
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_0,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="total number of entries ever read by consumers in the group"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_oneOf,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_0 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_0_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_1 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_1_elements,.length=1};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf[] = {
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_0,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf_1,
};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of entries left to be consumed from the stream"},
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_oneOf,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pel_count reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pel_count_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="total number of unacknowledged entries"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pel_count = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pel_count_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_0 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_0_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Consumer name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_1 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_1_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_2 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Delivery timestamp"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_2 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_2_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_3 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Delivery count"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_3 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_3_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items[] = {
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_0,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_1,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_2,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items_3,
};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_items,.length=4}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data about all of the unacknowledged entries"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_active_time reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_active_time_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Last time this consumer was active (successful reading/claiming)."},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_active_time = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_active_time_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_name reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_name_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="consumer name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_name = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_name_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_seen_time reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_seen_time_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="timestamp of the last interaction attempt of the consumer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_seen_time = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_seen_time_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pel_count reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pel_count_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="number of unacknowledged entries that belong to the consumer"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pel_count = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pel_count_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_0 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_0 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_0_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Delivery timestamp"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_1 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_1_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_2 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Delivery count"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_2 = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_2_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items[] = {
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_0,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_1,
&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items_2,
};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=3},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_items,.length=3}},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data about the unacknowledged entries"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"active-time",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_active_time},
{JSON_TYPE_OBJECT,"name",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_name},
{JSON_TYPE_OBJECT,"seen-time",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_seen_time},
{JSON_TYPE_OBJECT,"pel-count",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pel_count},
{JSON_TYPE_OBJECT,"pending",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_pending},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties_elements,.length=5};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_properties},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="data about all of the consumers of the group"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_elements[] = {
{JSON_TYPE_OBJECT,"name",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_name},
{JSON_TYPE_OBJECT,"last-delivered-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_last_delivered_id},
{JSON_TYPE_OBJECT,"entries-read",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_entries_read},
{JSON_TYPE_OBJECT,"lag",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_lag},
{JSON_TYPE_OBJECT,"pel-count",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pel_count},
{JSON_TYPE_OBJECT,"pending",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_pending},
{JSON_TYPE_OBJECT,"consumers",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_consumers},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties_elements,.length=7};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_properties},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items_elements,.length=3};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties_groups reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_items},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties_groups = {XINFO_STREAM_ReplySchema_oneOf_1_properties_groups_elements,.length=2};

/* XINFO_STREAM_ReplySchema_oneOf_1_properties reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_properties_elements[] = {
{JSON_TYPE_OBJECT,"length",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_length},
{JSON_TYPE_OBJECT,"radix-tree-keys",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_keys},
{JSON_TYPE_OBJECT,"radix-tree-nodes",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_radix_tree_nodes},
{JSON_TYPE_OBJECT,"last-generated-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_last_generated_id},
{JSON_TYPE_OBJECT,"max-deleted-entry-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_max_deleted_entry_id},
{JSON_TYPE_OBJECT,"recorded-first-entry-id",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_recorded_first_entry_id},
{JSON_TYPE_OBJECT,"entries-added",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries_added},
{JSON_TYPE_OBJECT,"entries",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_entries},
{JSON_TYPE_OBJECT,"groups",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties_groups},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1_properties = {XINFO_STREAM_ReplySchema_oneOf_1_properties_elements,.length=9};

/* XINFO_STREAM_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Extended form, in case `FULL` was given."},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&XINFO_STREAM_ReplySchema_oneOf_1_properties},
};

struct jsonObject XINFO_STREAM_ReplySchema_oneOf_1 = {XINFO_STREAM_ReplySchema_oneOf_1_elements,.length=4};

/* XINFO_STREAM_ReplySchema_oneOf array reply schema */
struct jsonObject *XINFO_STREAM_ReplySchema_oneOf[] = {
&XINFO_STREAM_ReplySchema_oneOf_0,
&XINFO_STREAM_ReplySchema_oneOf_1,
};

/* XINFO_STREAM_ReplySchema reply schema */
struct jsonObjectElement XINFO_STREAM_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XINFO_STREAM_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XINFO_STREAM_ReplySchema = {XINFO_STREAM_ReplySchema_elements,.length=1};

/* XINFO command table */
struct COMMAND_STRUCT XINFO_Subcommands[] = {
{MAKE_CMD("consumers","Returns a list of the consumers in a consumer group.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XINFO_CONSUMERS_History,1,XINFO_CONSUMERS_Tips,1,xinfoCommand,4,CMD_READONLY,ACL_CATEGORY_STREAM,XINFO_CONSUMERS_Keyspecs,1,NULL,2),.args=XINFO_CONSUMERS_Args,.reply_schema=&XINFO_CONSUMERS_ReplySchema},
{MAKE_CMD("groups","Returns a list of the consumer groups of a stream.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XINFO_GROUPS_History,1,XINFO_GROUPS_Tips,0,xinfoCommand,3,CMD_READONLY,ACL_CATEGORY_STREAM,XINFO_GROUPS_Keyspecs,1,NULL,1),.args=XINFO_GROUPS_Args,.reply_schema=&XINFO_GROUPS_ReplySchema},
{MAKE_CMD("help","Returns helpful text about the different subcommands.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XINFO_HELP_History,0,XINFO_HELP_Tips,0,xinfoCommand,2,CMD_LOADING|CMD_STALE,ACL_CATEGORY_STREAM,XINFO_HELP_Keyspecs,0,NULL,0),.reply_schema=&XINFO_HELP_ReplySchema},
{MAKE_CMD("stream","Returns information about a stream.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XINFO_STREAM_History,3,XINFO_STREAM_Tips,0,xinfoCommand,-3,CMD_READONLY,ACL_CATEGORY_STREAM,XINFO_STREAM_Keyspecs,1,NULL,2),.args=XINFO_STREAM_Args,.reply_schema=&XINFO_STREAM_ReplySchema},
{0}
};

/********** XINFO ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XINFO history */
#define XINFO_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XINFO tips */
#define XINFO_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XINFO key specs */
#define XINFO_Keyspecs NULL
#endif

/********** XLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XLEN history */
#define XLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XLEN tips */
#define XLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XLEN key specs */
keySpec XLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XLEN argument table */
struct COMMAND_ARG XLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XLEN_ReplySchema reply schema */
struct jsonObjectElement XLEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of entries of the stream at key"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XLEN_ReplySchema = {XLEN_ReplySchema_elements,.length=3};

/********** XPENDING ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XPENDING history */
commandHistory XPENDING_History[] = {
{"6.2.0","Added the `IDLE` option and exclusive range intervals."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XPENDING tips */
const char *XPENDING_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XPENDING key specs */
keySpec XPENDING_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XPENDING filters argument table */
struct COMMAND_ARG XPENDING_filters_Subargs[] = {
{MAKE_ARG("min-idle-time",ARG_TYPE_INTEGER,-1,"IDLE",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XPENDING argument table */
struct COMMAND_ARG XPENDING_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("filters",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,5,NULL),.subargs=XPENDING_filters_Subargs},
};

/* XPENDING_ReplySchema_oneOf_0_items_items_0 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0_items_items_0 = {XPENDING_ReplySchema_oneOf_0_items_items_0_elements,.length=3};

/* XPENDING_ReplySchema_oneOf_0_items_items_1 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Consumer name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0_items_items_1 = {XPENDING_ReplySchema_oneOf_0_items_items_1_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_0_items_items_2 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_items_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Idle time"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0_items_items_2 = {XPENDING_ReplySchema_oneOf_0_items_items_2_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_0_items_items_3 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_items_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Delivery count"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0_items_items_3 = {XPENDING_ReplySchema_oneOf_0_items_items_3_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_0_items_items array reply schema */
struct jsonObject *XPENDING_ReplySchema_oneOf_0_items_items[] = {
&XPENDING_ReplySchema_oneOf_0_items_items_0,
&XPENDING_ReplySchema_oneOf_0_items_items_1,
&XPENDING_ReplySchema_oneOf_0_items_items_2,
&XPENDING_ReplySchema_oneOf_0_items_items_3,
};

/* XPENDING_ReplySchema_oneOf_0_items reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XPENDING_ReplySchema_oneOf_0_items_items,.length=4}},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0_items = {XPENDING_ReplySchema_oneOf_0_items_elements,.length=4};

/* XPENDING_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Extended form, in case `start` was given."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XPENDING_ReplySchema_oneOf_0_items},
};

struct jsonObject XPENDING_ReplySchema_oneOf_0 = {XPENDING_ReplySchema_oneOf_0_elements,.length=3};

/* XPENDING_ReplySchema_oneOf_1_items_0 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Total number of pending messages"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_0 = {XPENDING_ReplySchema_oneOf_1_items_0_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_1_items_1 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Minimal pending entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_1 = {XPENDING_ReplySchema_oneOf_1_items_1_elements,.length=3};

/* XPENDING_ReplySchema_oneOf_1_items_2 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Maximal pending entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_2 = {XPENDING_ReplySchema_oneOf_1_items_2_elements,.length=3};

/* XPENDING_ReplySchema_oneOf_1_items_3_items_items_0 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_3_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Consumer name"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_3_items_items_0 = {XPENDING_ReplySchema_oneOf_1_items_3_items_items_0_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_1_items_3_items_items_1 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_3_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Number of pending messages"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_3_items_items_1 = {XPENDING_ReplySchema_oneOf_1_items_3_items_items_1_elements,.length=2};

/* XPENDING_ReplySchema_oneOf_1_items_3_items_items array reply schema */
struct jsonObject *XPENDING_ReplySchema_oneOf_1_items_3_items_items[] = {
&XPENDING_ReplySchema_oneOf_1_items_3_items_items_0,
&XPENDING_ReplySchema_oneOf_1_items_3_items_items_1,
};

/* XPENDING_ReplySchema_oneOf_1_items_3_items reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_3_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XPENDING_ReplySchema_oneOf_1_items_3_items_items,.length=2}},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_3_items = {XPENDING_ReplySchema_oneOf_1_items_3_items_elements,.length=4};

/* XPENDING_ReplySchema_oneOf_1_items_3 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_items_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Consumers with pending messages"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XPENDING_ReplySchema_oneOf_1_items_3_items},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1_items_3 = {XPENDING_ReplySchema_oneOf_1_items_3_elements,.length=3};

/* XPENDING_ReplySchema_oneOf_1_items array reply schema */
struct jsonObject *XPENDING_ReplySchema_oneOf_1_items[] = {
&XPENDING_ReplySchema_oneOf_1_items_0,
&XPENDING_ReplySchema_oneOf_1_items_1,
&XPENDING_ReplySchema_oneOf_1_items_2,
&XPENDING_ReplySchema_oneOf_1_items_3,
};

/* XPENDING_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XPENDING_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Summary form, in case `start` was not given."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=4},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=4},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XPENDING_ReplySchema_oneOf_1_items,.length=4}},
};

struct jsonObject XPENDING_ReplySchema_oneOf_1 = {XPENDING_ReplySchema_oneOf_1_elements,.length=5};

/* XPENDING_ReplySchema_oneOf array reply schema */
struct jsonObject *XPENDING_ReplySchema_oneOf[] = {
&XPENDING_ReplySchema_oneOf_0,
&XPENDING_ReplySchema_oneOf_1,
};

/* XPENDING_ReplySchema reply schema */
struct jsonObjectElement XPENDING_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XPENDING_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XPENDING_ReplySchema = {XPENDING_ReplySchema_elements,.length=1};

/********** XRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XRANGE history */
commandHistory XRANGE_History[] = {
{"6.2.0","Added exclusive ranges."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XRANGE tips */
#define XRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XRANGE key specs */
keySpec XRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XRANGE argument table */
struct COMMAND_ARG XRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XRANGE_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement XRANGE_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Entry ID"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XRANGE_ReplySchema_items_items_0 = {XRANGE_ReplySchema_items_items_0_elements,.length=3};

/* XRANGE_ReplySchema_items_items_1_items reply schema */
struct jsonObjectElement XRANGE_ReplySchema_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XRANGE_ReplySchema_items_items_1_items = {XRANGE_ReplySchema_items_items_1_items_elements,.length=1};

/* XRANGE_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement XRANGE_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Data"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XRANGE_ReplySchema_items_items_1_items},
};

struct jsonObject XRANGE_ReplySchema_items_items_1 = {XRANGE_ReplySchema_items_items_1_elements,.length=3};

/* XRANGE_ReplySchema_items_items array reply schema */
struct jsonObject *XRANGE_ReplySchema_items_items[] = {
&XRANGE_ReplySchema_items_items_0,
&XRANGE_ReplySchema_items_items_1,
};

/* XRANGE_ReplySchema_items reply schema */
struct jsonObjectElement XRANGE_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XRANGE_ReplySchema_items_items,.length=2}},
};

struct jsonObject XRANGE_ReplySchema_items = {XRANGE_ReplySchema_items_elements,.length=4};

/* XRANGE_ReplySchema reply schema */
struct jsonObjectElement XRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Stream entries with IDs matching the specified range."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_BOOLEAN,"uniqueItems",.value.boolean=1},
{JSON_TYPE_OBJECT,"items",.value.object=&XRANGE_ReplySchema_items},
};

struct jsonObject XRANGE_ReplySchema = {XRANGE_ReplySchema_elements,.length=4};

/********** XREAD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XREAD history */
#define XREAD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XREAD tips */
#define XREAD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XREAD key specs */
keySpec XREAD_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_KEYWORD,.bs.keyword={"STREAMS",1},KSPEC_FK_RANGE,.fk.range={-1,1,2}}
};
#endif

/* XREAD streams argument table */
struct COMMAND_ARG XREAD_streams_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* XREAD argument table */
struct COMMAND_ARG XREAD_Args[] = {
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"BLOCK",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("streams",ARG_TYPE_BLOCK,-1,"STREAMS",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XREAD_streams_Subargs},
};

/* XREAD_ReplySchema_oneOf_0_patternProperties______items_items_0 reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties______items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="entry id"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties______items_items_0 = {XREAD_ReplySchema_oneOf_0_patternProperties______items_items_0_elements,.length=3};

/* XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_items reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_items = {XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_items_elements,.length=1};

/* XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1 reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="array of field-value pairs"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_items},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1 = {XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1_elements,.length=3};

/* XREAD_ReplySchema_oneOf_0_patternProperties______items_items array reply schema */
struct jsonObject *XREAD_ReplySchema_oneOf_0_patternProperties______items_items[] = {
&XREAD_ReplySchema_oneOf_0_patternProperties______items_items_0,
&XREAD_ReplySchema_oneOf_0_patternProperties______items_items_1,
};

/* XREAD_ReplySchema_oneOf_0_patternProperties______items reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties______items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XREAD_ReplySchema_oneOf_0_patternProperties______items_items,.length=2}},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties______items = {XREAD_ReplySchema_oneOf_0_patternProperties______items_elements,.length=4};

/* XREAD_ReplySchema_oneOf_0_patternProperties_____ reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties______elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The entries reported for that key"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREAD_ReplySchema_oneOf_0_patternProperties______items},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties_____ = {XREAD_ReplySchema_oneOf_0_patternProperties______elements,.length=3};

/* XREAD_ReplySchema_oneOf_0_patternProperties reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_patternProperties_elements[] = {
{JSON_TYPE_OBJECT,"^.*$",.value.object=&XREAD_ReplySchema_oneOf_0_patternProperties_____},
};

struct jsonObject XREAD_ReplySchema_oneOf_0_patternProperties = {XREAD_ReplySchema_oneOf_0_patternProperties_elements,.length=1};

/* XREAD_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map of key-value elements when each element composed of key name and the entries reported for that key"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"patternProperties",.value.object=&XREAD_ReplySchema_oneOf_0_patternProperties},
};

struct jsonObject XREAD_ReplySchema_oneOf_0 = {XREAD_ReplySchema_oneOf_0_elements,.length=3};

/* XREAD_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XREAD_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If BLOCK option is given, and a timeout occurs, or there is no stream we can serve"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XREAD_ReplySchema_oneOf_1 = {XREAD_ReplySchema_oneOf_1_elements,.length=2};

/* XREAD_ReplySchema_oneOf array reply schema */
struct jsonObject *XREAD_ReplySchema_oneOf[] = {
&XREAD_ReplySchema_oneOf_0,
&XREAD_ReplySchema_oneOf_1,
};

/* XREAD_ReplySchema reply schema */
struct jsonObjectElement XREAD_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XREAD_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XREAD_ReplySchema = {XREAD_ReplySchema_elements,.length=1};

/********** XREADGROUP ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XREADGROUP history */
#define XREADGROUP_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XREADGROUP tips */
#define XREADGROUP_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XREADGROUP key specs */
keySpec XREADGROUP_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_KEYWORD,.bs.keyword={"STREAMS",4},KSPEC_FK_RANGE,.fk.range={-1,1,2}}
};
#endif

/* XREADGROUP group_block argument table */
struct COMMAND_ARG XREADGROUP_group_block_Subargs[] = {
{MAKE_ARG("group",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("consumer",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XREADGROUP streams argument table */
struct COMMAND_ARG XREADGROUP_streams_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
{MAKE_ARG("id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* XREADGROUP argument table */
struct COMMAND_ARG XREADGROUP_Args[] = {
{MAKE_ARG("group-block",ARG_TYPE_BLOCK,-1,"GROUP",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XREADGROUP_group_block_Subargs},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"BLOCK",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("noack",ARG_TYPE_PURE_TOKEN,-1,"NOACK",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("streams",ARG_TYPE_BLOCK,-1,"STREAMS",NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XREADGROUP_streams_Subargs},
};

/* XREADGROUP_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="If BLOCK option is specified and the timeout expired"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_0 = {XREADGROUP_ReplySchema_oneOf_0_elements,.length=2};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_0 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Stream id"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_0 = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_0_elements,.length=3};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_items reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_items = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_items_elements,.length=1};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of field-value pairs"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_items},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0 = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0_elements,.length=3};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_1 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_1 = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_1_elements,.length=1};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf array reply schema */
struct jsonObject *XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf[] = {
&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_0,
&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf_1,
};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_oneOf,.length=2}},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1 = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1_elements,.length=1};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items array reply schema */
struct jsonObject *XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items[] = {
&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_0,
&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items_1,
};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_items,.length=2}},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items_elements,.length=4};

/* XREADGROUP_ReplySchema_oneOf_1_additionalProperties reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_additionalProperties_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The entries reported for that key"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREADGROUP_ReplySchema_oneOf_1_additionalProperties_items},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1_additionalProperties = {XREADGROUP_ReplySchema_oneOf_1_additionalProperties_elements,.length=3};

/* XREADGROUP_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="A map of key-value elements when each element composed of key name and the entries reported for that key"},
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_OBJECT,"additionalProperties",.value.object=&XREADGROUP_ReplySchema_oneOf_1_additionalProperties},
};

struct jsonObject XREADGROUP_ReplySchema_oneOf_1 = {XREADGROUP_ReplySchema_oneOf_1_elements,.length=3};

/* XREADGROUP_ReplySchema_oneOf array reply schema */
struct jsonObject *XREADGROUP_ReplySchema_oneOf[] = {
&XREADGROUP_ReplySchema_oneOf_0,
&XREADGROUP_ReplySchema_oneOf_1,
};

/* XREADGROUP_ReplySchema reply schema */
struct jsonObjectElement XREADGROUP_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=XREADGROUP_ReplySchema_oneOf,.length=2}},
};

struct jsonObject XREADGROUP_ReplySchema = {XREADGROUP_ReplySchema_elements,.length=1};

/********** XREVRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XREVRANGE history */
commandHistory XREVRANGE_History[] = {
{"6.2.0","Added exclusive ranges."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XREVRANGE tips */
#define XREVRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XREVRANGE key specs */
keySpec XREVRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XREVRANGE argument table */
struct COMMAND_ARG XREVRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"COUNT",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* XREVRANGE_ReplySchema_items_items_0 reply schema */
struct jsonObjectElement XREVRANGE_ReplySchema_items_items_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Stream id"},
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"pattern",.value.string="[0-9]+-[0-9]+"},
};

struct jsonObject XREVRANGE_ReplySchema_items_items_0 = {XREVRANGE_ReplySchema_items_items_0_elements,.length=3};

/* XREVRANGE_ReplySchema_items_items_1_items reply schema */
struct jsonObjectElement XREVRANGE_ReplySchema_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject XREVRANGE_ReplySchema_items_items_1_items = {XREVRANGE_ReplySchema_items_items_1_items_elements,.length=1};

/* XREVRANGE_ReplySchema_items_items_1 reply schema */
struct jsonObjectElement XREVRANGE_ReplySchema_items_items_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Array of field-value pairs"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREVRANGE_ReplySchema_items_items_1_items},
};

struct jsonObject XREVRANGE_ReplySchema_items_items_1 = {XREVRANGE_ReplySchema_items_items_1_elements,.length=3};

/* XREVRANGE_ReplySchema_items_items array reply schema */
struct jsonObject *XREVRANGE_ReplySchema_items_items[] = {
&XREVRANGE_ReplySchema_items_items_0,
&XREVRANGE_ReplySchema_items_items_1,
};

/* XREVRANGE_ReplySchema_items reply schema */
struct jsonObjectElement XREVRANGE_ReplySchema_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=XREVRANGE_ReplySchema_items_items,.length=2}},
};

struct jsonObject XREVRANGE_ReplySchema_items = {XREVRANGE_ReplySchema_items_elements,.length=4};

/* XREVRANGE_ReplySchema reply schema */
struct jsonObjectElement XREVRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="An array of the entries with IDs matching the specified range"},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&XREVRANGE_ReplySchema_items},
};

struct jsonObject XREVRANGE_ReplySchema = {XREVRANGE_ReplySchema_elements,.length=3};

/********** XSETID ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XSETID history */
commandHistory XSETID_History[] = {
{"7.0.0","Added the `entries_added` and `max_deleted_entry_id` arguments."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XSETID tips */
#define XSETID_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XSETID key specs */
keySpec XSETID_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XSETID argument table */
struct COMMAND_ARG XSETID_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("last-id",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("entries-added",ARG_TYPE_INTEGER,-1,"ENTRIESADDED",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("max-deleted-id",ARG_TYPE_STRING,-1,"MAXDELETEDID",NULL,"7.0.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* XSETID_ReplySchema reply schema */
struct jsonObjectElement XSETID_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject XSETID_ReplySchema = {XSETID_ReplySchema_elements,.length=1};

/********** XTRIM ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* XTRIM history */
commandHistory XTRIM_History[] = {
{"6.2.0","Added the `MINID` trimming strategy and the `LIMIT` option."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* XTRIM tips */
const char *XTRIM_Tips[] = {
"nondeterministic_output",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* XTRIM key specs */
keySpec XTRIM_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* XTRIM trim strategy argument table */
struct COMMAND_ARG XTRIM_trim_strategy_Subargs[] = {
{MAKE_ARG("maxlen",ARG_TYPE_PURE_TOKEN,-1,"MAXLEN",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("minid",ARG_TYPE_PURE_TOKEN,-1,"MINID",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
};

/* XTRIM trim operator argument table */
struct COMMAND_ARG XTRIM_trim_operator_Subargs[] = {
{MAKE_ARG("equal",ARG_TYPE_PURE_TOKEN,-1,"=",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("approximately",ARG_TYPE_PURE_TOKEN,-1,"~",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* XTRIM trim argument table */
struct COMMAND_ARG XTRIM_trim_Subargs[] = {
{MAKE_ARG("strategy",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_NONE,2,NULL),.subargs=XTRIM_trim_strategy_Subargs},
{MAKE_ARG("operator",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,2,NULL),.subargs=XTRIM_trim_operator_Subargs},
{MAKE_ARG("threshold",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("count",ARG_TYPE_INTEGER,-1,"LIMIT",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
};

/* XTRIM argument table */
struct COMMAND_ARG XTRIM_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("trim",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_NONE,4,NULL),.subargs=XTRIM_trim_Subargs},
};

/* XTRIM_ReplySchema reply schema */
struct jsonObjectElement XTRIM_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The number of entries deleted from the stream."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject XTRIM_ReplySchema = {XTRIM_ReplySchema_elements,.length=3};

/********** APPEND ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* APPEND history */
#define APPEND_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* APPEND tips */
#define APPEND_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* APPEND key specs */
keySpec APPEND_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* APPEND argument table */
struct COMMAND_ARG APPEND_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* APPEND_ReplySchema reply schema */
struct jsonObjectElement APPEND_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The length of the string after the append operation."},
};

struct jsonObject APPEND_ReplySchema = {APPEND_ReplySchema_elements,.length=2};

/********** DECR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DECR history */
#define DECR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DECR tips */
#define DECR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DECR key specs */
keySpec DECR_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* DECR argument table */
struct COMMAND_ARG DECR_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* DECR_ReplySchema reply schema */
struct jsonObjectElement DECR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The value of the key after decrementing it."},
};

struct jsonObject DECR_ReplySchema = {DECR_ReplySchema_elements,.length=2};

/********** DECRBY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DECRBY history */
#define DECRBY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DECRBY tips */
#define DECRBY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DECRBY key specs */
keySpec DECRBY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* DECRBY argument table */
struct COMMAND_ARG DECRBY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("decrement",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* DECRBY_ReplySchema reply schema */
struct jsonObjectElement DECRBY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The value of the key after decrementing it."},
};

struct jsonObject DECRBY_ReplySchema = {DECRBY_ReplySchema_elements,.length=2};

/********** GET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GET history */
#define GET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GET tips */
#define GET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GET key specs */
keySpec GET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GET argument table */
struct COMMAND_ARG GET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GET_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GET_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value of the key."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GET_ReplySchema_oneOf_0 = {GET_ReplySchema_oneOf_0_elements,.length=2};

/* GET_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GET_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GET_ReplySchema_oneOf_1 = {GET_ReplySchema_oneOf_1_elements,.length=2};

/* GET_ReplySchema_oneOf array reply schema */
struct jsonObject *GET_ReplySchema_oneOf[] = {
&GET_ReplySchema_oneOf_0,
&GET_ReplySchema_oneOf_1,
};

/* GET_ReplySchema reply schema */
struct jsonObjectElement GET_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GET_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GET_ReplySchema = {GET_ReplySchema_elements,.length=1};

/********** GETDEL ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETDEL history */
#define GETDEL_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETDEL tips */
#define GETDEL_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETDEL key specs */
keySpec GETDEL_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETDEL argument table */
struct COMMAND_ARG GETDEL_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GETDEL_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GETDEL_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value of the key."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GETDEL_ReplySchema_oneOf_0 = {GETDEL_ReplySchema_oneOf_0_elements,.length=2};

/* GETDEL_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GETDEL_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GETDEL_ReplySchema_oneOf_1 = {GETDEL_ReplySchema_oneOf_1_elements,.length=2};

/* GETDEL_ReplySchema_oneOf array reply schema */
struct jsonObject *GETDEL_ReplySchema_oneOf[] = {
&GETDEL_ReplySchema_oneOf_0,
&GETDEL_ReplySchema_oneOf_1,
};

/* GETDEL_ReplySchema reply schema */
struct jsonObjectElement GETDEL_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GETDEL_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GETDEL_ReplySchema = {GETDEL_ReplySchema_elements,.length=1};

/********** GETEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETEX history */
#define GETEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETEX tips */
#define GETEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETEX key specs */
keySpec GETEX_Keyspecs[1] = {
{"RW and UPDATE because it changes the TTL",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETEX expiration argument table */
struct COMMAND_ARG GETEX_expiration_Subargs[] = {
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"EX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"PX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-seconds",ARG_TYPE_UNIX_TIME,-1,"EXAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,"PXAT",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("persist",ARG_TYPE_PURE_TOKEN,-1,"PERSIST",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GETEX argument table */
struct COMMAND_ARG GETEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("expiration",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,5,NULL),.subargs=GETEX_expiration_Subargs},
};

/* GETEX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GETEX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value of the key."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GETEX_ReplySchema_oneOf_0 = {GETEX_ReplySchema_oneOf_0_elements,.length=2};

/* GETEX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GETEX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GETEX_ReplySchema_oneOf_1 = {GETEX_ReplySchema_oneOf_1_elements,.length=2};

/* GETEX_ReplySchema_oneOf array reply schema */
struct jsonObject *GETEX_ReplySchema_oneOf[] = {
&GETEX_ReplySchema_oneOf_0,
&GETEX_ReplySchema_oneOf_1,
};

/* GETEX_ReplySchema reply schema */
struct jsonObjectElement GETEX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GETEX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GETEX_ReplySchema = {GETEX_ReplySchema_elements,.length=1};

/********** GETRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETRANGE history */
#define GETRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETRANGE tips */
#define GETRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETRANGE key specs */
keySpec GETRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETRANGE argument table */
struct COMMAND_ARG GETRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GETRANGE_ReplySchema reply schema */
struct jsonObjectElement GETRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."},
};

struct jsonObject GETRANGE_ReplySchema = {GETRANGE_ReplySchema_elements,.length=2};

/********** GETSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* GETSET history */
#define GETSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* GETSET tips */
#define GETSET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* GETSET key specs */
keySpec GETSET_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* GETSET argument table */
struct COMMAND_ARG GETSET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* GETSET_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement GETSET_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The old value stored at the key."},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject GETSET_ReplySchema_oneOf_0 = {GETSET_ReplySchema_oneOf_0_elements,.length=2};

/* GETSET_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement GETSET_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject GETSET_ReplySchema_oneOf_1 = {GETSET_ReplySchema_oneOf_1_elements,.length=2};

/* GETSET_ReplySchema_oneOf array reply schema */
struct jsonObject *GETSET_ReplySchema_oneOf[] = {
&GETSET_ReplySchema_oneOf_0,
&GETSET_ReplySchema_oneOf_1,
};

/* GETSET_ReplySchema reply schema */
struct jsonObjectElement GETSET_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=GETSET_ReplySchema_oneOf,.length=2}},
};

struct jsonObject GETSET_ReplySchema = {GETSET_ReplySchema_elements,.length=1};

/********** INCR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* INCR history */
#define INCR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* INCR tips */
#define INCR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* INCR key specs */
keySpec INCR_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* INCR argument table */
struct COMMAND_ARG INCR_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* INCR_ReplySchema reply schema */
struct jsonObjectElement INCR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The value of key after the increment"},
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject INCR_ReplySchema = {INCR_ReplySchema_elements,.length=2};

/********** INCRBY ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* INCRBY history */
#define INCRBY_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* INCRBY tips */
#define INCRBY_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* INCRBY key specs */
keySpec INCRBY_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* INCRBY argument table */
struct COMMAND_ARG INCRBY_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* INCRBY_ReplySchema reply schema */
struct jsonObjectElement INCRBY_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The value of the key after incrementing it."},
};

struct jsonObject INCRBY_ReplySchema = {INCRBY_ReplySchema_elements,.length=2};

/********** INCRBYFLOAT ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* INCRBYFLOAT history */
#define INCRBYFLOAT_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* INCRBYFLOAT tips */
#define INCRBYFLOAT_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* INCRBYFLOAT key specs */
keySpec INCRBYFLOAT_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* INCRBYFLOAT argument table */
struct COMMAND_ARG INCRBYFLOAT_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("increment",ARG_TYPE_DOUBLE,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* INCRBYFLOAT_ReplySchema reply schema */
struct jsonObjectElement INCRBYFLOAT_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The value of the key after incrementing it."},
};

struct jsonObject INCRBYFLOAT_ReplySchema = {INCRBYFLOAT_ReplySchema_elements,.length=2};

/********** LCS ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* LCS history */
#define LCS_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* LCS tips */
#define LCS_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* LCS key specs */
keySpec LCS_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={1,1,0}}
};
#endif

/* LCS argument table */
struct COMMAND_ARG LCS_Args[] = {
{MAKE_ARG("key1",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("key2",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("len",ARG_TYPE_PURE_TOKEN,-1,"LEN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("idx",ARG_TYPE_PURE_TOKEN,-1,"IDX",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("min-match-len",ARG_TYPE_INTEGER,-1,"MINMATCHLEN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("withmatchlen",ARG_TYPE_PURE_TOKEN,-1,"WITHMATCHLEN",NULL,NULL,CMD_ARG_OPTIONAL,0,NULL)},
};

/* LCS_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The longest common subsequence."},
};

struct jsonObject LCS_ReplySchema_oneOf_0 = {LCS_ReplySchema_oneOf_0_elements,.length=2};

/* LCS_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The length of the longest common subsequence when 'LEN' is given."},
};

struct jsonObject LCS_ReplySchema_oneOf_1 = {LCS_ReplySchema_oneOf_1_elements,.length=2};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_items reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_items = {LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_items_elements,.length=1};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_items_0 reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Matched range in the first string."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_OBJECT,"items",.value.object=&LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_items},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items_items_0 = {LCS_ReplySchema_oneOf_2_properties_matches_items_items_0_elements,.length=5};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_items reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_items = {LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_items_elements,.length=1};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_items_1 reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_STRING,"description",.value.string="Matched range in the second string."},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=2},
{JSON_TYPE_OBJECT,"items",.value.object=&LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_items},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items_items_1 = {LCS_ReplySchema_oneOf_2_properties_matches_items_items_1_elements,.length=5};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_items array reply schema */
struct jsonObject *LCS_ReplySchema_oneOf_2_properties_matches_items_items[] = {
&LCS_ReplySchema_oneOf_2_properties_matches_items_items_0,
&LCS_ReplySchema_oneOf_2_properties_matches_items_items_1,
};

/* LCS_ReplySchema_oneOf_2_properties_matches_items_additionalItems reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_additionalItems_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="The length of the match when 'WITHMATCHLEN' is given."},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items_additionalItems = {LCS_ReplySchema_oneOf_2_properties_matches_items_additionalItems_elements,.length=2};

/* LCS_ReplySchema_oneOf_2_properties_matches_items reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_items_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=2},
{JSON_TYPE_INTEGER,"maxItems",.value.integer=3},
{JSON_TYPE_ARRAY,"items",.value.array={.objects=LCS_ReplySchema_oneOf_2_properties_matches_items_items,.length=2}},
{JSON_TYPE_OBJECT,"additionalItems",.value.object=&LCS_ReplySchema_oneOf_2_properties_matches_items_additionalItems},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches_items = {LCS_ReplySchema_oneOf_2_properties_matches_items_elements,.length=5};

/* LCS_ReplySchema_oneOf_2_properties_matches reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_matches_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_OBJECT,"items",.value.object=&LCS_ReplySchema_oneOf_2_properties_matches_items},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_matches = {LCS_ReplySchema_oneOf_2_properties_matches_elements,.length=2};

/* LCS_ReplySchema_oneOf_2_properties_len reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_len_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_STRING,"description",.value.string="Length of the longest common subsequence."},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties_len = {LCS_ReplySchema_oneOf_2_properties_len_elements,.length=2};

/* LCS_ReplySchema_oneOf_2_properties reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_properties_elements[] = {
{JSON_TYPE_OBJECT,"matches",.value.object=&LCS_ReplySchema_oneOf_2_properties_matches},
{JSON_TYPE_OBJECT,"len",.value.object=&LCS_ReplySchema_oneOf_2_properties_len},
};

struct jsonObject LCS_ReplySchema_oneOf_2_properties = {LCS_ReplySchema_oneOf_2_properties_elements,.length=2};

/* LCS_ReplySchema_oneOf_2 reply schema */
struct jsonObjectElement LCS_ReplySchema_oneOf_2_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="object"},
{JSON_TYPE_STRING,"description",.value.string="Array with the LCS length and all the ranges in both the strings when 'IDX' is given. In RESP2 this is returned as a flat array"},
{JSON_TYPE_BOOLEAN,"additionalProperties",.value.boolean=0},
{JSON_TYPE_OBJECT,"properties",.value.object=&LCS_ReplySchema_oneOf_2_properties},
};

struct jsonObject LCS_ReplySchema_oneOf_2 = {LCS_ReplySchema_oneOf_2_elements,.length=4};

/* LCS_ReplySchema_oneOf array reply schema */
struct jsonObject *LCS_ReplySchema_oneOf[] = {
&LCS_ReplySchema_oneOf_0,
&LCS_ReplySchema_oneOf_1,
&LCS_ReplySchema_oneOf_2,
};

/* LCS_ReplySchema reply schema */
struct jsonObjectElement LCS_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=LCS_ReplySchema_oneOf,.length=3}},
};

struct jsonObject LCS_ReplySchema = {LCS_ReplySchema_elements,.length=1};

/********** MGET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MGET history */
#define MGET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MGET tips */
const char *MGET_Tips[] = {
"request_policy:multi_shard",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MGET key specs */
keySpec MGET_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* MGET argument table */
struct COMMAND_ARG MGET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* MGET_ReplySchema_items_oneOf_0 reply schema */
struct jsonObjectElement MGET_ReplySchema_items_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject MGET_ReplySchema_items_oneOf_0 = {MGET_ReplySchema_items_oneOf_0_elements,.length=1};

/* MGET_ReplySchema_items_oneOf_1 reply schema */
struct jsonObjectElement MGET_ReplySchema_items_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject MGET_ReplySchema_items_oneOf_1 = {MGET_ReplySchema_items_oneOf_1_elements,.length=1};

/* MGET_ReplySchema_items_oneOf array reply schema */
struct jsonObject *MGET_ReplySchema_items_oneOf[] = {
&MGET_ReplySchema_items_oneOf_0,
&MGET_ReplySchema_items_oneOf_1,
};

/* MGET_ReplySchema_items reply schema */
struct jsonObjectElement MGET_ReplySchema_items_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=MGET_ReplySchema_items_oneOf,.length=2}},
};

struct jsonObject MGET_ReplySchema_items = {MGET_ReplySchema_items_elements,.length=1};

/* MGET_ReplySchema reply schema */
struct jsonObjectElement MGET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="List of values at the specified keys."},
{JSON_TYPE_STRING,"type",.value.string="array"},
{JSON_TYPE_INTEGER,"minItems",.value.integer=1},
{JSON_TYPE_OBJECT,"items",.value.object=&MGET_ReplySchema_items},
};

struct jsonObject MGET_ReplySchema = {MGET_ReplySchema_elements,.length=4};

/********** MSET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MSET history */
#define MSET_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MSET tips */
const char *MSET_Tips[] = {
"request_policy:multi_shard",
"response_policy:all_succeeded",
};
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MSET key specs */
keySpec MSET_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,2,0}}
};
#endif

/* MSET data argument table */
struct COMMAND_ARG MSET_data_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MSET argument table */
struct COMMAND_ARG MSET_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=MSET_data_Subargs},
};

/* MSET_ReplySchema reply schema */
struct jsonObjectElement MSET_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MSET_ReplySchema = {MSET_ReplySchema_elements,.length=1};

/********** MSETNX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MSETNX history */
#define MSETNX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MSETNX tips */
#define MSETNX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MSETNX key specs */
keySpec MSETNX_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,2,0}}
};
#endif

/* MSETNX data argument table */
struct COMMAND_ARG MSETNX_data_Subargs[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* MSETNX argument table */
struct COMMAND_ARG MSETNX_Args[] = {
{MAKE_ARG("data",ARG_TYPE_BLOCK,-1,NULL,NULL,NULL,CMD_ARG_MULTIPLE,2,NULL),.subargs=MSETNX_data_Subargs},
};

/* MSETNX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement MSETNX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="No key was set (at least one key already existed)."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject MSETNX_ReplySchema_oneOf_0 = {MSETNX_ReplySchema_oneOf_0_elements,.length=2};

/* MSETNX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement MSETNX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="All the keys were set."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject MSETNX_ReplySchema_oneOf_1 = {MSETNX_ReplySchema_oneOf_1_elements,.length=2};

/* MSETNX_ReplySchema_oneOf array reply schema */
struct jsonObject *MSETNX_ReplySchema_oneOf[] = {
&MSETNX_ReplySchema_oneOf_0,
&MSETNX_ReplySchema_oneOf_1,
};

/* MSETNX_ReplySchema reply schema */
struct jsonObjectElement MSETNX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=MSETNX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject MSETNX_ReplySchema = {MSETNX_ReplySchema_elements,.length=1};

/********** PSETEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* PSETEX history */
#define PSETEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* PSETEX tips */
#define PSETEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* PSETEX key specs */
keySpec PSETEX_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* PSETEX argument table */
struct COMMAND_ARG PSETEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* PSETEX_ReplySchema reply schema */
struct jsonObjectElement PSETEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject PSETEX_ReplySchema = {PSETEX_ReplySchema_elements,.length=1};

/********** SET ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SET history */
commandHistory SET_History[] = {
{"2.6.12","Added the `EX`, `PX`, `NX` and `XX` options."},
{"6.0.0","Added the `KEEPTTL` option."},
{"6.2.0","Added the `GET`, `EXAT` and `PXAT` option."},
{"7.0.0","Allowed the `NX` and `GET` options to be used together."},
};
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SET tips */
#define SET_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SET key specs */
keySpec SET_Keyspecs[1] = {
{"RW and ACCESS due to the optional `GET` argument",CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE|CMD_KEY_VARIABLE_FLAGS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SET condition argument table */
struct COMMAND_ARG SET_condition_Subargs[] = {
{MAKE_ARG("nx",ARG_TYPE_PURE_TOKEN,-1,"NX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("xx",ARG_TYPE_PURE_TOKEN,-1,"XX",NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SET expiration argument table */
struct COMMAND_ARG SET_expiration_Subargs[] = {
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,"EX",NULL,"2.6.12",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("milliseconds",ARG_TYPE_INTEGER,-1,"PX",NULL,"2.6.12",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-seconds",ARG_TYPE_UNIX_TIME,-1,"EXAT",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("unix-time-milliseconds",ARG_TYPE_UNIX_TIME,-1,"PXAT",NULL,"6.2.0",CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("keepttl",ARG_TYPE_PURE_TOKEN,-1,"KEEPTTL",NULL,"6.0.0",CMD_ARG_NONE,0,NULL)},
};

/* SET argument table */
struct COMMAND_ARG SET_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("condition",ARG_TYPE_ONEOF,-1,NULL,NULL,"2.6.12",CMD_ARG_OPTIONAL,2,NULL),.subargs=SET_condition_Subargs},
{MAKE_ARG("get",ARG_TYPE_PURE_TOKEN,-1,"GET",NULL,"6.2.0",CMD_ARG_OPTIONAL,0,NULL)},
{MAKE_ARG("expiration",ARG_TYPE_ONEOF,-1,NULL,NULL,NULL,CMD_ARG_OPTIONAL,5,NULL),.subargs=SET_expiration_Subargs},
};

/* SET_ReplySchema_anyOf_0 reply schema */
struct jsonObjectElement SET_ReplySchema_anyOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="`GET` not given: Operation was aborted (conflict with one of the `XX`/`NX` options)."},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SET_ReplySchema_anyOf_0 = {SET_ReplySchema_anyOf_0_elements,.length=2};

/* SET_ReplySchema_anyOf_1 reply schema */
struct jsonObjectElement SET_ReplySchema_anyOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="`GET` not given: The key was set."},
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SET_ReplySchema_anyOf_1 = {SET_ReplySchema_anyOf_1_elements,.length=2};

/* SET_ReplySchema_anyOf_2 reply schema */
struct jsonObjectElement SET_ReplySchema_anyOf_2_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="`GET` given: The key didn't exist before the `SET`"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject SET_ReplySchema_anyOf_2 = {SET_ReplySchema_anyOf_2_elements,.length=2};

/* SET_ReplySchema_anyOf_3 reply schema */
struct jsonObjectElement SET_ReplySchema_anyOf_3_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="`GET` given: The previous value of the key"},
{JSON_TYPE_STRING,"type",.value.string="string"},
};

struct jsonObject SET_ReplySchema_anyOf_3 = {SET_ReplySchema_anyOf_3_elements,.length=2};

/* SET_ReplySchema_anyOf array reply schema */
struct jsonObject *SET_ReplySchema_anyOf[] = {
&SET_ReplySchema_anyOf_0,
&SET_ReplySchema_anyOf_1,
&SET_ReplySchema_anyOf_2,
&SET_ReplySchema_anyOf_3,
};

/* SET_ReplySchema reply schema */
struct jsonObjectElement SET_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"anyOf",.value.array={.objects=SET_ReplySchema_anyOf,.length=4}},
};

struct jsonObject SET_ReplySchema = {SET_ReplySchema_elements,.length=1};

/********** SETEX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SETEX history */
#define SETEX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SETEX tips */
#define SETEX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SETEX key specs */
keySpec SETEX_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SETEX argument table */
struct COMMAND_ARG SETEX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("seconds",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SETEX_ReplySchema reply schema */
struct jsonObjectElement SETEX_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject SETEX_ReplySchema = {SETEX_ReplySchema_elements,.length=1};

/********** SETNX ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SETNX history */
#define SETNX_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SETNX tips */
#define SETNX_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SETNX key specs */
keySpec SETNX_Keyspecs[1] = {
{NULL,CMD_KEY_OW|CMD_KEY_INSERT,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SETNX argument table */
struct COMMAND_ARG SETNX_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SETNX_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement SETNX_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key was set."},
{JSON_TYPE_INTEGER,"const",.value.integer=0},
};

struct jsonObject SETNX_ReplySchema_oneOf_0 = {SETNX_ReplySchema_oneOf_0_elements,.length=2};

/* SETNX_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement SETNX_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The key was not set."},
{JSON_TYPE_INTEGER,"const",.value.integer=1},
};

struct jsonObject SETNX_ReplySchema_oneOf_1 = {SETNX_ReplySchema_oneOf_1_elements,.length=2};

/* SETNX_ReplySchema_oneOf array reply schema */
struct jsonObject *SETNX_ReplySchema_oneOf[] = {
&SETNX_ReplySchema_oneOf_0,
&SETNX_ReplySchema_oneOf_1,
};

/* SETNX_ReplySchema reply schema */
struct jsonObjectElement SETNX_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=SETNX_ReplySchema_oneOf,.length=2}},
};

struct jsonObject SETNX_ReplySchema = {SETNX_ReplySchema_elements,.length=1};

/********** SETRANGE ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SETRANGE history */
#define SETRANGE_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SETRANGE tips */
#define SETRANGE_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SETRANGE key specs */
keySpec SETRANGE_Keyspecs[1] = {
{NULL,CMD_KEY_RW|CMD_KEY_UPDATE,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SETRANGE argument table */
struct COMMAND_ARG SETRANGE_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("offset",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("value",ARG_TYPE_STRING,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SETRANGE_ReplySchema reply schema */
struct jsonObjectElement SETRANGE_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Length of the string after it was modified by the command."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject SETRANGE_ReplySchema = {SETRANGE_ReplySchema_elements,.length=3};

/********** STRLEN ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* STRLEN history */
#define STRLEN_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* STRLEN tips */
#define STRLEN_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* STRLEN key specs */
keySpec STRLEN_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* STRLEN argument table */
struct COMMAND_ARG STRLEN_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* STRLEN_ReplySchema reply schema */
struct jsonObjectElement STRLEN_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The length of the string value stored at key, or 0 when key does not exist."},
{JSON_TYPE_STRING,"type",.value.string="integer"},
{JSON_TYPE_INTEGER,"minimum",.value.integer=0},
};

struct jsonObject STRLEN_ReplySchema = {STRLEN_ReplySchema_elements,.length=3};

/********** SUBSTR ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* SUBSTR history */
#define SUBSTR_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* SUBSTR tips */
#define SUBSTR_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* SUBSTR key specs */
keySpec SUBSTR_Keyspecs[1] = {
{NULL,CMD_KEY_RO|CMD_KEY_ACCESS,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={0,1,0}}
};
#endif

/* SUBSTR argument table */
struct COMMAND_ARG SUBSTR_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("start",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
{MAKE_ARG("end",ARG_TYPE_INTEGER,-1,NULL,NULL,NULL,CMD_ARG_NONE,0,NULL)},
};

/* SUBSTR_ReplySchema reply schema */
struct jsonObjectElement SUBSTR_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"type",.value.string="string"},
{JSON_TYPE_STRING,"description",.value.string="The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."},
};

struct jsonObject SUBSTR_ReplySchema = {SUBSTR_ReplySchema_elements,.length=2};

/********** DISCARD ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* DISCARD history */
#define DISCARD_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* DISCARD tips */
#define DISCARD_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* DISCARD key specs */
#define DISCARD_Keyspecs NULL
#endif

/* DISCARD_ReplySchema reply schema */
struct jsonObjectElement DISCARD_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject DISCARD_ReplySchema = {DISCARD_ReplySchema_elements,.length=1};

/********** EXEC ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* EXEC history */
#define EXEC_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* EXEC tips */
#define EXEC_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* EXEC key specs */
#define EXEC_Keyspecs NULL
#endif

/* EXEC_ReplySchema_oneOf_0 reply schema */
struct jsonObjectElement EXEC_ReplySchema_oneOf_0_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="Each element being the reply to each of the commands in the atomic transaction."},
{JSON_TYPE_STRING,"type",.value.string="array"},
};

struct jsonObject EXEC_ReplySchema_oneOf_0 = {EXEC_ReplySchema_oneOf_0_elements,.length=2};

/* EXEC_ReplySchema_oneOf_1 reply schema */
struct jsonObjectElement EXEC_ReplySchema_oneOf_1_elements[] = {
{JSON_TYPE_STRING,"description",.value.string="The transaction was aborted because a `WATCH`ed key was touched"},
{JSON_TYPE_STRING,"type",.value.string="null"},
};

struct jsonObject EXEC_ReplySchema_oneOf_1 = {EXEC_ReplySchema_oneOf_1_elements,.length=2};

/* EXEC_ReplySchema_oneOf array reply schema */
struct jsonObject *EXEC_ReplySchema_oneOf[] = {
&EXEC_ReplySchema_oneOf_0,
&EXEC_ReplySchema_oneOf_1,
};

/* EXEC_ReplySchema reply schema */
struct jsonObjectElement EXEC_ReplySchema_elements[] = {
{JSON_TYPE_ARRAY,"oneOf",.value.array={.objects=EXEC_ReplySchema_oneOf,.length=2}},
};

struct jsonObject EXEC_ReplySchema = {EXEC_ReplySchema_elements,.length=1};

/********** MULTI ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* MULTI history */
#define MULTI_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* MULTI tips */
#define MULTI_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* MULTI key specs */
#define MULTI_Keyspecs NULL
#endif

/* MULTI_ReplySchema reply schema */
struct jsonObjectElement MULTI_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject MULTI_ReplySchema = {MULTI_ReplySchema_elements,.length=1};

/********** UNWATCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* UNWATCH history */
#define UNWATCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* UNWATCH tips */
#define UNWATCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* UNWATCH key specs */
#define UNWATCH_Keyspecs NULL
#endif

/* UNWATCH_ReplySchema reply schema */
struct jsonObjectElement UNWATCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject UNWATCH_ReplySchema = {UNWATCH_ReplySchema_elements,.length=1};

/********** WATCH ********************/

#ifndef SKIP_CMD_HISTORY_TABLE
/* WATCH history */
#define WATCH_History NULL
#endif

#ifndef SKIP_CMD_TIPS_TABLE
/* WATCH tips */
#define WATCH_Tips NULL
#endif

#ifndef SKIP_CMD_KEY_SPECS_TABLE
/* WATCH key specs */
keySpec WATCH_Keyspecs[1] = {
{NULL,CMD_KEY_RO,KSPEC_BS_INDEX,.bs.index={1},KSPEC_FK_RANGE,.fk.range={-1,1,0}}
};
#endif

/* WATCH argument table */
struct COMMAND_ARG WATCH_Args[] = {
{MAKE_ARG("key",ARG_TYPE_KEY,0,NULL,NULL,NULL,CMD_ARG_MULTIPLE,0,NULL)},
};

/* WATCH_ReplySchema reply schema */
struct jsonObjectElement WATCH_ReplySchema_elements[] = {
{JSON_TYPE_STRING,"const",.value.string="OK"},
};

struct jsonObject WATCH_ReplySchema = {WATCH_ReplySchema_elements,.length=1};

/* Main command table */
struct COMMAND_STRUCT redisCommandTable[] = {
/* bitmap */
{MAKE_CMD("bitcount","Counts the number of set bits (population counting) in a string.","O(N)","2.6.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,BITCOUNT_History,1,BITCOUNT_Tips,0,bitcountCommand,-2,CMD_READONLY,ACL_CATEGORY_BITMAP,BITCOUNT_Keyspecs,1,NULL,2),.args=BITCOUNT_Args,.reply_schema=&BITCOUNT_ReplySchema},
{MAKE_CMD("bitfield","Performs arbitrary bitfield integer operations on strings.","O(1) for each subcommand specified","3.2.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,BITFIELD_History,0,BITFIELD_Tips,0,bitfieldCommand,-2,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_BITMAP,BITFIELD_Keyspecs,1,bitfieldGetKeys,2),.args=BITFIELD_Args,.reply_schema=&BITFIELD_ReplySchema},
{MAKE_CMD("bitfield_ro","Performs arbitrary read-only bitfield integer operations on strings.","O(1) for each subcommand specified","6.0.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,BITFIELD_RO_History,0,BITFIELD_RO_Tips,0,bitfieldroCommand,-2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_BITMAP,BITFIELD_RO_Keyspecs,1,NULL,2),.args=BITFIELD_RO_Args,.reply_schema=&BITFIELD_RO_ReplySchema},
{MAKE_CMD("bitop","Performs bitwise operations on multiple strings, and stores the result.","O(N)","2.6.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,BITOP_History,0,BITOP_Tips,0,bitopCommand,-4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_BITMAP,BITOP_Keyspecs,2,NULL,3),.args=BITOP_Args,.reply_schema=&BITOP_ReplySchema},
{MAKE_CMD("bitpos","Finds the first set (1) or clear (0) bit in a string.","O(N)","2.8.7",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,BITPOS_History,1,BITPOS_Tips,0,bitposCommand,-3,CMD_READONLY,ACL_CATEGORY_BITMAP,BITPOS_Keyspecs,1,NULL,3),.args=BITPOS_Args,.reply_schema=&BITPOS_ReplySchema},
{MAKE_CMD("getbit","Returns a bit value by offset.","O(1)","2.2.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,GETBIT_History,0,GETBIT_Tips,0,getbitCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_BITMAP,GETBIT_Keyspecs,1,NULL,2),.args=GETBIT_Args,.reply_schema=&GETBIT_ReplySchema},
{MAKE_CMD("setbit","Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.","O(1)","2.2.0",CMD_DOC_NONE,NULL,NULL,"bitmap",COMMAND_GROUP_BITMAP,SETBIT_History,0,SETBIT_Tips,0,setbitCommand,4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_BITMAP,SETBIT_Keyspecs,1,NULL,3),.args=SETBIT_Args,.reply_schema=&SETBIT_ReplySchema},
/* cluster */
{MAKE_CMD("asking","Signals that a cluster client is following an -ASK redirect.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,ASKING_History,0,ASKING_Tips,0,askingCommand,1,CMD_FAST,ACL_CATEGORY_CONNECTION,ASKING_Keyspecs,0,NULL,0),.reply_schema=&ASKING_ReplySchema},
{MAKE_CMD("cluster","A container for Redis Cluster commands.","Depends on subcommand.","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,CLUSTER_History,0,CLUSTER_Tips,0,NULL,-2,0,0,CLUSTER_Keyspecs,0,NULL,0),.subcommands=CLUSTER_Subcommands},
{MAKE_CMD("readonly","Enables read-only queries for a connection to a Redis Cluster replica node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,READONLY_History,0,READONLY_Tips,0,readonlyCommand,1,CMD_FAST|CMD_LOADING|CMD_STALE,ACL_CATEGORY_CONNECTION,READONLY_Keyspecs,0,NULL,0),.reply_schema=&READONLY_ReplySchema},
{MAKE_CMD("readwrite","Enables read-write queries for a connection to a Reids Cluster replica node.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"cluster",COMMAND_GROUP_CLUSTER,READWRITE_History,0,READWRITE_Tips,0,readwriteCommand,1,CMD_FAST|CMD_LOADING|CMD_STALE,ACL_CATEGORY_CONNECTION,READWRITE_Keyspecs,0,NULL,0),.reply_schema=&READWRITE_ReplySchema},
/* connection */
{MAKE_CMD("auth","Authenticates the connection.","O(N) where N is the number of passwords defined for the user","1.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,AUTH_History,1,AUTH_Tips,0,authCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_NO_AUTH|CMD_SENTINEL|CMD_ALLOW_BUSY,ACL_CATEGORY_CONNECTION,AUTH_Keyspecs,0,NULL,2),.args=AUTH_Args,.reply_schema=&AUTH_ReplySchema},
{MAKE_CMD("client","A container for client connection commands.","Depends on subcommand.","2.4.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,CLIENT_History,0,CLIENT_Tips,0,NULL,-2,CMD_SENTINEL,0,CLIENT_Keyspecs,0,NULL,0),.subcommands=CLIENT_Subcommands},
{MAKE_CMD("echo","Returns the given string.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,ECHO_History,0,ECHO_Tips,0,echoCommand,2,CMD_LOADING|CMD_STALE|CMD_FAST,ACL_CATEGORY_CONNECTION,ECHO_Keyspecs,0,NULL,1),.args=ECHO_Args,.reply_schema=&ECHO_ReplySchema},
{MAKE_CMD("hello","Handshakes with the Redis server.","O(1)","6.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,HELLO_History,1,HELLO_Tips,0,helloCommand,-1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_NO_AUTH|CMD_SENTINEL|CMD_ALLOW_BUSY,ACL_CATEGORY_CONNECTION,HELLO_Keyspecs,0,NULL,1),.args=HELLO_Args,.reply_schema=&HELLO_ReplySchema},
{MAKE_CMD("ping","Returns the server's liveliness response.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,PING_History,0,PING_Tips,2,pingCommand,-1,CMD_FAST|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,PING_Keyspecs,0,NULL,1),.args=PING_Args,.reply_schema=&PING_ReplySchema},
{MAKE_CMD("quit","Closes the connection.","O(1)","1.0.0",CMD_DOC_DEPRECATED,"just closing the connection","7.2.0","connection",COMMAND_GROUP_CONNECTION,QUIT_History,0,QUIT_Tips,0,quitCommand,-1,CMD_ALLOW_BUSY|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_NO_AUTH,ACL_CATEGORY_CONNECTION,QUIT_Keyspecs,0,NULL,0),.reply_schema=&QUIT_ReplySchema},
{MAKE_CMD("reset","Resets the connection.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,RESET_History,0,RESET_Tips,0,resetCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_NO_AUTH|CMD_ALLOW_BUSY,ACL_CATEGORY_CONNECTION,RESET_Keyspecs,0,NULL,0),.reply_schema=&RESET_ReplySchema},
{MAKE_CMD("select","Changes the selected database.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"connection",COMMAND_GROUP_CONNECTION,SELECT_History,0,SELECT_Tips,0,selectCommand,2,CMD_LOADING|CMD_STALE|CMD_FAST,ACL_CATEGORY_CONNECTION,SELECT_Keyspecs,0,NULL,1),.args=SELECT_Args,.reply_schema=&SELECT_ReplySchema},
/* generic */
{MAKE_CMD("copy","Copies the value of a key to a new key.","O(N) worst case for collections, where N is the number of nested items. O(1) for string values.","6.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,COPY_History,0,COPY_Tips,0,copyCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_KEYSPACE,COPY_Keyspecs,2,NULL,4),.args=COPY_Args,.reply_schema=&COPY_ReplySchema},
{MAKE_CMD("del","Deletes one or more keys.","O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,DEL_History,0,DEL_Tips,2,delCommand,-2,CMD_WRITE,ACL_CATEGORY_KEYSPACE,DEL_Keyspecs,1,NULL,1),.args=DEL_Args,.reply_schema=&DEL_ReplySchema},
{MAKE_CMD("dump","Returns a serialized representation of the value stored at a key.","O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,DUMP_History,0,DUMP_Tips,1,dumpCommand,2,CMD_READONLY,ACL_CATEGORY_KEYSPACE,DUMP_Keyspecs,1,NULL,1),.args=DUMP_Args,.reply_schema=&DUMP_ReplySchema},
{MAKE_CMD("exists","Determines whether one or more keys exist.","O(N) where N is the number of keys to check.","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,EXISTS_History,1,EXISTS_Tips,2,existsCommand,-2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,EXISTS_Keyspecs,1,NULL,1),.args=EXISTS_Args,.reply_schema=&EXISTS_ReplySchema},
{MAKE_CMD("expire","Sets the expiration time of a key in seconds.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,EXPIRE_History,1,EXPIRE_Tips,0,expireCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,EXPIRE_Keyspecs,1,NULL,3),.args=EXPIRE_Args,.reply_schema=&EXPIRE_ReplySchema},
{MAKE_CMD("expireat","Sets the expiration time of a key to a Unix timestamp.","O(1)","1.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,EXPIREAT_History,1,EXPIREAT_Tips,0,expireatCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,EXPIREAT_Keyspecs,1,NULL,3),.args=EXPIREAT_Args,.reply_schema=&EXPIREAT_ReplySchema},
{MAKE_CMD("expiretime","Returns the expiration time of a key as a Unix timestamp.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,EXPIRETIME_History,0,EXPIRETIME_Tips,0,expiretimeCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,EXPIRETIME_Keyspecs,1,NULL,1),.args=EXPIRETIME_Args,.reply_schema=&EXPIRETIME_ReplySchema},
{MAKE_CMD("keys","Returns all key names that match a pattern.","O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,KEYS_History,0,KEYS_Tips,2,keysCommand,2,CMD_READONLY,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,KEYS_Keyspecs,0,NULL,1),.args=KEYS_Args,.reply_schema=&KEYS_ReplySchema},
{MAKE_CMD("migrate","Atomically transfers a key from one Redis instance to another.","This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,MIGRATE_History,4,MIGRATE_Tips,1,migrateCommand,-6,CMD_WRITE,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,MIGRATE_Keyspecs,2,migrateGetKeys,9),.args=MIGRATE_Args,.reply_schema=&MIGRATE_ReplySchema},
{MAKE_CMD("move","Moves a key to another database.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,MOVE_History,0,MOVE_Tips,0,moveCommand,3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,MOVE_Keyspecs,1,NULL,2),.args=MOVE_Args,.reply_schema=&MOVE_ReplySchema},
{MAKE_CMD("object","A container for object introspection commands.","Depends on subcommand.","2.2.3",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,OBJECT_History,0,OBJECT_Tips,0,NULL,-2,0,0,OBJECT_Keyspecs,0,NULL,0),.subcommands=OBJECT_Subcommands},
{MAKE_CMD("persist","Removes the expiration time of a key.","O(1)","2.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,PERSIST_History,0,PERSIST_Tips,0,persistCommand,2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,PERSIST_Keyspecs,1,NULL,1),.args=PERSIST_Args,.reply_schema=&PERSIST_ReplySchema},
{MAKE_CMD("pexpire","Sets the expiration time of a key in milliseconds.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,PEXPIRE_History,1,PEXPIRE_Tips,0,pexpireCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,PEXPIRE_Keyspecs,1,NULL,3),.args=PEXPIRE_Args,.reply_schema=&PEXPIRE_ReplySchema},
{MAKE_CMD("pexpireat","Sets the expiration time of a key to a Unix milliseconds timestamp.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,PEXPIREAT_History,1,PEXPIREAT_Tips,0,pexpireatCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,PEXPIREAT_Keyspecs,1,NULL,3),.args=PEXPIREAT_Args,.reply_schema=&PEXPIREAT_ReplySchema},
{MAKE_CMD("pexpiretime","Returns the expiration time of a key as a Unix milliseconds timestamp.","O(1)","7.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,PEXPIRETIME_History,0,PEXPIRETIME_Tips,0,pexpiretimeCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,PEXPIRETIME_Keyspecs,1,NULL,1),.args=PEXPIRETIME_Args,.reply_schema=&PEXPIRETIME_ReplySchema},
{MAKE_CMD("pttl","Returns the expiration time in milliseconds of a key.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,PTTL_History,1,PTTL_Tips,1,pttlCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,PTTL_Keyspecs,1,NULL,1),.args=PTTL_Args,.reply_schema=&PTTL_ReplySchema},
{MAKE_CMD("randomkey","Returns a random key name from the database.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,RANDOMKEY_History,0,RANDOMKEY_Tips,3,randomkeyCommand,1,CMD_READONLY|CMD_TOUCHES_ARBITRARY_KEYS,ACL_CATEGORY_KEYSPACE,RANDOMKEY_Keyspecs,0,NULL,0),.reply_schema=&RANDOMKEY_ReplySchema},
{MAKE_CMD("rename","Renames a key and overwrites the destination.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,RENAME_History,0,RENAME_Tips,0,renameCommand,3,CMD_WRITE,ACL_CATEGORY_KEYSPACE,RENAME_Keyspecs,2,NULL,2),.args=RENAME_Args,.reply_schema=&RENAME_ReplySchema},
{MAKE_CMD("renamenx","Renames a key only when the target key name doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,RENAMENX_History,1,RENAMENX_Tips,0,renamenxCommand,3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,RENAMENX_Keyspecs,2,NULL,2),.args=RENAMENX_Args,.reply_schema=&RENAMENX_ReplySchema},
{MAKE_CMD("restore","Creates a key from the serialized representation of a value.","O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","2.6.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,RESTORE_History,3,RESTORE_Tips,0,restoreCommand,-4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,RESTORE_Keyspecs,1,NULL,7),.args=RESTORE_Args,.reply_schema=&RESTORE_ReplySchema},
{MAKE_CMD("scan","Iterates over the key names in the database.","O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","2.8.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,SCAN_History,1,SCAN_Tips,3,scanCommand,-2,CMD_READONLY|CMD_TOUCHES_ARBITRARY_KEYS,ACL_CATEGORY_KEYSPACE,SCAN_Keyspecs,0,NULL,4),.args=SCAN_Args,.reply_schema=&SCAN_ReplySchema},
{MAKE_CMD("sort","Sorts the elements in a list, a set, or a sorted set, optionally storing the result.","O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,SORT_History,0,SORT_Tips,0,sortCommand,-2,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SET|ACL_CATEGORY_SORTEDSET|ACL_CATEGORY_LIST|ACL_CATEGORY_DANGEROUS,SORT_Keyspecs,3,sortGetKeys,7),.args=SORT_Args,.reply_schema=&SORT_ReplySchema},
{MAKE_CMD("sort_ro","Returns the sorted elements of a list, a set, or a sorted set.","O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","7.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,SORT_RO_History,0,SORT_RO_Tips,0,sortroCommand,-2,CMD_READONLY,ACL_CATEGORY_SET|ACL_CATEGORY_SORTEDSET|ACL_CATEGORY_LIST|ACL_CATEGORY_DANGEROUS,SORT_RO_Keyspecs,2,sortROGetKeys,6),.args=SORT_RO_Args,.reply_schema=&SORT_RO_ReplySchema},
{MAKE_CMD("touch","Returns the number of existing keys out of those specified after updating the time they were last accessed.","O(N) where N is the number of keys that will be touched.","3.2.1",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,TOUCH_History,0,TOUCH_Tips,2,touchCommand,-2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,TOUCH_Keyspecs,1,NULL,1),.args=TOUCH_Args,.reply_schema=&TOUCH_ReplySchema},
{MAKE_CMD("ttl","Returns the expiration time in seconds of a key.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,TTL_History,1,TTL_Tips,1,ttlCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,TTL_Keyspecs,1,NULL,1),.args=TTL_Args,.reply_schema=&TTL_ReplySchema},
{MAKE_CMD("type","Determines the type of value stored at a key.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,TYPE_History,0,TYPE_Tips,0,typeCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,TYPE_Keyspecs,1,NULL,1),.args=TYPE_Args,.reply_schema=&TYPE_ReplySchema},
{MAKE_CMD("unlink","Asynchronously deletes one or more keys.","O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.","4.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,UNLINK_History,0,UNLINK_Tips,2,unlinkCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE,UNLINK_Keyspecs,1,NULL,1),.args=UNLINK_Args,.reply_schema=&UNLINK_ReplySchema},
{MAKE_CMD("wait","Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.","O(1)","3.0.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,WAIT_History,0,WAIT_Tips,2,waitCommand,3,CMD_BLOCKING,ACL_CATEGORY_CONNECTION,WAIT_Keyspecs,0,NULL,2),.args=WAIT_Args,.reply_schema=&WAIT_ReplySchema},
{MAKE_CMD("waitaof","Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.","O(1)","7.2.0",CMD_DOC_NONE,NULL,NULL,"generic",COMMAND_GROUP_GENERIC,WAITAOF_History,0,WAITAOF_Tips,2,waitaofCommand,4,CMD_BLOCKING,ACL_CATEGORY_CONNECTION,WAITAOF_Keyspecs,0,NULL,3),.args=WAITAOF_Args,.reply_schema=&WAITAOF_ReplySchema},
/* geo */
{MAKE_CMD("geoadd","Adds one or more members to a geospatial index. The key is created if it doesn't exist.","O(log(N)) for each item added, where N is the number of elements in the sorted set.","3.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEOADD_History,1,GEOADD_Tips,0,geoaddCommand,-5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_GEO,GEOADD_Keyspecs,1,NULL,4),.args=GEOADD_Args,.reply_schema=&GEOADD_ReplySchema},
{MAKE_CMD("geodist","Returns the distance between two members of a geospatial index.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEODIST_History,0,GEODIST_Tips,0,geodistCommand,-4,CMD_READONLY,ACL_CATEGORY_GEO,GEODIST_Keyspecs,1,NULL,4),.args=GEODIST_Args,.reply_schema=&GEODIST_ReplySchema},
{MAKE_CMD("geohash","Returns members from a geospatial index as geohash strings.","O(1) for each member requested.","3.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEOHASH_History,0,GEOHASH_Tips,0,geohashCommand,-2,CMD_READONLY,ACL_CATEGORY_GEO,GEOHASH_Keyspecs,1,NULL,2),.args=GEOHASH_Args,.reply_schema=&GEOHASH_ReplySchema},
{MAKE_CMD("geopos","Returns the longitude and latitude of members from a geospatial index.","O(1) for each member requested.","3.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEOPOS_History,0,GEOPOS_Tips,0,geoposCommand,-2,CMD_READONLY,ACL_CATEGORY_GEO,GEOPOS_Keyspecs,1,NULL,2),.args=GEOPOS_Args,.reply_schema=&GEOPOS_ReplySchema},
{MAKE_CMD("georadius","Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.","O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","3.2.0",CMD_DOC_DEPRECATED,"`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument","6.2.0","geo",COMMAND_GROUP_GEO,GEORADIUS_History,2,GEORADIUS_Tips,0,georadiusCommand,-6,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_GEO,GEORADIUS_Keyspecs,3,georadiusGetKeys,11),.args=GEORADIUS_Args,.reply_schema=&GEORADIUS_ReplySchema},
{MAKE_CMD("georadiusbymember","Queries a geospatial index for members within a distance from a member, optionally stores the result.","O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","3.2.0",CMD_DOC_DEPRECATED,"`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` and `FROMMEMBER` arguments","6.2.0","geo",COMMAND_GROUP_GEO,GEORADIUSBYMEMBER_History,2,GEORADIUSBYMEMBER_Tips,0,georadiusbymemberCommand,-5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_GEO,GEORADIUSBYMEMBER_Keyspecs,3,georadiusGetKeys,10),.args=GEORADIUSBYMEMBER_Args,.reply_schema=&GEORADIUSBYMEMBER_ReplySchema},
{MAKE_CMD("georadiusbymember_ro","Returns members from a geospatial index that are within a distance from a member.","O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","3.2.10",CMD_DOC_DEPRECATED,"`GEOSEARCH` with the `BYRADIUS` and `FROMMEMBER` arguments","6.2.0","geo",COMMAND_GROUP_GEO,GEORADIUSBYMEMBER_RO_History,2,GEORADIUSBYMEMBER_RO_Tips,0,georadiusbymemberroCommand,-5,CMD_READONLY,ACL_CATEGORY_GEO,GEORADIUSBYMEMBER_RO_Keyspecs,1,NULL,9),.args=GEORADIUSBYMEMBER_RO_Args,.reply_schema=&GEORADIUSBYMEMBER_RO_ReplySchema},
{MAKE_CMD("georadius_ro","Returns members from a geospatial index that are within a distance from a coordinate.","O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","3.2.10",CMD_DOC_DEPRECATED,"`GEOSEARCH` with the `BYRADIUS` argument","6.2.0","geo",COMMAND_GROUP_GEO,GEORADIUS_RO_History,2,GEORADIUS_RO_Tips,0,georadiusroCommand,-6,CMD_READONLY,ACL_CATEGORY_GEO,GEORADIUS_RO_Keyspecs,1,NULL,10),.args=GEORADIUS_RO_Args,.reply_schema=&GEORADIUS_RO_ReplySchema},
{MAKE_CMD("geosearch","Queries a geospatial index for members inside an area of a box or a circle.","O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","6.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEOSEARCH_History,1,GEOSEARCH_Tips,0,geosearchCommand,-7,CMD_READONLY,ACL_CATEGORY_GEO,GEOSEARCH_Keyspecs,1,NULL,8),.args=GEOSEARCH_Args,.reply_schema=&GEOSEARCH_ReplySchema},
{MAKE_CMD("geosearchstore","Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.","O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","6.2.0",CMD_DOC_NONE,NULL,NULL,"geo",COMMAND_GROUP_GEO,GEOSEARCHSTORE_History,1,GEOSEARCHSTORE_Tips,0,geosearchstoreCommand,-8,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_GEO,GEOSEARCHSTORE_Keyspecs,2,NULL,7),.args=GEOSEARCHSTORE_Args,.reply_schema=&GEOSEARCHSTORE_ReplySchema},
/* hash */
{MAKE_CMD("hdel","Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.","O(N) where N is the number of fields to be removed.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HDEL_History,1,HDEL_Tips,0,hdelCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_HASH,HDEL_Keyspecs,1,NULL,2),.args=HDEL_Args,.reply_schema=&HDEL_ReplySchema},
{MAKE_CMD("hexists","Determines whether a field exists in a hash.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HEXISTS_History,0,HEXISTS_Tips,0,hexistsCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HEXISTS_Keyspecs,1,NULL,2),.args=HEXISTS_Args,.reply_schema=&HEXISTS_ReplySchema},
{MAKE_CMD("hexpire","Set expiry for hash field using relative time to expire (seconds)","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HEXPIRE_History,0,HEXPIRE_Tips,0,hexpireCommand,-5,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HEXPIRE_Keyspecs,1,NULL,5),.args=HEXPIRE_Args,.reply_schema=&HEXPIRE_ReplySchema},
{MAKE_CMD("hexpireat","Set expiry for hash field using an absolute Unix timestamp (seconds)","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HEXPIREAT_History,0,HEXPIREAT_Tips,0,hexpireatCommand,-5,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HEXPIREAT_Keyspecs,1,NULL,5),.args=HEXPIREAT_Args,.reply_schema=&HEXPIREAT_ReplySchema},
{MAKE_CMD("hexpiretime","Returns the expiration time of a hash field as a Unix timestamp, in seconds.","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HEXPIRETIME_History,0,HEXPIRETIME_Tips,0,hexpiretimeCommand,-4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HEXPIRETIME_Keyspecs,1,NULL,3),.args=HEXPIRETIME_Args,.reply_schema=&HEXPIRETIME_ReplySchema},
{MAKE_CMD("hget","Returns the value of a field in a hash.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HGET_History,0,HGET_Tips,0,hgetCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HGET_Keyspecs,1,NULL,2),.args=HGET_Args,.reply_schema=&HGET_ReplySchema},
{MAKE_CMD("hgetall","Returns all fields and values in a hash.","O(N) where N is the size of the hash.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HGETALL_History,0,HGETALL_Tips,1,hgetallCommand,2,CMD_READONLY,ACL_CATEGORY_HASH,HGETALL_Keyspecs,1,NULL,1),.args=HGETALL_Args,.reply_schema=&HGETALL_ReplySchema},
{MAKE_CMD("hincrby","Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HINCRBY_History,0,HINCRBY_Tips,0,hincrbyCommand,4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HINCRBY_Keyspecs,1,NULL,3),.args=HINCRBY_Args,.reply_schema=&HINCRBY_ReplySchema},
{MAKE_CMD("hincrbyfloat","Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HINCRBYFLOAT_History,0,HINCRBYFLOAT_Tips,0,hincrbyfloatCommand,4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HINCRBYFLOAT_Keyspecs,1,NULL,3),.args=HINCRBYFLOAT_Args,.reply_schema=&HINCRBYFLOAT_ReplySchema},
{MAKE_CMD("hkeys","Returns all fields in a hash.","O(N) where N is the size of the hash.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HKEYS_History,0,HKEYS_Tips,1,hkeysCommand,2,CMD_READONLY,ACL_CATEGORY_HASH,HKEYS_Keyspecs,1,NULL,1),.args=HKEYS_Args,.reply_schema=&HKEYS_ReplySchema},
{MAKE_CMD("hlen","Returns the number of fields in a hash.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HLEN_History,0,HLEN_Tips,0,hlenCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HLEN_Keyspecs,1,NULL,1),.args=HLEN_Args,.reply_schema=&HLEN_ReplySchema},
{MAKE_CMD("hmget","Returns the values of all fields in a hash.","O(N) where N is the number of fields being requested.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HMGET_History,0,HMGET_Tips,0,hmgetCommand,-3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HMGET_Keyspecs,1,NULL,2),.args=HMGET_Args,.reply_schema=&HMGET_ReplySchema},
{MAKE_CMD("hmset","Sets the values of multiple fields.","O(N) where N is the number of fields being set.","2.0.0",CMD_DOC_DEPRECATED,"`HSET` with multiple field-value pairs","4.0.0","hash",COMMAND_GROUP_HASH,HMSET_History,0,HMSET_Tips,0,hsetCommand,-4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HMSET_Keyspecs,1,NULL,2),.args=HMSET_Args,.reply_schema=&HMSET_ReplySchema},
{MAKE_CMD("hpersist","Removes the expiration time for each specified field","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HPERSIST_History,0,HPERSIST_Tips,0,hpersistCommand,-4,CMD_WRITE|CMD_FAST,ACL_CATEGORY_HASH,HPERSIST_Keyspecs,1,NULL,3),.args=HPERSIST_Args,.reply_schema=&HPERSIST_ReplySchema},
{MAKE_CMD("hpexpire","Set expiry for hash field using relative time to expire (milliseconds)","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HPEXPIRE_History,0,HPEXPIRE_Tips,0,hpexpireCommand,-5,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HPEXPIRE_Keyspecs,1,NULL,5),.args=HPEXPIRE_Args,.reply_schema=&HPEXPIRE_ReplySchema},
{MAKE_CMD("hpexpireat","Set expiry for hash field using an absolute Unix timestamp (milliseconds)","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HPEXPIREAT_History,0,HPEXPIREAT_Tips,0,hpexpireatCommand,-5,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HPEXPIREAT_Keyspecs,1,NULL,5),.args=HPEXPIREAT_Args,.reply_schema=&HPEXPIREAT_ReplySchema},
{MAKE_CMD("hpexpiretime","Returns the expiration time of a hash field as a Unix timestamp, in msec.","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HPEXPIRETIME_History,0,HPEXPIRETIME_Tips,0,hpexpiretimeCommand,-4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HPEXPIRETIME_Keyspecs,1,NULL,3),.args=HPEXPIRETIME_Args,.reply_schema=&HPEXPIRETIME_ReplySchema},
{MAKE_CMD("hpttl","Returns the TTL in milliseconds of a hash field.","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HPTTL_History,0,HPTTL_Tips,0,hpttlCommand,-4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HPTTL_Keyspecs,1,NULL,3),.args=HPTTL_Args,.reply_schema=&HPTTL_ReplySchema},
{MAKE_CMD("hrandfield","Returns one or more random fields from a hash.","O(N) where N is the number of fields returned","6.2.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HRANDFIELD_History,0,HRANDFIELD_Tips,1,hrandfieldCommand,-2,CMD_READONLY,ACL_CATEGORY_HASH,HRANDFIELD_Keyspecs,1,NULL,2),.args=HRANDFIELD_Args,.reply_schema=&HRANDFIELD_ReplySchema},
{MAKE_CMD("hscan","Iterates over fields and values of a hash.","O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","2.8.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HSCAN_History,0,HSCAN_Tips,1,hscanCommand,-3,CMD_READONLY,ACL_CATEGORY_HASH,HSCAN_Keyspecs,1,NULL,5),.args=HSCAN_Args,.reply_schema=&HSCAN_ReplySchema},
{MAKE_CMD("hset","Creates or modifies the value of a field in a hash.","O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HSET_History,1,HSET_Tips,0,hsetCommand,-4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HSET_Keyspecs,1,NULL,2),.args=HSET_Args,.reply_schema=&HSET_ReplySchema},
{MAKE_CMD("hsetnx","Sets the value of a field in a hash only when the field doesn't exist.","O(1)","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HSETNX_History,0,HSETNX_Tips,0,hsetnxCommand,4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HASH,HSETNX_Keyspecs,1,NULL,3),.args=HSETNX_Args,.reply_schema=&HSETNX_ReplySchema},
{MAKE_CMD("hstrlen","Returns the length of the value of a field.","O(1)","3.2.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HSTRLEN_History,0,HSTRLEN_Tips,0,hstrlenCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HSTRLEN_Keyspecs,1,NULL,2),.args=HSTRLEN_Args,.reply_schema=&HSTRLEN_ReplySchema},
{MAKE_CMD("httl","Returns the TTL in seconds of a hash field.","O(N) where N is the number of arguments to the command","8.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HTTL_History,0,HTTL_Tips,0,httlCommand,-4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_HASH,HTTL_Keyspecs,1,NULL,3),.args=HTTL_Args,.reply_schema=&HTTL_ReplySchema},
{MAKE_CMD("hvals","Returns all values in a hash.","O(N) where N is the size of the hash.","2.0.0",CMD_DOC_NONE,NULL,NULL,"hash",COMMAND_GROUP_HASH,HVALS_History,0,HVALS_Tips,1,hvalsCommand,2,CMD_READONLY,ACL_CATEGORY_HASH,HVALS_Keyspecs,1,NULL,1),.args=HVALS_Args,.reply_schema=&HVALS_ReplySchema},
/* hyperloglog */
{MAKE_CMD("pfadd","Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.","O(1) to add every element.","2.8.9",CMD_DOC_NONE,NULL,NULL,"hyperloglog",COMMAND_GROUP_HYPERLOGLOG,PFADD_History,0,PFADD_Tips,0,pfaddCommand,-2,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_HYPERLOGLOG,PFADD_Keyspecs,1,NULL,2),.args=PFADD_Args,.reply_schema=&PFADD_ReplySchema},
{MAKE_CMD("pfcount","Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).","O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.","2.8.9",CMD_DOC_NONE,NULL,NULL,"hyperloglog",COMMAND_GROUP_HYPERLOGLOG,PFCOUNT_History,0,PFCOUNT_Tips,0,pfcountCommand,-2,CMD_READONLY|CMD_MAY_REPLICATE,ACL_CATEGORY_HYPERLOGLOG,PFCOUNT_Keyspecs,1,NULL,1),.args=PFCOUNT_Args,.reply_schema=&PFCOUNT_ReplySchema},
{MAKE_CMD("pfdebug","Internal commands for debugging HyperLogLog values.","N/A","2.8.9",CMD_DOC_SYSCMD,NULL,NULL,"hyperloglog",COMMAND_GROUP_HYPERLOGLOG,PFDEBUG_History,0,PFDEBUG_Tips,0,pfdebugCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_ADMIN,ACL_CATEGORY_HYPERLOGLOG,PFDEBUG_Keyspecs,1,NULL,2),.args=PFDEBUG_Args},
{MAKE_CMD("pfmerge","Merges one or more HyperLogLog values into a single key.","O(N) to merge N HyperLogLogs, but with high constant times.","2.8.9",CMD_DOC_NONE,NULL,NULL,"hyperloglog",COMMAND_GROUP_HYPERLOGLOG,PFMERGE_History,0,PFMERGE_Tips,0,pfmergeCommand,-2,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_HYPERLOGLOG,PFMERGE_Keyspecs,2,NULL,2),.args=PFMERGE_Args,.reply_schema=&PFMERGE_ReplySchema},
{MAKE_CMD("pfselftest","An internal command for testing HyperLogLog values.","N/A","2.8.9",CMD_DOC_SYSCMD,NULL,NULL,"hyperloglog",COMMAND_GROUP_HYPERLOGLOG,PFSELFTEST_History,0,PFSELFTEST_Tips,0,pfselftestCommand,1,CMD_ADMIN,ACL_CATEGORY_HYPERLOGLOG,PFSELFTEST_Keyspecs,0,NULL,0),.reply_schema=&PFSELFTEST_ReplySchema},
/* list */
{MAKE_CMD("blmove","Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,BLMOVE_History,0,BLMOVE_Tips,0,blmoveCommand,6,CMD_WRITE|CMD_DENYOOM|CMD_BLOCKING,ACL_CATEGORY_LIST,BLMOVE_Keyspecs,2,NULL,5),.args=BLMOVE_Args,.reply_schema=&BLMOVE_ReplySchema},
{MAKE_CMD("blmpop","Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","O(N+M) where N is the number of provided keys and M is the number of elements returned.","7.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,BLMPOP_History,0,BLMPOP_Tips,0,blmpopCommand,-5,CMD_WRITE|CMD_BLOCKING,ACL_CATEGORY_LIST,BLMPOP_Keyspecs,1,blmpopGetKeys,5),.args=BLMPOP_Args,.reply_schema=&BLMPOP_ReplySchema},
{MAKE_CMD("blpop","Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","O(N) where N is the number of provided keys.","2.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,BLPOP_History,1,BLPOP_Tips,0,blpopCommand,-3,CMD_WRITE|CMD_BLOCKING,ACL_CATEGORY_LIST,BLPOP_Keyspecs,1,NULL,2),.args=BLPOP_Args,.reply_schema=&BLPOP_ReplySchema},
{MAKE_CMD("brpop","Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","O(N) where N is the number of provided keys.","2.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,BRPOP_History,1,BRPOP_Tips,0,brpopCommand,-3,CMD_WRITE|CMD_BLOCKING,ACL_CATEGORY_LIST,BRPOP_Keyspecs,1,NULL,2),.args=BRPOP_Args,.reply_schema=&BRPOP_ReplySchema},
{MAKE_CMD("brpoplpush","Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.","O(1)","2.2.0",CMD_DOC_DEPRECATED,"`BLMOVE` with the `RIGHT` and `LEFT` arguments","6.2.0","list",COMMAND_GROUP_LIST,BRPOPLPUSH_History,1,BRPOPLPUSH_Tips,0,brpoplpushCommand,4,CMD_WRITE|CMD_DENYOOM|CMD_BLOCKING,ACL_CATEGORY_LIST,BRPOPLPUSH_Keyspecs,2,NULL,3),.args=BRPOPLPUSH_Args,.reply_schema=&BRPOPLPUSH_ReplySchema},
{MAKE_CMD("lindex","Returns an element from a list by its index.","O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LINDEX_History,0,LINDEX_Tips,0,lindexCommand,3,CMD_READONLY,ACL_CATEGORY_LIST,LINDEX_Keyspecs,1,NULL,2),.args=LINDEX_Args,.reply_schema=&LINDEX_ReplySchema},
{MAKE_CMD("linsert","Inserts an element before or after another element in a list.","O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).","2.2.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LINSERT_History,0,LINSERT_Tips,0,linsertCommand,5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_LIST,LINSERT_Keyspecs,1,NULL,4),.args=LINSERT_Args,.reply_schema=&LINSERT_ReplySchema},
{MAKE_CMD("llen","Returns the length of a list.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LLEN_History,0,LLEN_Tips,0,llenCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_LIST,LLEN_Keyspecs,1,NULL,1),.args=LLEN_Args,.reply_schema=&LLEN_ReplySchema},
{MAKE_CMD("lmove","Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LMOVE_History,0,LMOVE_Tips,0,lmoveCommand,5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_LIST,LMOVE_Keyspecs,2,NULL,4),.args=LMOVE_Args,.reply_schema=&LMOVE_ReplySchema},
{MAKE_CMD("lmpop","Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.","O(N+M) where N is the number of provided keys and M is the number of elements returned.","7.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LMPOP_History,0,LMPOP_Tips,0,lmpopCommand,-4,CMD_WRITE,ACL_CATEGORY_LIST,LMPOP_Keyspecs,1,lmpopGetKeys,4),.args=LMPOP_Args,.reply_schema=&LMPOP_ReplySchema},
{MAKE_CMD("lpop","Returns the first elements in a list after removing it. Deletes the list if the last element was popped.","O(N) where N is the number of elements returned","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LPOP_History,1,LPOP_Tips,0,lpopCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_LIST,LPOP_Keyspecs,1,NULL,2),.args=LPOP_Args,.reply_schema=&LPOP_ReplySchema},
{MAKE_CMD("lpos","Returns the index of matching elements in a list.","O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.","6.0.6",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LPOS_History,0,LPOS_Tips,0,lposCommand,-3,CMD_READONLY,ACL_CATEGORY_LIST,LPOS_Keyspecs,1,NULL,5),.args=LPOS_Args,.reply_schema=&LPOS_ReplySchema},
{MAKE_CMD("lpush","Prepends one or more elements to a list. Creates the key if it doesn't exist.","O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LPUSH_History,1,LPUSH_Tips,0,lpushCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_LIST,LPUSH_Keyspecs,1,NULL,2),.args=LPUSH_Args,.reply_schema=&LPUSH_ReplySchema},
{MAKE_CMD("lpushx","Prepends one or more elements to a list only when the list exists.","O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","2.2.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LPUSHX_History,1,LPUSHX_Tips,0,lpushxCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_LIST,LPUSHX_Keyspecs,1,NULL,2),.args=LPUSHX_Args,.reply_schema=&LPUSHX_ReplySchema},
{MAKE_CMD("lrange","Returns a range of elements from a list.","O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LRANGE_History,0,LRANGE_Tips,0,lrangeCommand,4,CMD_READONLY,ACL_CATEGORY_LIST,LRANGE_Keyspecs,1,NULL,3),.args=LRANGE_Args,.reply_schema=&LRANGE_ReplySchema},
{MAKE_CMD("lrem","Removes elements from a list. Deletes the list if the last element was removed.","O(N+M) where N is the length of the list and M is the number of elements removed.","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LREM_History,0,LREM_Tips,0,lremCommand,4,CMD_WRITE,ACL_CATEGORY_LIST,LREM_Keyspecs,1,NULL,3),.args=LREM_Args,.reply_schema=&LREM_ReplySchema},
{MAKE_CMD("lset","Sets the value of an element in a list by its index.","O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LSET_History,0,LSET_Tips,0,lsetCommand,4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_LIST,LSET_Keyspecs,1,NULL,3),.args=LSET_Args,.reply_schema=&LSET_ReplySchema},
{MAKE_CMD("ltrim","Removes elements from both ends a list. Deletes the list if all elements were trimmed.","O(N) where N is the number of elements to be removed by the operation.","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,LTRIM_History,0,LTRIM_Tips,0,ltrimCommand,4,CMD_WRITE,ACL_CATEGORY_LIST,LTRIM_Keyspecs,1,NULL,3),.args=LTRIM_Args,.reply_schema=&LTRIM_ReplySchema},
{MAKE_CMD("rpop","Returns and removes the last elements of a list. Deletes the list if the last element was popped.","O(N) where N is the number of elements returned","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,RPOP_History,1,RPOP_Tips,0,rpopCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_LIST,RPOP_Keyspecs,1,NULL,2),.args=RPOP_Args,.reply_schema=&RPOP_ReplySchema},
{MAKE_CMD("rpoplpush","Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.","O(1)","1.2.0",CMD_DOC_DEPRECATED,"`LMOVE` with the `RIGHT` and `LEFT` arguments","6.2.0","list",COMMAND_GROUP_LIST,RPOPLPUSH_History,0,RPOPLPUSH_Tips,0,rpoplpushCommand,3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_LIST,RPOPLPUSH_Keyspecs,2,NULL,2),.args=RPOPLPUSH_Args,.reply_schema=&RPOPLPUSH_ReplySchema},
{MAKE_CMD("rpush","Appends one or more elements to a list. Creates the key if it doesn't exist.","O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","1.0.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,RPUSH_History,1,RPUSH_Tips,0,rpushCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_LIST,RPUSH_Keyspecs,1,NULL,2),.args=RPUSH_Args,.reply_schema=&RPUSH_ReplySchema},
{MAKE_CMD("rpushx","Appends an element to a list only when the list exists.","O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","2.2.0",CMD_DOC_NONE,NULL,NULL,"list",COMMAND_GROUP_LIST,RPUSHX_History,1,RPUSHX_Tips,0,rpushxCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_LIST,RPUSHX_Keyspecs,1,NULL,2),.args=RPUSHX_Args,.reply_schema=&RPUSHX_ReplySchema},
/* pubsub */
{MAKE_CMD("psubscribe","Listens for messages published to channels that match one or more patterns.","O(N) where N is the number of patterns to subscribe to.","2.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PSUBSCRIBE_History,0,PSUBSCRIBE_Tips,0,psubscribeCommand,-2,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,PSUBSCRIBE_Keyspecs,0,NULL,1),.args=PSUBSCRIBE_Args},
{MAKE_CMD("publish","Posts a message to a channel.","O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).","2.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBLISH_History,0,PUBLISH_Tips,0,publishCommand,3,CMD_PUBSUB|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_MAY_REPLICATE|CMD_SENTINEL,0,PUBLISH_Keyspecs,0,NULL,2),.args=PUBLISH_Args,.reply_schema=&PUBLISH_ReplySchema},
{MAKE_CMD("pubsub","A container for Pub/Sub commands.","Depends on subcommand.","2.8.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUBSUB_History,0,PUBSUB_Tips,0,NULL,-2,0,0,PUBSUB_Keyspecs,0,NULL,0),.subcommands=PUBSUB_Subcommands},
{MAKE_CMD("punsubscribe","Stops listening to messages published to channels that match one or more patterns.","O(N) where N is the number of patterns to unsubscribe.","2.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,PUNSUBSCRIBE_History,0,PUNSUBSCRIBE_Tips,0,punsubscribeCommand,-1,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,PUNSUBSCRIBE_Keyspecs,0,NULL,1),.args=PUNSUBSCRIBE_Args},
{MAKE_CMD("spublish","Post a message to a shard channel","O(N) where N is the number of clients subscribed to the receiving shard channel.","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,SPUBLISH_History,0,SPUBLISH_Tips,0,spublishCommand,3,CMD_PUBSUB|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_MAY_REPLICATE,0,SPUBLISH_Keyspecs,1,NULL,2),.args=SPUBLISH_Args,.reply_schema=&SPUBLISH_ReplySchema},
{MAKE_CMD("ssubscribe","Listens for messages published to shard channels.","O(N) where N is the number of shard channels to subscribe to.","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,SSUBSCRIBE_History,0,SSUBSCRIBE_Tips,0,ssubscribeCommand,-2,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,SSUBSCRIBE_Keyspecs,1,NULL,1),.args=SSUBSCRIBE_Args},
{MAKE_CMD("subscribe","Listens for messages published to channels.","O(N) where N is the number of channels to subscribe to.","2.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,SUBSCRIBE_History,0,SUBSCRIBE_Tips,0,subscribeCommand,-2,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,SUBSCRIBE_Keyspecs,0,NULL,1),.args=SUBSCRIBE_Args},
{MAKE_CMD("sunsubscribe","Stops listening to messages posted to shard channels.","O(N) where N is the number of shard channels to unsubscribe.","7.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,SUNSUBSCRIBE_History,0,SUNSUBSCRIBE_Tips,0,sunsubscribeCommand,-1,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,SUNSUBSCRIBE_Keyspecs,1,NULL,1),.args=SUNSUBSCRIBE_Args},
{MAKE_CMD("unsubscribe","Stops listening to messages posted to channels.","O(N) where N is the number of channels to unsubscribe.","2.0.0",CMD_DOC_NONE,NULL,NULL,"pubsub",COMMAND_GROUP_PUBSUB,UNSUBSCRIBE_History,0,UNSUBSCRIBE_Tips,0,unsubscribeCommand,-1,CMD_PUBSUB|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SENTINEL,0,UNSUBSCRIBE_Keyspecs,0,NULL,1),.args=UNSUBSCRIBE_Args},
/* scripting */
{MAKE_CMD("eval","Executes a server-side Lua script.","Depends on the script that is executed.","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,EVAL_History,0,EVAL_Tips,0,evalCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_MAY_REPLICATE|CMD_NO_MANDATORY_KEYS|CMD_STALE,ACL_CATEGORY_SCRIPTING,EVAL_Keyspecs,1,evalGetKeys,4),.args=EVAL_Args,.reply_schema=&EVAL_ReplySchema},
{MAKE_CMD("evalsha","Executes a server-side Lua script by SHA1 digest.","Depends on the script that is executed.","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,EVALSHA_History,0,EVALSHA_Tips,0,evalShaCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_MAY_REPLICATE|CMD_NO_MANDATORY_KEYS|CMD_STALE,ACL_CATEGORY_SCRIPTING,EVALSHA_Keyspecs,1,evalGetKeys,4),.args=EVALSHA_Args,.reply_schema=&EVALSHA_ReplySchema},
{MAKE_CMD("evalsha_ro","Executes a read-only server-side Lua script by SHA1 digest.","Depends on the script that is executed.","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,EVALSHA_RO_History,0,EVALSHA_RO_Tips,0,evalShaRoCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_NO_MANDATORY_KEYS|CMD_STALE|CMD_READONLY,ACL_CATEGORY_SCRIPTING,EVALSHA_RO_Keyspecs,1,evalGetKeys,4),.args=EVALSHA_RO_Args,.reply_schema=&EVALSHA_RO_ReplySchema},
{MAKE_CMD("eval_ro","Executes a read-only server-side Lua script.","Depends on the script that is executed.","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,EVAL_RO_History,0,EVAL_RO_Tips,0,evalRoCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_NO_MANDATORY_KEYS|CMD_STALE|CMD_READONLY,ACL_CATEGORY_SCRIPTING,EVAL_RO_Keyspecs,1,evalGetKeys,4),.args=EVAL_RO_Args,.reply_schema=&EVAL_RO_ReplySchema},
{MAKE_CMD("fcall","Invokes a function.","Depends on the function that is executed.","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FCALL_History,0,FCALL_Tips,0,fcallCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_MAY_REPLICATE|CMD_NO_MANDATORY_KEYS|CMD_STALE,ACL_CATEGORY_SCRIPTING,FCALL_Keyspecs,1,functionGetKeys,4),.args=FCALL_Args,.reply_schema=&FCALL_ReplySchema},
{MAKE_CMD("fcall_ro","Invokes a read-only function.","Depends on the function that is executed.","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FCALL_RO_History,0,FCALL_RO_Tips,0,fcallroCommand,-3,CMD_NOSCRIPT|CMD_SKIP_MONITOR|CMD_NO_MANDATORY_KEYS|CMD_STALE|CMD_READONLY,ACL_CATEGORY_SCRIPTING,FCALL_RO_Keyspecs,1,functionGetKeys,4),.args=FCALL_RO_Args,.reply_schema=&FCALL_RO_ReplySchema},
{MAKE_CMD("function","A container for function commands.","Depends on subcommand.","7.0.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,FUNCTION_History,0,FUNCTION_Tips,0,NULL,-2,0,0,FUNCTION_Keyspecs,0,NULL,0),.subcommands=FUNCTION_Subcommands},
{MAKE_CMD("script","A container for Lua scripts management commands.","Depends on subcommand.","2.6.0",CMD_DOC_NONE,NULL,NULL,"scripting",COMMAND_GROUP_SCRIPTING,SCRIPT_History,0,SCRIPT_Tips,0,NULL,-2,0,0,SCRIPT_Keyspecs,0,NULL,0),.subcommands=SCRIPT_Subcommands},
/* sentinel */
{MAKE_CMD("sentinel","A container for Redis Sentinel commands.","Depends on subcommand.","2.8.4",CMD_DOC_NONE,NULL,NULL,"sentinel",COMMAND_GROUP_SENTINEL,SENTINEL_History,0,SENTINEL_Tips,0,NULL,-2,CMD_ADMIN|CMD_SENTINEL|CMD_ONLY_SENTINEL,0,SENTINEL_Keyspecs,0,NULL,0),.subcommands=SENTINEL_Subcommands},
/* server */
{MAKE_CMD("acl","A container for Access List Control commands.","Depends on subcommand.","6.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ACL_History,0,ACL_Tips,0,NULL,-2,CMD_SENTINEL,0,ACL_Keyspecs,0,NULL,0),.subcommands=ACL_Subcommands},
{MAKE_CMD("bgrewriteaof","Asynchronously rewrites the append-only file to disk.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,BGREWRITEAOF_History,0,BGREWRITEAOF_Tips,0,bgrewriteaofCommand,1,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT,0,BGREWRITEAOF_Keyspecs,0,NULL,0),.reply_schema=&BGREWRITEAOF_ReplySchema},
{MAKE_CMD("bgsave","Asynchronously saves the database(s) to disk.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,BGSAVE_History,1,BGSAVE_Tips,0,bgsaveCommand,-1,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT,0,BGSAVE_Keyspecs,0,NULL,1),.args=BGSAVE_Args,.reply_schema=&BGSAVE_ReplySchema},
{MAKE_CMD("command","Returns detailed information about all commands.","O(N) where N is the total number of Redis commands","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,COMMAND_History,0,COMMAND_Tips,1,commandCommand,-1,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_CONNECTION,COMMAND_Keyspecs,0,NULL,0),.subcommands=COMMAND_Subcommands},
{MAKE_CMD("config","A container for server configuration commands.","Depends on subcommand.","2.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,CONFIG_History,0,CONFIG_Tips,0,NULL,-2,0,0,CONFIG_Keyspecs,0,NULL,0),.subcommands=CONFIG_Subcommands},
{MAKE_CMD("dbsize","Returns the number of keys in the database.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,DBSIZE_History,0,DBSIZE_Tips,2,dbsizeCommand,1,CMD_READONLY|CMD_FAST,ACL_CATEGORY_KEYSPACE,DBSIZE_Keyspecs,0,NULL,0),.reply_schema=&DBSIZE_ReplySchema},
{MAKE_CMD("debug","A container for debugging commands.","Depends on subcommand.","1.0.0",CMD_DOC_SYSCMD,NULL,NULL,"server",COMMAND_GROUP_SERVER,DEBUG_History,0,DEBUG_Tips,0,debugCommand,-2,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_PROTECTED,0,DEBUG_Keyspecs,0,NULL,0)},
{MAKE_CMD("failover","Starts a coordinated failover from a server to one of its replicas.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,FAILOVER_History,0,FAILOVER_Tips,0,failoverCommand,-1,CMD_ADMIN|CMD_NOSCRIPT|CMD_STALE,0,FAILOVER_Keyspecs,0,NULL,3),.args=FAILOVER_Args,.reply_schema=&FAILOVER_ReplySchema},
{MAKE_CMD("flushall","Removes all keys from all databases.","O(N) where N is the total number of keys in all databases","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,FLUSHALL_History,2,FLUSHALL_Tips,2,flushallCommand,-1,CMD_WRITE,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,FLUSHALL_Keyspecs,0,NULL,1),.args=FLUSHALL_Args,.reply_schema=&FLUSHALL_ReplySchema},
{MAKE_CMD("flushdb","Remove all keys from the current database.","O(N) where N is the number of keys in the selected database","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,FLUSHDB_History,2,FLUSHDB_Tips,2,flushdbCommand,-1,CMD_WRITE,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,FLUSHDB_Keyspecs,0,NULL,1),.args=FLUSHDB_Args,.reply_schema=&FLUSHDB_ReplySchema},
{MAKE_CMD("info","Returns information and statistics about the server.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,INFO_History,1,INFO_Tips,3,infoCommand,-1,CMD_LOADING|CMD_STALE|CMD_SENTINEL,ACL_CATEGORY_DANGEROUS,INFO_Keyspecs,0,NULL,1),.args=INFO_Args,.reply_schema=&INFO_ReplySchema},
{MAKE_CMD("lastsave","Returns the Unix timestamp of the last successful save to disk.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LASTSAVE_History,0,LASTSAVE_Tips,1,lastsaveCommand,1,CMD_LOADING|CMD_STALE|CMD_FAST,ACL_CATEGORY_ADMIN|ACL_CATEGORY_DANGEROUS,LASTSAVE_Keyspecs,0,NULL,0),.reply_schema=&LASTSAVE_ReplySchema},
{MAKE_CMD("latency","A container for latency diagnostics commands.","Depends on subcommand.","2.8.13",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LATENCY_History,0,LATENCY_Tips,0,NULL,-2,0,0,LATENCY_Keyspecs,0,NULL,0),.subcommands=LATENCY_Subcommands},
{MAKE_CMD("lolwut","Displays computer art and the Redis version",NULL,"5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,LOLWUT_History,0,LOLWUT_Tips,0,lolwutCommand,-1,CMD_READONLY|CMD_FAST,0,LOLWUT_Keyspecs,0,NULL,1),.args=LOLWUT_Args,.reply_schema=&LOLWUT_ReplySchema},
{MAKE_CMD("memory","A container for memory diagnostics commands.","Depends on subcommand.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MEMORY_History,0,MEMORY_Tips,0,NULL,-2,0,0,MEMORY_Keyspecs,0,NULL,0),.subcommands=MEMORY_Subcommands},
{MAKE_CMD("module","A container for module commands.","Depends on subcommand.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MODULE_History,0,MODULE_Tips,0,NULL,-2,0,0,MODULE_Keyspecs,0,NULL,0),.subcommands=MODULE_Subcommands},
{MAKE_CMD("monitor","Listens for all requests received by the server in real-time.",NULL,"1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,MONITOR_History,0,MONITOR_Tips,0,monitorCommand,1,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE,0,MONITOR_Keyspecs,0,NULL,0)},
{MAKE_CMD("psync","An internal command used in replication.",NULL,"2.8.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,PSYNC_History,0,PSYNC_Tips,0,syncCommand,-3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NO_MULTI|CMD_NOSCRIPT,0,PSYNC_Keyspecs,0,NULL,2),.args=PSYNC_Args},
{MAKE_CMD("replconf","An internal command for configuring the replication stream.","O(1)","3.0.0",CMD_DOC_SYSCMD,NULL,NULL,"server",COMMAND_GROUP_SERVER,REPLCONF_History,0,REPLCONF_Tips,0,replconfCommand,-1,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_ALLOW_BUSY,0,REPLCONF_Keyspecs,0,NULL,0),.reply_schema=&REPLCONF_ReplySchema},
{MAKE_CMD("replicaof","Configures a server as replica of another, or promotes it to a master.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,REPLICAOF_History,0,REPLICAOF_Tips,0,replicaofCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_STALE,0,REPLICAOF_Keyspecs,0,NULL,1),.args=REPLICAOF_Args,.reply_schema=&REPLICAOF_ReplySchema},
{MAKE_CMD("restore-asking","An internal command for migrating keys in a cluster.","O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","3.0.0",CMD_DOC_SYSCMD,NULL,NULL,"server",COMMAND_GROUP_SERVER,RESTORE_ASKING_History,3,RESTORE_ASKING_Tips,0,restoreCommand,-4,CMD_WRITE|CMD_DENYOOM|CMD_ASKING,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,RESTORE_ASKING_Keyspecs,1,NULL,7),.args=RESTORE_ASKING_Args,.reply_schema=&RESTORE_ASKING_ReplySchema},
{MAKE_CMD("role","Returns the replication role.","O(1)","2.8.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,ROLE_History,0,ROLE_Tips,0,roleCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_SENTINEL,ACL_CATEGORY_ADMIN|ACL_CATEGORY_DANGEROUS,ROLE_Keyspecs,0,NULL,0),.reply_schema=&ROLE_ReplySchema},
{MAKE_CMD("save","Synchronously saves the database(s) to disk.","O(N) where N is the total number of keys in all databases","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SAVE_History,0,SAVE_Tips,0,saveCommand,1,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_NO_MULTI,0,SAVE_Keyspecs,0,NULL,0),.reply_schema=&SAVE_ReplySchema},
{MAKE_CMD("shutdown","Synchronously saves the database(s) to disk and shuts down the Redis server.","O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SHUTDOWN_History,1,SHUTDOWN_Tips,0,shutdownCommand,-1,CMD_ADMIN|CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_NO_MULTI|CMD_SENTINEL|CMD_ALLOW_BUSY,0,SHUTDOWN_Keyspecs,0,NULL,4),.args=SHUTDOWN_Args,.reply_schema=&SHUTDOWN_ReplySchema},
{MAKE_CMD("slaveof","Sets a Redis server as a replica of another, or promotes it to being a master.","O(1)","1.0.0",CMD_DOC_DEPRECATED,"`REPLICAOF`","5.0.0","server",COMMAND_GROUP_SERVER,SLAVEOF_History,0,SLAVEOF_Tips,0,replicaofCommand,3,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NOSCRIPT|CMD_STALE,0,SLAVEOF_Keyspecs,0,NULL,1),.args=SLAVEOF_Args,.reply_schema=&SLAVEOF_ReplySchema},
{MAKE_CMD("slowlog","A container for slow log commands.","Depends on subcommand.","2.2.12",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SLOWLOG_History,0,SLOWLOG_Tips,0,NULL,-2,0,0,SLOWLOG_Keyspecs,0,NULL,0),.subcommands=SLOWLOG_Subcommands},
{MAKE_CMD("swapdb","Swaps two Redis databases.","O(N) where N is the count of clients watching or blocking on keys from both databases.","4.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SWAPDB_History,0,SWAPDB_Tips,0,swapdbCommand,3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_KEYSPACE|ACL_CATEGORY_DANGEROUS,SWAPDB_Keyspecs,0,NULL,2),.args=SWAPDB_Args,.reply_schema=&SWAPDB_ReplySchema},
{MAKE_CMD("sync","An internal command used in replication.",NULL,"1.0.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,SYNC_History,0,SYNC_Tips,0,syncCommand,1,CMD_NO_ASYNC_LOADING|CMD_ADMIN|CMD_NO_MULTI|CMD_NOSCRIPT,0,SYNC_Keyspecs,0,NULL,0)},
{MAKE_CMD("time","Returns the server time.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"server",COMMAND_GROUP_SERVER,TIME_History,0,TIME_Tips,1,timeCommand,1,CMD_LOADING|CMD_STALE|CMD_FAST,0,TIME_Keyspecs,0,NULL,0),.reply_schema=&TIME_ReplySchema},
/* set */
{MAKE_CMD("sadd","Adds one or more members to a set. Creates the key if it doesn't exist.","O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SADD_History,1,SADD_Tips,0,saddCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_SET,SADD_Keyspecs,1,NULL,2),.args=SADD_Args,.reply_schema=&SADD_ReplySchema},
{MAKE_CMD("scard","Returns the number of members in a set.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SCARD_History,0,SCARD_Tips,0,scardCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SET,SCARD_Keyspecs,1,NULL,1),.args=SCARD_Args,.reply_schema=&SCARD_ReplySchema},
{MAKE_CMD("sdiff","Returns the difference of multiple sets.","O(N) where N is the total number of elements in all given sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SDIFF_History,0,SDIFF_Tips,1,sdiffCommand,-2,CMD_READONLY,ACL_CATEGORY_SET,SDIFF_Keyspecs,1,NULL,1),.args=SDIFF_Args,.reply_schema=&SDIFF_ReplySchema},
{MAKE_CMD("sdiffstore","Stores the difference of multiple sets in a key.","O(N) where N is the total number of elements in all given sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SDIFFSTORE_History,0,SDIFFSTORE_Tips,0,sdiffstoreCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SET,SDIFFSTORE_Keyspecs,2,NULL,2),.args=SDIFFSTORE_Args,.reply_schema=&SDIFFSTORE_ReplySchema},
{MAKE_CMD("sinter","Returns the intersect of multiple sets.","O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SINTER_History,0,SINTER_Tips,1,sinterCommand,-2,CMD_READONLY,ACL_CATEGORY_SET,SINTER_Keyspecs,1,NULL,1),.args=SINTER_Args,.reply_schema=&SINTER_ReplySchema},
{MAKE_CMD("sintercard","Returns the number of members of the intersect of multiple sets.","O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","7.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SINTERCARD_History,0,SINTERCARD_Tips,0,sinterCardCommand,-3,CMD_READONLY,ACL_CATEGORY_SET,SINTERCARD_Keyspecs,1,sintercardGetKeys,3),.args=SINTERCARD_Args,.reply_schema=&SINTERCARD_ReplySchema},
{MAKE_CMD("sinterstore","Stores the intersect of multiple sets in a key.","O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SINTERSTORE_History,0,SINTERSTORE_Tips,0,sinterstoreCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SET,SINTERSTORE_Keyspecs,2,NULL,2),.args=SINTERSTORE_Args,.reply_schema=&SINTERSTORE_ReplySchema},
{MAKE_CMD("sismember","Determines whether a member belongs to a set.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SISMEMBER_History,0,SISMEMBER_Tips,0,sismemberCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SET,SISMEMBER_Keyspecs,1,NULL,2),.args=SISMEMBER_Args,.reply_schema=&SISMEMBER_ReplySchema},
{MAKE_CMD("smembers","Returns all members of a set.","O(N) where N is the set cardinality.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SMEMBERS_History,0,SMEMBERS_Tips,1,sinterCommand,2,CMD_READONLY,ACL_CATEGORY_SET,SMEMBERS_Keyspecs,1,NULL,1),.args=SMEMBERS_Args,.reply_schema=&SMEMBERS_ReplySchema},
{MAKE_CMD("smismember","Determines whether multiple members belong to a set.","O(N) where N is the number of elements being checked for membership","6.2.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SMISMEMBER_History,0,SMISMEMBER_Tips,0,smismemberCommand,-3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SET,SMISMEMBER_Keyspecs,1,NULL,2),.args=SMISMEMBER_Args,.reply_schema=&SMISMEMBER_ReplySchema},
{MAKE_CMD("smove","Moves a member from one set to another.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SMOVE_History,0,SMOVE_Tips,0,smoveCommand,4,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SET,SMOVE_Keyspecs,2,NULL,3),.args=SMOVE_Args,.reply_schema=&SMOVE_ReplySchema},
{MAKE_CMD("spop","Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.","Without the count argument O(1), otherwise O(N) where N is the value of the passed count.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SPOP_History,1,SPOP_Tips,1,spopCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SET,SPOP_Keyspecs,1,NULL,2),.args=SPOP_Args,.reply_schema=&SPOP_ReplySchema},
{MAKE_CMD("srandmember","Get one or multiple random members from a set","Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SRANDMEMBER_History,1,SRANDMEMBER_Tips,1,srandmemberCommand,-2,CMD_READONLY,ACL_CATEGORY_SET,SRANDMEMBER_Keyspecs,1,NULL,2),.args=SRANDMEMBER_Args,.reply_schema=&SRANDMEMBER_ReplySchema},
{MAKE_CMD("srem","Removes one or more members from a set. Deletes the set if the last member was removed.","O(N) where N is the number of members to be removed.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SREM_History,1,SREM_Tips,0,sremCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SET,SREM_Keyspecs,1,NULL,2),.args=SREM_Args,.reply_schema=&SREM_ReplySchema},
{MAKE_CMD("sscan","Iterates over members of a set.","O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","2.8.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SSCAN_History,0,SSCAN_Tips,1,sscanCommand,-3,CMD_READONLY,ACL_CATEGORY_SET,SSCAN_Keyspecs,1,NULL,4),.args=SSCAN_Args,.reply_schema=&SSCAN_ReplySchema},
{MAKE_CMD("sunion","Returns the union of multiple sets.","O(N) where N is the total number of elements in all given sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SUNION_History,0,SUNION_Tips,1,sunionCommand,-2,CMD_READONLY,ACL_CATEGORY_SET,SUNION_Keyspecs,1,NULL,1),.args=SUNION_Args,.reply_schema=&SUNION_ReplySchema},
{MAKE_CMD("sunionstore","Stores the union of multiple sets in a key.","O(N) where N is the total number of elements in all given sets.","1.0.0",CMD_DOC_NONE,NULL,NULL,"set",COMMAND_GROUP_SET,SUNIONSTORE_History,0,SUNIONSTORE_Tips,0,sunionstoreCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SET,SUNIONSTORE_Keyspecs,2,NULL,2),.args=SUNIONSTORE_Args,.reply_schema=&SUNIONSTORE_ReplySchema},
/* sorted_set */
{MAKE_CMD("bzmpop","Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","7.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,BZMPOP_History,0,BZMPOP_Tips,0,bzmpopCommand,-5,CMD_WRITE|CMD_BLOCKING,ACL_CATEGORY_SORTEDSET,BZMPOP_Keyspecs,1,blmpopGetKeys,5),.args=BZMPOP_Args,.reply_schema=&BZMPOP_ReplySchema},
{MAKE_CMD("bzpopmax","Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.","O(log(N)) with N being the number of elements in the sorted set.","5.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,BZPOPMAX_History,1,BZPOPMAX_Tips,0,bzpopmaxCommand,-3,CMD_WRITE|CMD_FAST|CMD_BLOCKING,ACL_CATEGORY_SORTEDSET,BZPOPMAX_Keyspecs,1,NULL,2),.args=BZPOPMAX_Args,.reply_schema=&BZPOPMAX_ReplySchema},
{MAKE_CMD("bzpopmin","Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","O(log(N)) with N being the number of elements in the sorted set.","5.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,BZPOPMIN_History,1,BZPOPMIN_Tips,0,bzpopminCommand,-3,CMD_WRITE|CMD_FAST|CMD_BLOCKING,ACL_CATEGORY_SORTEDSET,BZPOPMIN_Keyspecs,1,NULL,2),.args=BZPOPMIN_Args,.reply_schema=&BZPOPMIN_ReplySchema},
{MAKE_CMD("zadd","Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.","O(log(N)) for each item added, where N is the number of elements in the sorted set.","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZADD_History,3,ZADD_Tips,0,zaddCommand,-4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZADD_Keyspecs,1,NULL,6),.args=ZADD_Args,.reply_schema=&ZADD_ReplySchema},
{MAKE_CMD("zcard","Returns the number of members in a sorted set.","O(1)","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZCARD_History,0,ZCARD_Tips,0,zcardCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZCARD_Keyspecs,1,NULL,1),.args=ZCARD_Args,.reply_schema=&ZCARD_ReplySchema},
{MAKE_CMD("zcount","Returns the count of members in a sorted set that have scores within a range.","O(log(N)) with N being the number of elements in the sorted set.","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZCOUNT_History,0,ZCOUNT_Tips,0,zcountCommand,4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZCOUNT_Keyspecs,1,NULL,3),.args=ZCOUNT_Args,.reply_schema=&ZCOUNT_ReplySchema},
{MAKE_CMD("zdiff","Returns the difference between multiple sorted sets.","O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZDIFF_History,0,ZDIFF_Tips,0,zdiffCommand,-3,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZDIFF_Keyspecs,1,zunionInterDiffGetKeys,3),.args=ZDIFF_Args,.reply_schema=&ZDIFF_ReplySchema},
{MAKE_CMD("zdiffstore","Stores the difference of multiple sorted sets in a key.","O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZDIFFSTORE_History,0,ZDIFFSTORE_Tips,0,zdiffstoreCommand,-4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SORTEDSET,ZDIFFSTORE_Keyspecs,2,zunionInterDiffStoreGetKeys,3),.args=ZDIFFSTORE_Args,.reply_schema=&ZDIFFSTORE_ReplySchema},
{MAKE_CMD("zincrby","Increments the score of a member in a sorted set.","O(log(N)) where N is the number of elements in the sorted set.","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZINCRBY_History,0,ZINCRBY_Tips,0,zincrbyCommand,4,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZINCRBY_Keyspecs,1,NULL,3),.args=ZINCRBY_Args,.reply_schema=&ZINCRBY_ReplySchema},
{MAKE_CMD("zinter","Returns the intersect of multiple sorted sets.","O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZINTER_History,0,ZINTER_Tips,0,zinterCommand,-3,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZINTER_Keyspecs,1,zunionInterDiffGetKeys,5),.args=ZINTER_Args,.reply_schema=&ZINTER_ReplySchema},
{MAKE_CMD("zintercard","Returns the number of members of the intersect of multiple sorted sets.","O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.","7.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZINTERCARD_History,0,ZINTERCARD_Tips,0,zinterCardCommand,-3,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZINTERCARD_Keyspecs,1,zunionInterDiffGetKeys,3),.args=ZINTERCARD_Args,.reply_schema=&ZINTERCARD_ReplySchema},
{MAKE_CMD("zinterstore","Stores the intersect of multiple sorted sets in a key.","O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZINTERSTORE_History,0,ZINTERSTORE_Tips,0,zinterstoreCommand,-4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SORTEDSET,ZINTERSTORE_Keyspecs,2,zunionInterDiffStoreGetKeys,5),.args=ZINTERSTORE_Args,.reply_schema=&ZINTERSTORE_ReplySchema},
{MAKE_CMD("zlexcount","Returns the number of members in a sorted set within a lexicographical range.","O(log(N)) with N being the number of elements in the sorted set.","2.8.9",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZLEXCOUNT_History,0,ZLEXCOUNT_Tips,0,zlexcountCommand,4,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZLEXCOUNT_Keyspecs,1,NULL,3),.args=ZLEXCOUNT_Args,.reply_schema=&ZLEXCOUNT_ReplySchema},
{MAKE_CMD("zmpop","Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.","O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","7.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZMPOP_History,0,ZMPOP_Tips,0,zmpopCommand,-4,CMD_WRITE,ACL_CATEGORY_SORTEDSET,ZMPOP_Keyspecs,1,zmpopGetKeys,4),.args=ZMPOP_Args,.reply_schema=&ZMPOP_ReplySchema},
{MAKE_CMD("zmscore","Returns the score of one or more members in a sorted set.","O(N) where N is the number of members being requested.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZMSCORE_History,0,ZMSCORE_Tips,0,zmscoreCommand,-3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZMSCORE_Keyspecs,1,NULL,2),.args=ZMSCORE_Args,.reply_schema=&ZMSCORE_ReplySchema},
{MAKE_CMD("zpopmax","Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","5.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZPOPMAX_History,0,ZPOPMAX_Tips,0,zpopmaxCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZPOPMAX_Keyspecs,1,NULL,2),.args=ZPOPMAX_Args,.reply_schema=&ZPOPMAX_ReplySchema},
{MAKE_CMD("zpopmin","Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","5.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZPOPMIN_History,0,ZPOPMIN_Tips,0,zpopminCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZPOPMIN_Keyspecs,1,NULL,2),.args=ZPOPMIN_Args,.reply_schema=&ZPOPMIN_ReplySchema},
{MAKE_CMD("zrandmember","Returns one or more random members from a sorted set.","O(N) where N is the number of members returned","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZRANDMEMBER_History,0,ZRANDMEMBER_Tips,1,zrandmemberCommand,-2,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZRANDMEMBER_Keyspecs,1,NULL,2),.args=ZRANDMEMBER_Args,.reply_schema=&ZRANDMEMBER_ReplySchema},
{MAKE_CMD("zrange","Returns members in a sorted set within a range of indexes.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZRANGE_History,1,ZRANGE_Tips,0,zrangeCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZRANGE_Keyspecs,1,NULL,7),.args=ZRANGE_Args,.reply_schema=&ZRANGE_ReplySchema},
{MAKE_CMD("zrangebylex","Returns members in a sorted set within a lexicographical range.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","2.8.9",CMD_DOC_DEPRECATED,"`ZRANGE` with the `BYLEX` argument","6.2.0","sorted_set",COMMAND_GROUP_SORTED_SET,ZRANGEBYLEX_History,0,ZRANGEBYLEX_Tips,0,zrangebylexCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZRANGEBYLEX_Keyspecs,1,NULL,4),.args=ZRANGEBYLEX_Args,.reply_schema=&ZRANGEBYLEX_ReplySchema},
{MAKE_CMD("zrangebyscore","Returns members in a sorted set within a range of scores.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","1.0.5",CMD_DOC_DEPRECATED,"`ZRANGE` with the `BYSCORE` argument","6.2.0","sorted_set",COMMAND_GROUP_SORTED_SET,ZRANGEBYSCORE_History,1,ZRANGEBYSCORE_Tips,0,zrangebyscoreCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZRANGEBYSCORE_Keyspecs,1,NULL,5),.args=ZRANGEBYSCORE_Args,.reply_schema=&ZRANGEBYSCORE_ReplySchema},
{MAKE_CMD("zrangestore","Stores a range of members from sorted set in a key.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZRANGESTORE_History,0,ZRANGESTORE_Tips,0,zrangestoreCommand,-5,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SORTEDSET,ZRANGESTORE_Keyspecs,2,NULL,7),.args=ZRANGESTORE_Args,.reply_schema=&ZRANGESTORE_ReplySchema},
{MAKE_CMD("zrank","Returns the index of a member in a sorted set ordered by ascending scores.","O(log(N))","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZRANK_History,1,ZRANK_Tips,0,zrankCommand,-3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZRANK_Keyspecs,1,NULL,3),.args=ZRANK_Args,.reply_schema=&ZRANK_ReplySchema},
{MAKE_CMD("zrem","Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.","O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZREM_History,1,ZREM_Tips,0,zremCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZREM_Keyspecs,1,NULL,2),.args=ZREM_Args,.reply_schema=&ZREM_ReplySchema},
{MAKE_CMD("zremrangebylex","Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","2.8.9",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZREMRANGEBYLEX_History,0,ZREMRANGEBYLEX_Tips,0,zremrangebylexCommand,4,CMD_WRITE,ACL_CATEGORY_SORTEDSET,ZREMRANGEBYLEX_Keyspecs,1,NULL,3),.args=ZREMRANGEBYLEX_Args,.reply_schema=&ZREMRANGEBYLEX_ReplySchema},
{MAKE_CMD("zremrangebyrank","Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZREMRANGEBYRANK_History,0,ZREMRANGEBYRANK_Tips,0,zremrangebyrankCommand,4,CMD_WRITE,ACL_CATEGORY_SORTEDSET,ZREMRANGEBYRANK_Keyspecs,1,NULL,3),.args=ZREMRANGEBYRANK_Args,.reply_schema=&ZREMRANGEBYRANK_ReplySchema},
{MAKE_CMD("zremrangebyscore","Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZREMRANGEBYSCORE_History,0,ZREMRANGEBYSCORE_Tips,0,zremrangebyscoreCommand,4,CMD_WRITE,ACL_CATEGORY_SORTEDSET,ZREMRANGEBYSCORE_Keyspecs,1,NULL,3),.args=ZREMRANGEBYSCORE_Args,.reply_schema=&ZREMRANGEBYSCORE_ReplySchema},
{MAKE_CMD("zrevrange","Returns members in a sorted set within a range of indexes in reverse order.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","1.2.0",CMD_DOC_DEPRECATED,"`ZRANGE` with the `REV` argument","6.2.0","sorted_set",COMMAND_GROUP_SORTED_SET,ZREVRANGE_History,0,ZREVRANGE_Tips,0,zrevrangeCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZREVRANGE_Keyspecs,1,NULL,4),.args=ZREVRANGE_Args,.reply_schema=&ZREVRANGE_ReplySchema},
{MAKE_CMD("zrevrangebylex","Returns members in a sorted set within a lexicographical range in reverse order.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","2.8.9",CMD_DOC_DEPRECATED,"`ZRANGE` with the `REV` and `BYLEX` arguments","6.2.0","sorted_set",COMMAND_GROUP_SORTED_SET,ZREVRANGEBYLEX_History,0,ZREVRANGEBYLEX_Tips,0,zrevrangebylexCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZREVRANGEBYLEX_Keyspecs,1,NULL,4),.args=ZREVRANGEBYLEX_Args,.reply_schema=&ZREVRANGEBYLEX_ReplySchema},
{MAKE_CMD("zrevrangebyscore","Returns members in a sorted set within a range of scores in reverse order.","O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","2.2.0",CMD_DOC_DEPRECATED,"`ZRANGE` with the `REV` and `BYSCORE` arguments","6.2.0","sorted_set",COMMAND_GROUP_SORTED_SET,ZREVRANGEBYSCORE_History,1,ZREVRANGEBYSCORE_Tips,0,zrevrangebyscoreCommand,-4,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZREVRANGEBYSCORE_Keyspecs,1,NULL,5),.args=ZREVRANGEBYSCORE_Args,.reply_schema=&ZREVRANGEBYSCORE_ReplySchema},
{MAKE_CMD("zrevrank","Returns the index of a member in a sorted set ordered by descending scores.","O(log(N))","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZREVRANK_History,1,ZREVRANK_Tips,0,zrevrankCommand,-3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZREVRANK_Keyspecs,1,NULL,3),.args=ZREVRANK_Args,.reply_schema=&ZREVRANK_ReplySchema},
{MAKE_CMD("zscan","Iterates over members and scores of a sorted set.","O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","2.8.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZSCAN_History,0,ZSCAN_Tips,1,zscanCommand,-3,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZSCAN_Keyspecs,1,NULL,4),.args=ZSCAN_Args,.reply_schema=&ZSCAN_ReplySchema},
{MAKE_CMD("zscore","Returns the score of a member in a sorted set.","O(1)","1.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZSCORE_History,0,ZSCORE_Tips,0,zscoreCommand,3,CMD_READONLY|CMD_FAST,ACL_CATEGORY_SORTEDSET,ZSCORE_Keyspecs,1,NULL,2),.args=ZSCORE_Args,.reply_schema=&ZSCORE_ReplySchema},
{MAKE_CMD("zunion","Returns the union of multiple sorted sets.","O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","6.2.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZUNION_History,0,ZUNION_Tips,0,zunionCommand,-3,CMD_READONLY,ACL_CATEGORY_SORTEDSET,ZUNION_Keyspecs,1,zunionInterDiffGetKeys,5),.args=ZUNION_Args,.reply_schema=&ZUNION_ReplySchema},
{MAKE_CMD("zunionstore","Stores the union of multiple sorted sets in a key.","O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","2.0.0",CMD_DOC_NONE,NULL,NULL,"sorted_set",COMMAND_GROUP_SORTED_SET,ZUNIONSTORE_History,0,ZUNIONSTORE_Tips,0,zunionstoreCommand,-4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_SORTEDSET,ZUNIONSTORE_Keyspecs,2,zunionInterDiffStoreGetKeys,5),.args=ZUNIONSTORE_Args,.reply_schema=&ZUNIONSTORE_ReplySchema},
/* stream */
{MAKE_CMD("xack","Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.","O(1) for each message ID processed.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XACK_History,0,XACK_Tips,0,xackCommand,-4,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STREAM,XACK_Keyspecs,1,NULL,3),.args=XACK_Args,.reply_schema=&XACK_ReplySchema},
{MAKE_CMD("xadd","Appends a new message to a stream. Creates the key if it doesn't exist.","O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XADD_History,2,XADD_Tips,1,xaddCommand,-5,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STREAM,XADD_Keyspecs,1,NULL,5),.args=XADD_Args,.reply_schema=&XADD_ReplySchema},
{MAKE_CMD("xautoclaim","Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.","O(1) if COUNT is small.","6.2.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XAUTOCLAIM_History,1,XAUTOCLAIM_Tips,1,xautoclaimCommand,-6,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STREAM,XAUTOCLAIM_Keyspecs,1,NULL,7),.args=XAUTOCLAIM_Args,.reply_schema=&XAUTOCLAIM_ReplySchema},
{MAKE_CMD("xclaim","Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.","O(log N) with N being the number of messages in the PEL of the consumer group.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XCLAIM_History,0,XCLAIM_Tips,1,xclaimCommand,-6,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STREAM,XCLAIM_Keyspecs,1,NULL,11),.args=XCLAIM_Args,.reply_schema=&XCLAIM_ReplySchema},
{MAKE_CMD("xdel","Returns the number of messages after removing them from a stream.","O(1) for each single item to delete in the stream, regardless of the stream size.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XDEL_History,0,XDEL_Tips,0,xdelCommand,-3,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STREAM,XDEL_Keyspecs,1,NULL,2),.args=XDEL_Args,.reply_schema=&XDEL_ReplySchema},
{MAKE_CMD("xgroup","A container for consumer groups commands.","Depends on subcommand.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XGROUP_History,0,XGROUP_Tips,0,NULL,-2,0,0,XGROUP_Keyspecs,0,NULL,0),.subcommands=XGROUP_Subcommands},
{MAKE_CMD("xinfo","A container for stream introspection commands.","Depends on subcommand.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XINFO_History,0,XINFO_Tips,0,NULL,-2,0,0,XINFO_Keyspecs,0,NULL,0),.subcommands=XINFO_Subcommands},
{MAKE_CMD("xlen","Return the number of messages in a stream.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XLEN_History,0,XLEN_Tips,0,xlenCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_STREAM,XLEN_Keyspecs,1,NULL,1),.args=XLEN_Args,.reply_schema=&XLEN_ReplySchema},
{MAKE_CMD("xpending","Returns the information and entries from a stream consumer group's pending entries list.","O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XPENDING_History,1,XPENDING_Tips,1,xpendingCommand,-3,CMD_READONLY,ACL_CATEGORY_STREAM,XPENDING_Keyspecs,1,NULL,3),.args=XPENDING_Args,.reply_schema=&XPENDING_ReplySchema},
{MAKE_CMD("xrange","Returns the messages from a stream within a range of IDs.","O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XRANGE_History,1,XRANGE_Tips,0,xrangeCommand,-4,CMD_READONLY,ACL_CATEGORY_STREAM,XRANGE_Keyspecs,1,NULL,4),.args=XRANGE_Args,.reply_schema=&XRANGE_ReplySchema},
{MAKE_CMD("xread","Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.",NULL,"5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XREAD_History,0,XREAD_Tips,0,xreadCommand,-4,CMD_BLOCKING|CMD_READONLY,ACL_CATEGORY_STREAM,XREAD_Keyspecs,1,xreadGetKeys,3),.args=XREAD_Args,.reply_schema=&XREAD_ReplySchema},
{MAKE_CMD("xreadgroup","Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.","For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XREADGROUP_History,0,XREADGROUP_Tips,0,xreadCommand,-7,CMD_BLOCKING|CMD_WRITE,ACL_CATEGORY_STREAM,XREADGROUP_Keyspecs,1,xreadGetKeys,5),.args=XREADGROUP_Args,.reply_schema=&XREADGROUP_ReplySchema},
{MAKE_CMD("xrevrange","Returns the messages from a stream within a range of IDs in reverse order.","O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XREVRANGE_History,1,XREVRANGE_Tips,0,xrevrangeCommand,-4,CMD_READONLY,ACL_CATEGORY_STREAM,XREVRANGE_Keyspecs,1,NULL,4),.args=XREVRANGE_Args,.reply_schema=&XREVRANGE_ReplySchema},
{MAKE_CMD("xsetid","An internal command for replicating stream values.","O(1)","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XSETID_History,1,XSETID_Tips,0,xsetidCommand,-3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STREAM,XSETID_Keyspecs,1,NULL,4),.args=XSETID_Args,.reply_schema=&XSETID_ReplySchema},
{MAKE_CMD("xtrim","Deletes messages from the beginning of a stream.","O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.","5.0.0",CMD_DOC_NONE,NULL,NULL,"stream",COMMAND_GROUP_STREAM,XTRIM_History,1,XTRIM_Tips,1,xtrimCommand,-4,CMD_WRITE,ACL_CATEGORY_STREAM,XTRIM_Keyspecs,1,NULL,2),.args=XTRIM_Args,.reply_schema=&XTRIM_ReplySchema},
/* string */
{MAKE_CMD("append","Appends a string to the value of a key. Creates the key if it doesn't exist.","O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.","2.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,APPEND_History,0,APPEND_Tips,0,appendCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,APPEND_Keyspecs,1,NULL,2),.args=APPEND_Args,.reply_schema=&APPEND_ReplySchema},
{MAKE_CMD("decr","Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,DECR_History,0,DECR_Tips,0,decrCommand,2,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,DECR_Keyspecs,1,NULL,1),.args=DECR_Args,.reply_schema=&DECR_ReplySchema},
{MAKE_CMD("decrby","Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,DECRBY_History,0,DECRBY_Tips,0,decrbyCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,DECRBY_Keyspecs,1,NULL,2),.args=DECRBY_Args,.reply_schema=&DECRBY_ReplySchema},
{MAKE_CMD("get","Returns the string value of a key.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,GET_History,0,GET_Tips,0,getCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_STRING,GET_Keyspecs,1,NULL,1),.args=GET_Args,.reply_schema=&GET_ReplySchema},
{MAKE_CMD("getdel","Returns the string value of a key after deleting the key.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,GETDEL_History,0,GETDEL_Tips,0,getdelCommand,2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STRING,GETDEL_Keyspecs,1,NULL,1),.args=GETDEL_Args,.reply_schema=&GETDEL_ReplySchema},
{MAKE_CMD("getex","Returns the string value of a key after setting its expiration time.","O(1)","6.2.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,GETEX_History,0,GETEX_Tips,0,getexCommand,-2,CMD_WRITE|CMD_FAST,ACL_CATEGORY_STRING,GETEX_Keyspecs,1,NULL,2),.args=GETEX_Args,.reply_schema=&GETEX_ReplySchema},
{MAKE_CMD("getrange","Returns a substring of the string stored at a key.","O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","2.4.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,GETRANGE_History,0,GETRANGE_Tips,0,getrangeCommand,4,CMD_READONLY,ACL_CATEGORY_STRING,GETRANGE_Keyspecs,1,NULL,3),.args=GETRANGE_Args,.reply_schema=&GETRANGE_ReplySchema},
{MAKE_CMD("getset","Returns the previous string value of a key after setting it to a new value.","O(1)","1.0.0",CMD_DOC_DEPRECATED,"`SET` with the `!GET` argument","6.2.0","string",COMMAND_GROUP_STRING,GETSET_History,0,GETSET_Tips,0,getsetCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,GETSET_Keyspecs,1,NULL,2),.args=GETSET_Args,.reply_schema=&GETSET_ReplySchema},
{MAKE_CMD("incr","Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,INCR_History,0,INCR_Tips,0,incrCommand,2,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,INCR_Keyspecs,1,NULL,1),.args=INCR_Args,.reply_schema=&INCR_ReplySchema},
{MAKE_CMD("incrby","Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,INCRBY_History,0,INCRBY_Tips,0,incrbyCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,INCRBY_Keyspecs,1,NULL,2),.args=INCRBY_Args,.reply_schema=&INCRBY_ReplySchema},
{MAKE_CMD("incrbyfloat","Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.","O(1)","2.6.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,INCRBYFLOAT_History,0,INCRBYFLOAT_Tips,0,incrbyfloatCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,INCRBYFLOAT_Keyspecs,1,NULL,2),.args=INCRBYFLOAT_Args,.reply_schema=&INCRBYFLOAT_ReplySchema},
{MAKE_CMD("lcs","Finds the longest common substring.","O(N*M) where N and M are the lengths of s1 and s2, respectively","7.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,LCS_History,0,LCS_Tips,0,lcsCommand,-3,CMD_READONLY,ACL_CATEGORY_STRING,LCS_Keyspecs,1,NULL,6),.args=LCS_Args,.reply_schema=&LCS_ReplySchema},
{MAKE_CMD("mget","Atomically returns the string values of one or more keys.","O(N) where N is the number of keys to retrieve.","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,MGET_History,0,MGET_Tips,1,mgetCommand,-2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_STRING,MGET_Keyspecs,1,NULL,1),.args=MGET_Args,.reply_schema=&MGET_ReplySchema},
{MAKE_CMD("mset","Atomically creates or modifies the string values of one or more keys.","O(N) where N is the number of keys to set.","1.0.1",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,MSET_History,0,MSET_Tips,2,msetCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,MSET_Keyspecs,1,NULL,1),.args=MSET_Args,.reply_schema=&MSET_ReplySchema},
{MAKE_CMD("msetnx","Atomically modifies the string values of one or more keys only when all keys don't exist.","O(N) where N is the number of keys to set.","1.0.1",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,MSETNX_History,0,MSETNX_Tips,0,msetnxCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,MSETNX_Keyspecs,1,NULL,1),.args=MSETNX_Args,.reply_schema=&MSETNX_ReplySchema},
{MAKE_CMD("psetex","Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.","O(1)","2.6.0",CMD_DOC_DEPRECATED,"`SET` with the `PX` argument","2.6.12","string",COMMAND_GROUP_STRING,PSETEX_History,0,PSETEX_Tips,0,psetexCommand,4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,PSETEX_Keyspecs,1,NULL,3),.args=PSETEX_Args,.reply_schema=&PSETEX_ReplySchema},
{MAKE_CMD("set","Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.","O(1)","1.0.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,SET_History,4,SET_Tips,0,setCommand,-3,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,SET_Keyspecs,1,setGetKeys,5),.args=SET_Args,.reply_schema=&SET_ReplySchema},
{MAKE_CMD("setex","Sets the string value and expiration time of a key. Creates the key if it doesn't exist.","O(1)","2.0.0",CMD_DOC_DEPRECATED,"`SET` with the `EX` argument","2.6.12","string",COMMAND_GROUP_STRING,SETEX_History,0,SETEX_Tips,0,setexCommand,4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,SETEX_Keyspecs,1,NULL,3),.args=SETEX_Args,.reply_schema=&SETEX_ReplySchema},
{MAKE_CMD("setnx","Set the string value of a key only when the key doesn't exist.","O(1)","1.0.0",CMD_DOC_DEPRECATED,"`SET` with the `NX` argument","2.6.12","string",COMMAND_GROUP_STRING,SETNX_History,0,SETNX_Tips,0,setnxCommand,3,CMD_WRITE|CMD_DENYOOM|CMD_FAST,ACL_CATEGORY_STRING,SETNX_Keyspecs,1,NULL,2),.args=SETNX_Args,.reply_schema=&SETNX_ReplySchema},
{MAKE_CMD("setrange","Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.","O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.","2.2.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,SETRANGE_History,0,SETRANGE_Tips,0,setrangeCommand,4,CMD_WRITE|CMD_DENYOOM,ACL_CATEGORY_STRING,SETRANGE_Keyspecs,1,NULL,3),.args=SETRANGE_Args,.reply_schema=&SETRANGE_ReplySchema},
{MAKE_CMD("strlen","Returns the length of a string value.","O(1)","2.2.0",CMD_DOC_NONE,NULL,NULL,"string",COMMAND_GROUP_STRING,STRLEN_History,0,STRLEN_Tips,0,strlenCommand,2,CMD_READONLY|CMD_FAST,ACL_CATEGORY_STRING,STRLEN_Keyspecs,1,NULL,1),.args=STRLEN_Args,.reply_schema=&STRLEN_ReplySchema},
{MAKE_CMD("substr","Returns a substring from a string value.","O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","1.0.0",CMD_DOC_DEPRECATED,"`GETRANGE`","2.0.0","string",COMMAND_GROUP_STRING,SUBSTR_History,0,SUBSTR_Tips,0,getrangeCommand,4,CMD_READONLY,ACL_CATEGORY_STRING,SUBSTR_Keyspecs,1,NULL,3),.args=SUBSTR_Args,.reply_schema=&SUBSTR_ReplySchema},
/* transactions */
{MAKE_CMD("discard","Discards a transaction.","O(N), when N is the number of queued commands","2.0.0",CMD_DOC_NONE,NULL,NULL,"transactions",COMMAND_GROUP_TRANSACTIONS,DISCARD_History,0,DISCARD_Tips,0,discardCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_ALLOW_BUSY,ACL_CATEGORY_TRANSACTION,DISCARD_Keyspecs,0,NULL,0),.reply_schema=&DISCARD_ReplySchema},
{MAKE_CMD("exec","Executes all commands in a transaction.","Depends on commands in the transaction","1.2.0",CMD_DOC_NONE,NULL,NULL,"transactions",COMMAND_GROUP_TRANSACTIONS,EXEC_History,0,EXEC_Tips,0,execCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_SKIP_SLOWLOG,ACL_CATEGORY_TRANSACTION,EXEC_Keyspecs,0,NULL,0),.reply_schema=&EXEC_ReplySchema},
{MAKE_CMD("multi","Starts a transaction.","O(1)","1.2.0",CMD_DOC_NONE,NULL,NULL,"transactions",COMMAND_GROUP_TRANSACTIONS,MULTI_History,0,MULTI_Tips,0,multiCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_ALLOW_BUSY,ACL_CATEGORY_TRANSACTION,MULTI_Keyspecs,0,NULL,0),.reply_schema=&MULTI_ReplySchema},
{MAKE_CMD("unwatch","Forgets about watched keys of a transaction.","O(1)","2.2.0",CMD_DOC_NONE,NULL,NULL,"transactions",COMMAND_GROUP_TRANSACTIONS,UNWATCH_History,0,UNWATCH_Tips,0,unwatchCommand,1,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_ALLOW_BUSY,ACL_CATEGORY_TRANSACTION,UNWATCH_Keyspecs,0,NULL,0),.reply_schema=&UNWATCH_ReplySchema},
{MAKE_CMD("watch","Monitors changes to keys to determine the execution of a transaction.","O(1) for every key.","2.2.0",CMD_DOC_NONE,NULL,NULL,"transactions",COMMAND_GROUP_TRANSACTIONS,WATCH_History,0,WATCH_Tips,0,watchCommand,-2,CMD_NOSCRIPT|CMD_LOADING|CMD_STALE|CMD_FAST|CMD_ALLOW_BUSY,ACL_CATEGORY_TRANSACTION,WATCH_Keyspecs,1,NULL,1),.args=WATCH_Args,.reply_schema=&WATCH_ReplySchema},
{0}
};
